%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: Cocktails_002.eps
%%Creator: Adobe Illustrator(R) 17.1
%%For: Tom
%%CreationDate: 2/15/2015
%%BoundingBox: 0 0 500 500
%%HiResBoundingBox: 0 0 500 500
%%CropBox: 0 0 500 500
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 17.1.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 17.1.0 x273 R agm 4.7709 ct 5.3840%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 128 8%%BeginData: 8729 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FDFCFFFDFCFFFD21FFA8CFFD73FFAFFD0AFFA675FD24FFCFA7ADA7
%CFFD4BFFA8FD09FFC274A8FD1BFFCFCFC9CFFD04FFA7CEA6ADA6CFFD16FF
%CACAFD33FFA8FD07FFCAC274A7FD1AFFC9C9A7CAA0C9FD04FFA6CEA6A7A6
%CFFD16FF7676A1FD30FFA9FD08FFCABB9FA0FD19FFC9CEFD04FFC8FD04FF
%CFA6CEA7CEADFD17FFA8A176CAFD2FFFA8FD07FFBCBB99A0FD16FFCFC9C8
%CFFD05FFCFCAFFFFFFA9CFA8CFA7CEFD19FFA876A1A8FD34FFCABBB5C17B
%FD16FFCFC9FD07FFA8CFCAFFA8CFA7CFA7CEA7FD1BFFA8A8A8FFCBFD2AFF
%A8FD06FFC9B4BB99A0FD1EFFA8A7A7CAA6A6A0A7A0A7A6CFFD1CFFA8CBA2
%A8A8FFFFFFCAFFFFFFCAFFCBFFA9FD1EFFCAFFCAFFCAFFCACAC3C17CFD1F
%FFA7CAA7CEA6C9A7C9A6CEFD1EFF85AF84847D8484AF85AF84AF85AFAFFD
%1CFFC3C3C3BCBCC2BCBCBCC2BCC299A6FD1FFFC9A7CAA6A7A6A7A1A7A7FD
%1EFF8B60856060353535616061606184FD1DFFCAC2C9BCBCBBBCBBBCBBBC
%BCC1A0FD1FFFA7CFC9C9A6C9A7C9A7CFFD1FFF8B608B608B605A35606067
%84FD1EFFCAC3C3BCBBBCB5BCBBBCB5BC98A7FD1FFFA7A7CFA7A6A0FD04A7
%FD1FFFA8616085608B606035595AFD20FFC2CABCBCBBBCBCBCBBC2CACAA8
%FD1FFFA7CFCAC9A6C9A7C9A7CFFD20FFAF8B605959602E6060AFFD1FFFCA
%C3C3BCBBBCBBBCBBBCB5FD22FFA7A7CFA7A7A1A7A6A7A7FD21FF84592852
%2E2E2EAFFD20FFCAC3C3BBBCBCBCBBBCBCBCC3FD21FFA7CAA7C9A6A7A6C9
%A6CFFD22FF59592E5A5984FD21FFBCC3BCBCB5BCBBBCB5BCB5BCFD20FFCA
%C9A7CAA7C9A6A7A0A7A7FD23FF59593584FD21FFC4BCBDB5FCB5B0B5FCB5
%B0B5FCCAFD20FFA7CFCACFA6C9A7CEA6CFFD24FF84A8FD22FFC3B5BDFCFC
%FCB0FCB0FCB0FCFCC3FD20FF76767D51514B514B4B7DFD24FFCAA8FD22FF
%BDBCBCB5FCB5FCB5FCB5FCB5FCC3FD20FF204B524BF8202020F87DFD24FF
%A8FD23FFC3B5BCFCB0FCB0FCB0FCB0FCFCC3FD20FF4B27762020F82020F8
%52FD24FFA8A8FD22FFCABCBCB5FCB5FCB5FCB5FCB5FCCAFD20FF2752764B
%20262020F87DFD24FFA8FD24FFB6BCB5B0FCB0FCB5FCB0FCB6FD21FF4B27
%762620F820202076FD24FFCAA8FD23FFCABCBCFCB5FCB5FCB5FCFCC3FD21
%FF4B4B524BFD0420F87DFD24FFA8FD25FFC3B6B5FCB0FCB0FCFCBCFD22FF
%522776FD0420F82076FD24FFA8A8FD25FFCABCBCFCB5FCB5C3FD23FF5276
%76764A4B4A4B20A1FD24FFA8FD27FFCABCB6FCB5CAFD24FF764B7D4B4B20
%4B204A7DFD24FFA8A8FD28FFA8A8FD26FF4B76764B204B444B20A8FD24FF
%A8FD29FFAE84FD26FF764B7D4B44204B20207DFD25FFA8FD28FFA8FD27FF
%4B76764B204B204B20A8FD24FFA8FD29FFCFCAFD26FF7652A151FD054B7D
%FD23FFA8AFA8FD28FFCACFFD54FFA8A8A8FD26FFA8A87DFD4FFFA9FFA8AF
%A8A8A8A9A8FFA8FD23FFA87D7D7DFD25FFFD06A8A7A8A8FD21FFA9FFFFFF
%AFFFFFFFA9FD22FFA87E537D535353A8A8FD23FFA8A8A7A8A1A87DA8A8FD
%4AFFA8A87E847DA87E847DA9FDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFF
%FD8DFFCAFFFFFFA8FFCFFFA8FFCFFFCAFD29FFA8592E5959A8FD45FFCFFF
%CAFFCFFFCAFFCFFFCAFD2AFF5959FFFFAE598384FD44FFCACFA8FFCACFA8
%FFCACFCAFD28FFAF34FD05FFA88459A8FD41FFCFFFCFFFCAFFCAFFCAFFCF
%FD29FF84A8FD4BFFA8FFCACFA8CFCACFA8FD1FFFA7A1A1A7A1A7A0A7A0A7
%A0A07CA7A7FD4AFFCFCFCACFCACFCACFFD1FFFA76E9F7BA0749974997499
%74996EA7FD49FFCACFCACAC9CFC9CAC9FD1FFFA07475A075997475747574
%757474A0FD18FFCACAFD30FFCACFCACFC9CFCACFFD1FFFA76E9FA0A07499
%7499749974996EA7FD18FFC8CACACFCFFD2CFFCACFC9CFC9CAA7CFCAFD1F
%FFA17474A075756E7574756E756E74A0FD17FFCACDC8C9A6C9C8CFFD2BFF
%CACFCACFCACFCACFFD1FFFA76E9FA0A074997499749974756EC9FD18FFC7
%CDC9C9C8CEC8CFFD29FFCACFCACFCACFCACFCAFD1FFFA16E6EA075756E75
%74756E756E6EA1FD17FFCACEC8CFA8CEC9C9A7FFFFFFCAFFFFFFCFFD21FF
%C9C9C9C2C9C8C8C2C9FD1FFFCA6E7575A075756E9974756E756EA7FD17FF
%CFC9CFCFCFC9CFC9CFCAFFCFFFCFFFCFFD22FF9FC99EC198C198C198CFFD
%1EFFA16E6E7675756E756E754A744A6EA7FD17FFC7C69FC8C8C79EC7C0C7
%9FC7C1C79FC7C7FD20FFC9C8C2C198C19FC198C1C9FD1FFFA07575A07575
%6E756E756E75A0FD18FFC8C0C7C8C8C0C6C6C6C0C7C6C7C0C7C0C8FD20FF
%C99FC298BB98C198BB98C2FD1FFFCF6F7575754A6E4A754A6E6FCFFD18FF
%C9C6C0C8C8C6C0C6C0C6C0C7C0C6C0C6C8FD20FFC2C99FC199C198C199C1
%99FD1FFFCFA16FA0756F6E6F4A756EA1CFFD18FFCFC0C7C8C8C6C6C0C7C6
%C7C0C7C6C7C0CEFD1FFFA8BC9A9392B5929392B59293A8FD1FFFA0757575
%4A6E4A6E4A6EA1FD19FFCAC7C0C8A6C7C0C69EC7C0C69EC7C0C6C9FD20FF
%93BD8CFC8CFC8CB08CFC8CCAFD1FFFCA6FA0756F6E6F4A756ECAFD1AFFC7
%C7C8CEC7C6C0C7C6C7C0C7C6C7C0FD20FFCAB69A938CB08C8C8CB08C8CCA
%FD1FFFA17575754A6F4A6F4A6FA1FD1AFFC7C0C8C8C7C0C6C0C7C0C6C0C7
%C0C6CFFD20FF9A9A936868936893688C6FFD20FFCA6F9A756F4A6F4A6F6E
%CFFD1AFFC8C6C7C9C7C7C6C6C0C7C6C7C0C7C8FD21FFA86F9A4468446844
%6844A1FD20FFA76F6F764A6E446F446FA7FD1BFF9FC7C8C89EC7C0C69EC7
%C0C69EFD23FFA1769368696868449AFD21FFCF6E9A756F4A6F4A6F6ECFFD
%1BFFC8C1C9C8C7C1C7C0C7C1C7C0C8FD24FFA1706F4468446FA8FD21FFA8
%6F6F764A6E446F446FA7FD1BFFC2C1C8C8C1C1C1C0C0C1C1C1C2FD25FFCA
%A19A6FA1FD23FFCF6F76756F4A6F4A6F6FCFFD1BFFC9C1C9C8C2FD07C1C9
%FD27FFA8CAFD24FFA76F6F76446E446E446FA8FD1BFFC9C1A0C9C1C1C0C1
%C1C1C0C1C9FD26FFA8CAA1FD25FF6F75756F446F446F6FCFFD1BFFCFC1C9
%C9C8C1C2FD05C1CFFD26FFCAA8A8CAFD23FFA86F4B76446E446E4475CAFD
%1BFFCABBC2C9BCBBBBBCFD04BBCAFD26FFA8FFA8FD25FF6F6F756F446F44
%686FFD1DFFBCBCC2C2B5BBB5BBB5BBBBFD24FFA8FFA8A8A7A8A8FFA8FD21
%FFCAA1A1A8A1A1A0A1A0A1A8FD1CFFCFC3C9A1C3C2C39AC3C2CAAFFD22FF
%A8CAA8A87DA87DA87DA8A8FD21FFCAFFCFFFCFFFCFFFCAFD4CFFA8FFA8FF
%A8FFA8FFA8FD23FFCFFFFFFFCFFDFCFFFDFCFFFDB2FF5A302F7EFD7BFF53
%307EA9545AA1C3A8FD77FF54FFFFFFCA4D54A19AA1FD42FFA8FD32FF7F5A
%FFFFFF9ACF855B7E9AA8FD40FFA87EFD10FFAFFD15FFA9FFA8FFA8FFA8FF
%A8FFA9FF54A9FFFFA1CAFFFFA95B7EC2CAFD40FF7D7EFD0DFF8458827C83
%A8FD11FFFD06A884A8A8A884A87E7EA8A97DA1A8FFFFFFA8FFA19AFD3DFF
%A8FFFFFF7DA9FD0BFF837CCEA6CE8283FD12FFA8FFA8AFA8FFA8AFA8FFA8
%7E7EFFA8A1A8FD07FFA1C3FD3CFF7D52FFFFFF53FD0AFFAE7CADA5A6A6A6
%7C83FD10FFFD0CA854A8A8A17DA8A8FD07FFA1FD3DFFA176FFFFA884FD09
%FF83ADA7A7A7ACA6AD7CFD11FF76766F766F766F766F764B706F6F689A6F
%76FD47FFA8FFA9FFA9FFA8FFA9FFA8FFA9FFA8FFA9FFA6A6A683A8FD10FF
%A1FD096F4B4B6F446F6F6F9AFD50FFAFFFFFFFAFFFFFFFA6ACA6AD7DFD12
%FFA16F9A6F9A6F9A6F704B9AFD046F76FD21FFCACAFD27FFA8CAA8FFA8FF
%CACBA8FFA9CBA8FFA8A6A6AD7CA8FD13FFA16F6F444B446F44454444446F
%76FD22FFBCCBFD27FFCAC3A1A1FD09CA7CA782A758A8FD16FF766F446844
%6E44684476FD24FFBDC3FD27FFCAC39A9494BD9AC39ABC94BCC3FF838383
%AFFD17FFCA6F93686E68936868A1FD24FFC4BDFD28FFC3C3B5B593B693B5
%93B693FD1DFFA89A68936893689368FD26FFB6CAFD28FFA1BC939393B593
%B58DCAFD1DFFCA6F93686E686F686FA8FD24FFCFCACAFFCFFFFFFFCFFFFF
%FFCFFD1FFF9BBC93B693B693C3FD1FFFA06E93686F68689AFD22FFA8FFCA
%FFA8CACAFFA8FFCAFFA8FFCFFFA8FD1EFFCA9AB693B58D9AFD20FFA899FD
%0568FD26FFCFFFC4FD05FFCFFFCAFFCFFD20FFA8766F446FA8FD21FFA876
%4B6F4BFD24FFA8CFA8CFA7CAA7CAA7CAA7C9A1C9A1C9A8FD20FFA87D537E
%FD23FF847E53A8FD25FFA7CFCACAA7C9A7C9A7C9A7C9A7C9A7CFFD22FFA9
%FD25FF7D7DAFFD24FFCAC9A7CFA7A7A1C9A7A7A1C9A7A7A0A7A8FD21FFA8
%FD25FFA87D58FD26FFA7CFCACAA7CAA7C9A7CAA7C9A7C9A7FD49FF7D83FD
%26FFC9A7CFA7A7A1C9A7A7A7C9A7A7A0C9CFFD21FFA8FD26FF7D7DFD26FF
%A7C9A8CFA7C9A7C9A7C9A7C9A7C9A7FD23FFA9FD25FF7DA8FD26FFCFA1CA
%A7C9A1A7A1C9A7A7A1A7A1CAFD22FFA8FD25FFA8847DFD27FFCAA7FFA7C9
%A7CAA7C9A7CAA7C9FD4AFF7DA8FD27FFA7A7A8CAA7A7A1C9A7A7A1C9A7FD
%23FFA8FD26FFA87DFD27FFCFA7CFA7C9A7C9A7C9A7C9A1CAFD4AFF7DA8FD
%27FFA7A0A7A77BA0A0A07BA0A0A0A1FD23FFA8FD26FF837DFD27FFCFA0CA
%A7FD04A0A6A0A09FCFFD4AFF7DA8FD27FFA8A0A7A77BA0A0A07CA0A0A0A7
%FD23FF7EA8FD24FFAF7D7DFD28FF75A7A17574757575747574CFFD22FFA8
%7D52FD25FFA8A8FD28FFA075A14A6E4A6E4A6E4A75CAFD21FFA8A853537D
%FD23FFA8FFA8FD28FFCFCAA8A7A0A7A0A7A0A7CAFD21FFA8A984A87EA8A8
%A9A8FD1FFFAFFFAFAFA8FFAFFD26FFCFFD27FFA8A97EA87EA884A87EA87E
%A87EFD1BFFFD04AFA9AFAFAFA9AFAFFDFCFFFDFCFFFDFCFFFD20FFFF
%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.5-c014 79.151739, 2013/04/03-12:12:15        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Web</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:CreatorTool>Adobe Illustrator CC (Windows)</xmp:CreatorTool>
         <xmp:CreateDate>2015-02-15T00:36:03+02:00</xmp:CreateDate>
         <xmp:ModifyDate>2015-02-15T00:36:03+02:00</xmp:ModifyDate>
         <xmp:MetadataDate>2015-02-15T00:36:03+02:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEDIAMgAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABADIAAAAAEA&#xA;AQMgAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqpXErRIG&#xA;AB+IA17A4QgqoNRUYEuxVgOpea7i3/M/T7RZSdNkQ6fPH+yJ5P3it/rcgq/fmnyasjViP8NcPxO/&#xA;7HZS0RjpxkP8TPs3DrXYq7FXYq7FXYqo3V3b2sfqTNxHYdWJ8AO+VZs8MYuRpnjxymaCDj122MiJ&#xA;NDNbCQ0jeZOKk/OpzFj2hCwJCUL5cQpuOllVgiVdyOuTOIJDAAZgCUDdCfwzLymQieH6nGDHE8w6&#xA;ijgvwdK0KlaV79Qds0Q7Ryg7kEe79I5NnAGQ2d3Hd26zx7Btip6gjYg5u8GYZI8QYEUrZch2KuxV&#xA;2KrZHCRs5BIUFiFBYmgrsBuTiqR6F520HWC0UU3oXaHhLaTj05FfYcSrUINT0ND7YBJuyYJR9yfY&#xA;Wl2KuxV2KuxV2KuxV2KuxV2KuxVTuI/UgdB1I2+Y3GIUtW0nOBG9sJQGry6htLSe7nPGG3jaWRvB&#xA;UBY/gMhKQAJPRtxYzOQiOcjXzfPVrqU91qI1OXedtThuhudnadW2+/OTyTvIJ9eL9L3nbWCOPTiA&#xA;5RiB8n0XnXPn7sVdirsVdiqldfWvTpbBfUJpyetFHjQdcpzeJw+ir82ePhv1clK20+OJ/WlYz3J6&#xA;zP1H+qOijK8OkjE8UjxT7z+juZ5M5IobR7lPWzbDTJmuULxClQOtSwAp08cnqYRlAiQsIwyIkCOa&#xA;Cl8y28MKOwkPKg2VSenzyo6yEQCbScRtJp9U0l5XkEUo9UktsBuetBy75rchwWTR9TIY5J75aobS&#xA;aRARC8tYwetAoB/VmZ2aNpV9PFt8gGqfNN82TB2KuxV2KuxVJdf8naDrhEl5BwvEFIr+A+lcJ4Uk&#xA;XqP8lqr7YCLbceaUOXJLrCy8zeXwIjdNrFgv2Q6hZ1XYdAQDQD9n/gcQGcpQn04SnNnrtpdHgjBZ&#xA;Rs0bbMD4b4Q1SgQjPXPhhpg71z4Y0q5JGY0pt3OKqmBXYq7FXYq7FXYqkfm67u7PT4bm2fiVnRZN&#xA;gQVcFf8AiRGUaiRjGx3ux7MxRyZDGQ/hP2fsea6t5y8xWt/LFFcgRihUcF2qAfDNZk1eQHm9Zpuy&#xA;dPOAJjv70E/nrzI6lXuFZW2KlFII+VMh+cyd7kjsfTjcD7Sho7yfVdS08ThC7XlpFRUVAQbhevED&#xA;xzEzSM8kL7x94cLtXBHFgIj99vfM6h4Z2KuxV2KuxV2KuxVLfMn/ABxbn/Yf8nFyjU/3ZbMX1MS1&#xA;D/eWPfwP4ZpMx9LkhBKvwivzwwh6d2TP9FULpNqAKD0x+ObvTxAgAHDn9RRuXMHYq7FXYq7FXYqh&#xA;dTsfrto8IkaKTrHIpIIYdOnbxyeOfCbadRi8SBANF5rq1hPMzw3ck0V3bmnqpIySAezA7j57ZsRG&#xA;J3A2Lzcs2aFxJNx80o+ueatN+zcy6jaDtzYTKPlX4vo+7J8A7mv8xKX8RB95TPRNauNZuEtbO4lN&#xA;yxo0TOwK0618KYJcAFkJh40pCIJ383qGn2YtLRIObSMo+ORiSWY9TvmrnLiNvUYcXBERu0RkW12K&#xA;uxV2KuxV2KsY8+XKiytbMH95cThyv/FcI5E/8HxH05i6uWwHeXcdj4zxyn0jH7T+y3kWtTLLqczL&#xA;0Uhf+BFD+OabKbkXudJGsYQOVuQ9Y/K99PvdBEM0Mctzp05KF1VmQP8AGjqSKjflTNvoRGUNxvEv&#xA;Ee0UJQz3Z4Zj7tv1M6zYPOuxV2KuxV2KuxV2Kpd5h/449z8l/wCJDKdR9BbMX1BiWoClrEO1R+rN&#xA;LnjUR3OVi5kIEsaVHT+mVyy3uEvQtJUDS7SneJD96g50GH6B7nCnzKKyxi7FXYq7FXYq7FXYqxbz&#xA;/oeoXui3Nzo4/wBy8UZ9JRsZFHVR/lUrxy/Dl4djycHV6QTIkPqH2h4AmjeZLo3GmSTzKkrB4Ema&#xA;ViZQ1OFBycHc127ZfGdjcuLPHCJBEb+T338vvKU2iaPbSamEl1sxenPcD4mEdarHzIDHalffMfLl&#xA;MtujmaXTRx3KqMvsZXlLmOxV2KuxV2KuxV2KvI/zSml/xlGpHwQ6ZG8Va05PPLz/AOTaZrtUfX8H&#xA;uPZ2I/KHvOU38Ixr7y+fWZmYsxqxNSfc5qH1ACnYFet/844TTjzPqkIr6D2XOTfbmkqBNvk7Zsez&#xA;j6z7nh/bqI/L4z14/wBBv7g+g83D5e7FXYq7FXYq7FXYqwv85tfv/L/5Z67rFhwN5ZxRvEJRySrT&#xA;xqagEdm8cryxuJDbhFyD5384/nj51sdCsLmBbT1JmQPyiYjeMt/PmJk08ZCi5sIC2Gn/AJyO/MMi&#xA;nGx/5EP/ANVMq/Jw82w4wX2j5B1K41TyL5c1O54i5vtLsrmYIKLzmt0duI3oKtmygKiA6zJ9R96e&#xA;5Jg7FXYq7FXYq7FXYq7FUiSxsh5oacQRiahb1Qi8qlACa0rvhtjwi7pPcDJ2KuxV2KuxV2KuxV2K&#xA;sE/NHy/Pcw22t2qGSSwV4ryNRVjbSUYuB39Jlr/qlsxNVjupDo9J7Pa2MDLDI0J0Y/1h0/zh9oD5&#xA;q1rTX0/UJIafuiecD9mjP2SD+GaScaL63pM4y4wevX3oHIOS+jvyI8lXOiaFPq9/GY7zVuBiib7S&#xA;WyAlCfAuWrTwpm60OExjxHmXyj2x7VjqMwxQNwx3fnLr8v1vUMz3jnYq7FXYq7FXYq7FXnn/ADkH&#xA;C8v5N+aFTqLZHNfBJ42P4DIz5NuD6w+RPzA/5RnS/wDXj/5NHKi58Obz3Itr9GPys/8AJYeUP+2J&#xA;p3/UJHmRHk6nJ9R97KMLB2KuxV2KuxV2KuxV2KpSgP8AiF/ZN/8AgRiqbYq7FXYq7FXYq7FXYq7F&#xA;XYq8889/lVourW7zWxFkWNZEVOSBmNOcYqvA1pyA2PhXfMTNpIz5bPS9m+0+bTfUOOvOj7j3+XUJ&#xA;f+XX5L6HpTJq2pv+k7wNytUkThFHxNA3Cr8mqKgk0HhXIYNDGBs7lyO1fa/NqocGMeFE897J+O1B&#xA;6nmc8k7FXYq7FXYq7FXYq7FWF/nR/wCSt8ye1oSPoZchPkW7T/WHyv53kkHl7TviP2k7n/fRzHly&#xA;dnjG5YN6sn85+85BvoPvryMAvkry+FFFGm2YAG1B6CZmR5B0WT6j707yTB2KuxV2KuxV2KuxV2Kp&#xA;XGCNflPjGKfcMVTTFXYq7FXYq7FXYq7FXYq7FUFrF1bW1g73LhIyVUE1NST4D78Ega2SK6rdBv7K&#xA;+0uG4s3DwGqggEUKkg7GhGIBrdBrpyR+FXYq7FXYq7FXYq7FXYqk3nPy6nmTyvqWhPObZdQiMLTh&#xA;eZQEg1C1WvTxwSFimeOfDIF5brf/ADjfZanp9vaNrskQgKkOLdTXivHp6gys4nKjqyDySP8A6FK0&#xA;7/qZJv8ApFX/AKq5HwfNn+ePc960TThpmjWGmiT1RZW0NsJSOPL0ownKlTSvHLgHAkbJKNwodirs&#xA;VdirsVdirsVUpLq3jUlnHw9QDU/cMVtIl1Gcan9YMR9JjxbxCdB/XDTG0+juYJACjqeXQV3+7Ayt&#xA;UxV2KuxV2KuxV2KuxVSu2ultZTaIr3IU+ikhKoW7ciKmmIVgfmTQPzD1iTjzs0twKKnN1AqN6KAe&#xA;vTck5aDFrIJQ3l/y1+Zmhu/1OSwaGQgyW8jyMhI77AEH5HEmBUCQei2bXTWsTXaJHclR6yRsWQP3&#xA;4kgEjKi2KuKuxV2KuxV2KuxV2KqN5bLdWstuzvGJVK84zxda91PjiqTT+U/WjVDqd2vH9pXoTtTf&#xA;BSbUP8ED/q733/I3+zGltkcMQihSIEsI1ChmNWNBSpPjhQvxV2KuxV2KuxV2KuxVS+p2v++l+7G0&#xA;U19Ttf8AfS/dhtabFpag1ESgjoaYLWlXFLsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdiriQNztirXNP5h9+Npp3N&#xA;P5h9+C1pwZT0IPywobxV2KuxV2KuxV2KuxV2KuxV2Kse1X8wfJ+lXjWV7qSLcptJHGkkvE9wxjVw&#xA;pHcE1xceeqxxNE7pxp+p6fqNuLiwuY7mA/7siYMPkadD7HFuhOMhYNonFk7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FVO4TnEafaHxL8xgkNmUTRS2UDkGHRhXKCQ3BZXBYTSN0+P7Un+xH8ctxj&#xA;q15D0RmWNTsVdirsVdirsVdiqVt5m0JZ5Ldr2ETRErJGZE5KVNCCK9jlPjwurbfAnV0tbzX5fVip&#xA;voajqOaf1yEtXjHMhkNNM9EPfecdCSxuJIb6IypE7R0dD8QUkd/HH83jurDGenyCJNJX+W8Og2Oi&#xA;W1nbTRS6pPGJ79wytK8jfE3Ig1IXlTLIZ4SNAuNg0hxYxY3PNM7/AMkaFc3Bu7ZH0y/O/wBcsHME&#xA;n+yC/A1e/JTlrXPSwJsek942THR7PU7S1aHUL79IShyY5zGsTenQUVguxINd8WzHGQFSNo7Fsdir&#xA;sVdirsVdirsVdirsVdirsVdirsVdirsVdiqSXK0Wn8rMv3E5rMg+9z4FD5S2p3YKFtI/cE/ec2eA&#xA;VAOvzH1FEZc1uxV2KuxV2KuxV2KvmfUCg8+69UVY316P+S7ZymUfv5e8/e9FAfuo+4fck+rSBdQl&#xA;A6DjT/gRmLlHqLdjGyAeX92QP86nIAbpkNno35DsG85XvHoNOkBPv68ObXscfvT/AFf0hwO0v7se&#xA;/wDW95zo3SuxV2KuxV2KofULiS3tHljAMgoE5V4gk0Bam9MxNbqxp8ZmeW329/k24YCUgCgLTzDC&#xA;8A9eOQTrtMqKWAINO3yyo9owABIO/cLcjJoyDsRXRMra6t7mP1IHDr0PYg+BB3B+eZeHPDILibDi&#xA;zxmJoquWsHYq7FXYq7FXYq7FXYq7FXEgCp2A6nFWE33nDTo4YpGhnInLOoCrWla/zDxzm83aeMAG&#xA;pb/jvd3i0MySLGyC/wAbaZ/yz3P/AACf815jfytj7pfIfrbvyE++P4+DMfLupwalpUVzCGVashVw&#xA;AwKnvQntvnQ6DURy4hIOn1eE48hBTLMxxnYq7FXYq7FXYq7FXyxr8klv+ZmuRVoHvbpjUdmdnB/H&#xA;ObzR/fS95elxb4Y+4JVrbr+k5G70Xfx+EZiZY7t2MbIBrhVG569shws3pv8AzjupfzPqUv7KWRU7&#xA;bVaZD1/2ObTsqP7wnydZ2p9A9737N86R2KuxV2KuxVKfMV7b29vHHO/COYmvXfhQ8ajxOabtrU4o&#xA;YxDKajP37102czR4pSkTEbhIZ5NIeETvJ9oLyYV67CvTrtTNNHNpfAEZS2HI7ufEZboBWsNb0y3n&#xA;Drc024NXkaqdxWo3IOS0va2lxzsT8uvL5dGGXS5ZCuH7k1/xRpP/AC1L/wAC39M2v8v6T/VB8j+p&#xA;xPyGX+ar2Wu2F3cLBDOskjVIUAjoK9xl+m7W0+aYhCYMj72vJpMkBZFBMs2jjOxV2KuxV2KuxV2K&#xA;pN5z1RNL8r6letIsXGIxpIxCgPMREm5/y3GY2skY4ZEc6+9zOz8By54xq9/u3LwvzPrmmw3sVp9c&#xA;t1FvEicWlQHx7t4Uzj9Vp58QABoB7bR6SZiZcMtz3JP+n9M/5bbX/kan/NWYv5WfcXL/ACc/5svk&#xA;XrH5J69a3ttqdhFcRzeg8c4WJ1enqAq1eJNPsDOl7CEoxlEjrby3tFpZQMJkEXY38v7Xpub55t2K&#xA;uxV2KuxV2KuxV41+eXl+2hubLzHCnG5SZLe6IFOcUwKqzHxR+nzzV63GOLidx2fkJBi8V8xyNHfq&#xA;wYgOgNPcEjNblju7XFySw3DNuxrlfDsyrd9W/lP5ZttC8rW6ItLm4RJbt6UZpXUMQfZa8R8s3uix&#xA;CMXnddlM5s1zNcJ2KuxV2KuxVj/na3EmjiSnxQyK1fY1Uj8c5n2rw8el4v5sgf0fpdl2VOstd4Yl&#xA;TlpfyH6mzjOel/HQu55ZEuUb5qQ5RX5JDIvI8PLVZJD0jiP3swH6q51PsnjvUyl/Nh95Dq+1ZVjA&#xA;7yznPRHn3Yq7FXYq7FXYq7FWL/mfo9zq/kLWbK1Qy3PoieCJd2eS2dZ1VR4sY6DKs8OKBDseydSM&#xA;GphM8rr5iv0vkjz5dWranBqCc2tr+BJInCimwoR9rqBTNTlx2bfR+z+0eGHAY7xPexn9IWn/ABZ/&#xA;wK/81ZV4bnfyl/R+19F/84raTIbHW9dKMtvcPFaWzuoHIxcnlpudvjQfOubHQ46svF+1naAymGMC&#xA;uGyfjy/S96zPeNdirsVdirsVdirsVebfnxGv+CLuckgwNauKdyLlF/43zB1g2dl2afXXv+584+an&#xA;pPA3ipFfkf7c12SLvcI2SYS9MqMWwDcvuDQYPQ06OKteFFr48VAr+Gb7AKi8jmNyTDLmp2KuxV2K&#xA;uxVBa3ZveaXcW0dC7qONdhVSGH6s1/aulOfTTxx5kbfA25GlyiGQSPRglsjG0lhI+NSyke+eeafH&#xA;LwZQI3Fh6HIfUClTDia5pOEguYFw3FRk+E9yGaeR7CWK3mu3A4z8RF40Uty/HO99k9HLHCWWXKdV&#xA;8Lt0PauYGQiOjJ8651LsVdirsVdirsVdirsVeM/mT+RFvqyXM2kyxW9rNIbg20lV+rzOau8BAIKO&#xA;TUxmlN6HoBi5cF8nfaHtcwoS58r7/f8ArebeWv8AnGLzFqGsPDqOqWlvptuy+vLAWlnZW3ARCqqC&#xA;QOrNt4HKIaUk7u11Hb2OMbiCZF9P+X9B0zQNGtNH0uIQ2NlGI4U6mg3LMe7Malj3OZ8YgCg8jmzS&#xA;yTM5cymGSanYq7FXYq7FXYq7FXnH5/KP+VbaoT2WI/8AA3MRGYmrGzsezP70fjoXzL5qlDLZyD9o&#xA;P8v2T/HMCYegwjmksLh5o0J2Zgpp7nKzFsHK33jpgpZp71P4nN1i+l47L9SKyxrdirsVdirsVdir&#xA;zYgw6pqMFBRJm4j2JNPwzhBhEc2SP9J6z6sUD/RSCR2qVFKg7fRmiyaePJ2kQ0sjAUoMIwxUxer+&#xA;W4jFoVkp2JiVyP8AW+L+Oekdl4+DTQH9H793itdK80vemWZ7iOxV2KuxV2KuxV2KuxVL9ZlgazeB&#xA;pAJHK0UEVHFg1T7bYCkGik3lp7K31C7ZpqPPThyIC/D179fDAGUpWGUggio6ZJg7FXYq7FXYq7FX&#xA;Yq7FWD/nNpd5qf5f6pZWUDXN1LGBDAgqzMHVhQf7HMfUiw53Z8xHKCeT5u1v8u/Ps+n2Pp6Jds6q&#xA;Oa8NwSo6/dmHKJp3+PU4wT6gl+nfll5+/SFsZ9BuxD6qeqSlAF5DlU18MgYFmdTiA2kH2lYilpEP&#xA;av375tMf0h5KfMq+TYOxV2KuxV2KuxV5v5jsdYt/NN5NFbySWV0qvFIgLAMAFZTQGhrvmh1Gj/fS&#xA;lX1PV6HNilpogyAnEm2F3i+Y1u5gun3LLzbiRHIQRXb9nNZPQbnY/J6DEdPwC5x5d4/W1a2vmm6u&#xA;I4ItPuA8hABdHVRXuzFaAYI9nWa4fsTky6aETIzjt5j9b3izhENpDCP91oq/cKZ1+OPDEAdA+bZJ&#xA;cUie8quTYOxV2KuxV2KuxV2KrJ4VmheJyQrgqxUlTQ+BG4xVKpvKWiTU9SJiFFAObAAfIHBSqX+C&#xA;fL3++G/5GP8A1xpbTHTdJs9NiaK0DLG55FWZmAPtUmmFUZirsVdirsVdirsVdiqnPbxTqFkFQDUd&#xA;t8jKIPNlGRHJSOnWhABU0HTc5Hwop8Qtfouz/kP3nHwop8WSJRFRAi7KooB8smBTAm28KHYq7FXY&#xA;q7FXYqtaJGNSN8iYhNtejH4Y8AW3ejH4Y8AW1+SQ7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqkXnDzjpflfT47m8WSe4uZBBY2NuvOeeZuiIv6&#xA;z/EgG/T6eWWVDbvPcGvJkEBZY/Y/mjdxXcEfmby5eeXbK5PCHUbhhJbq5+yszhU9In3/AK0yToOL&#xA;+7kJkdBz/a1jPX1CmW6f5i0HUpDFYajbXUo6xxSo7bb1oDWma0SB6ubPBOIuUSAmGSanYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYqk2s+YG0nUtOjuIANMvWaGS+5bRTmhiVx2Vt9/1d5RjYRac5&#xA;FLsVdiqU6p5q0HTJzb3d1/pIAZreGOS4lUHoWjhWRlB7VGVzyxj9RpgZgbK+la9pGqh/qFysrxU9&#xA;WIhklTl05xuFda+4wwnGW4NpjIHkj8mydirsVdiqX3etW1vIYyrOQaGlOo69cICCVD/Elr/vqT8P&#xA;64eFHE7/ABJa/wC+pPw/rjwrxMV/SUGrefV1OeMvYaDA0FlHQE/XLihlk8PhjATM4yENPwj6pmz7&#xA;hy+1o+rJfSP3q2pvZ+ctZh0q5U/oGzYvdxkkfWLmlFiJXoqA1O/XNcOITBia4fvdnCcYYzYuU9t+&#xA;79qTXf5cX+i6lbpokPrWDzctPvE4i706Y7/vWNPrFsehDVZR098/UeFqIGZqGYb30l+372jS6rJh&#xA;PCbnhO1Hp7meeWtfOq20kVzH9W1ayb0dRsz1STsy+KP1U+Ga7HO/e3anB4ZsbwlyP4696cZNxnYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqgdb0+61HSriztb2XTriVR6V7AAXjZWDA0PUGlGG21aEHfA&#xA;VSKxi1zUdKvNE84WcbAj0hqNs6+ncKKFZVQ/FE4ND02b5CsoWppHeWJtVt9O+pawRJcWrGKK6Q1E&#xA;0S7I5HVWp1B/HLJQ32QCnH1qHxP3ZDgK2h9QvZUsbh7NRJdrE5t422VpAp4AnsC2JgaQTtsw628v&#xA;X9tAEjPKWUO93cyFeUk0nxGQsN6luuc5qdBqZysdxvdMAIhLby5e3carEyLfaawkVkUjlECPVjdu&#xA;hEiinz37CmL2fqZDJVozRoX3PUM6tk7FXYq7FXkX5i/mBdeW9ZmtpNJ9dAwZJvX4BkkHJWA9Nu9V&#xA;PuMrln4dqdhpuzhmjfFXw/axH/leJ/6sn/T1/wBech+a8nK/kT+n9n7VK5/PcQwPKdF+wCR/pXft&#xA;/unJR1NmqQexP6f2ftSyz/OWaw0tbWPSK390zyPMbjcySGrOR6X7OS1Gv4pbDyDLD2CBzn9n7Wcf&#xA;lT55l1rX7XSLXSDFDCjzXV2Z+fEKPtsPSWpZyB175DHmvamjW6DwwZmV+Vfte15c6tLZtBtJNct9&#xA;ZRnhvIY2hl9MgLNGw2WUU34tuuQMBdt4zkYzDmDv7vcmWTaHYq7FXYq7FUr8z6rc6TolzqNvEszW&#xA;3FnRq0EfMB22/lUlvowSNBzOz9NHPmjjka4vvrb5nZGaddreWMFypBEqBjx6cv2gPkcQWjPiOOZj&#xA;3FEYWp2KuxV2KuxV2KuxV2KrJY+aEbV7V6Vwg0rz/wAyedZNAu+NwkEsNePpiQpKh7g15g/5/PKz&#xA;qeE7u3wdknNG4Wui/MXRpo0kS7tEDCpR5k5D2O4yJ1Y8m4dhT6ifybl/MbQV+D63bciOolDD/hf6&#xA;4nWBY9gZD0lXuX3eravPpxL2M0lncKGt7+wR7hXUnb4Iucm/ypTvmFr/ABcuIxj16h1Gqxxwz4d9&#xA;ubWmaJqGrXMSyWs1no0cwuZjcj05JWQhljSJgHVSw+Iuo2qBWtRj6Hs8wNnlduNImfuZ9m6ZuxV2&#xA;KuxVIPN3kvR/NFj9XvV4zKCIblQCy17H+Za9v1ZCUBJyNPqZYjYfLf5o+R/MPkvVWtori1urZkSa&#xA;KRkkRjG5K1KhmoQykUqfnmDmAgXqNBmOojY2YBPea9Mqq4teKsGoPU3p2PtlUc4DnnST8vx8GZfl&#xA;b5F8zeefMc1sLm0sra3iEt1dFJJWROQULHHySrMT3b+mWYQJnZw9fmOmgCaNl9X+S/Iuh+UdONrp&#xA;yFppaG6u5KGWVgO5HRR2UdMz4QEeTymp1U8xuTIcm47sVdirsVdirsVdiqEvBBc2s1rPHzhnRopV&#xA;r1VwVYfccrM23FIwkJRO8TY+CS+S1uLDS/0Zcy+vLZsY+fSoG3Q18K/TkYzp2Has45cniRFCW7IP&#xA;rA/lyXG6zhd9YH8uPGvCqI3JQelcmDbEt4VdirsVdirsVdirCvzH8mw6xp8l3ElbiNf3yqKllXo4&#xA;Hdk/FdvDMfPi4hbu+x+0ThmIk7fjb3H7/i+eb2znsrp4JBR1NPY13BHsc1hFPoWPIJxBDLvyy8kP&#xA;5n1f1LlSNKsirXhrTmTusQI/mpv4D3pl2DDxnydT2z2mNNjqP95Ll5eb6LjjjijWONQkaAKiKAFC&#xA;gUAAHQDNq+ckkmzzXYodirsVdirsVdirx3/nIjyxeX+mW2p26c44kNvcEfsksHiJ/wAktVSfGnjm&#xA;Hq4Ei3f9hagRkYn3/rfMzKysVYEMpoQeoIzVvYvo/wD5xk8rX1jpGpa/dRmOLUzHFZBhQtHCWLyf&#xA;6rM1B8s2WigQCe95L2h1MZTjjH8PP4vbMznnHYq7FXYq7FXYq7FXYqkEuo3C6hNbtx4oTx23pXbv&#xA;4ZgnIeMhyRAVaTfpe4hv5p1Ch3oHFNjx2/UMo8eVuUY3AR7lSTXr9iaMoHagp/HAc8moYgh/03qk&#xA;cnITkg/ssAR+rI+PIdWXhR7mbWTO9pC7/bdAxp7iubXH9IcGXNWybF2KuxV2KuxV2KuxV5b52/Jj&#xA;y7q14txFLdWZdqpHbTtGg5t8SKoBonI8gO1aCg2wxxwP1BzMXaGfGKjIge8s78q+VtI8r6JBo+lR&#xA;sttDVmkkPOWWRvtSSud2dvH6BsAMiABycfLllklxSNlN8LW7FXYq7FXYq7FXYqsnghuIZIJ41lhl&#xA;UpLG4DKysKEEHqCMUgkGw8IuPyr8l3Hnm30+WyZoGuXVo/XuKtHEeYVm57/CKH2yvwodwbxr8424&#xA;5V7y94iiihiSGFFjijUJHGgCqqqKBVA2AAyxoJJNldih2KuxV2KuxV2KuxV2KsW1ZWi17kdklAK9&#xA;q/DT9YzX5hWRy8Z9CS3gC3MniGJp7HfMaQ3ciBWLQL1GQpbckZllVF3JNABuT8hiIklBNPRY0CRq&#xA;g6KAB9GbsCg60t4VdirsVdirsVdirsVQV+Kz2v8Arj/iS5IKjcirsVdirsVdirsVdirsVdirBBa1&#xA;/NAP2j5SDf8AmtQD+LYGPVneFk7FXYq7FXYq7FXYq7FXYqx/zhLFBa2txI3FUnUVoT1B8PlmJqyA&#xA;AT3uRpxZIYtrN/Zw3lHkoWUN0Y+I7D2zBy5IguTCBIQP6W0//fv/AArf0yrxo97PwynPlG6tbrWo&#xA;1ifk0as9KMNqce4/ysydLMSns054kRZ9m1cF2KuxV2KuxV2KuxV2KoK/NJ7X/XH/ABJckFRuRV2K&#xA;uxV2KuxV2KuxV2KuxVhsY/5CVJ/xj/5kLgY9WZYWTsVdirsVdirsVdirsVdirF/zLd4vJt/dJE0z&#xA;WoSb0168Vccz9C1OYevH7o+Tk6T+8A73k/nTzhBb/o+5NszrdQllIYDpQ+H+Xmm1Mxse92mDETYY&#xA;1/ysC1/5Y3/4If0zF8UOR4B73pX5Kat+mL/UbpLZooraJI/VY1BaRq8Rt4Jvm07L3kS67tCPCAHr&#xA;ebt1bsVdirsVdirsVdirsVeefmD52utMuFj05VnK8Bspejhiz0INNgFHzy/FC+bGRZ3p+oWuoWUN&#xA;5auHgmUMpFKio6NTow6EdspIpkiMCuxV2KuxV2KuxV2KuxViP6Mp51XVzOvpFmDR8T0MPpL8VfbF&#xA;FbsuxS7FXYq7FXYq7FXYq7FXYqtkQOhU9D1wEWkFKbnyh5bu+AutLs7gR19MS28T8a0rx5KadMol&#xA;poHmB8m0Z5jkT81D/APkz/qxad/0hwf804PymP8Amj5BP5nJ/OPzTXT9MsdOgFvZQR21uv2YYUWN&#xA;BXwVQBlsMYjsGqUzLcorLGLsVdirsVdirsVdiqU3+j392zU1Fo42J/dhNqE1A+0BtkxIDoikqfyG&#xA;rtye95MepMVT/wATyfi+SKVbbydcWrcrbUnhJ68EK1+dHwHJfRNMhtIp4rdI55vrEq15SlQvLfbY&#xA;e2VlKrgV2KuxV2KuxV2KoaW0kkrWY8T+zTbJiQ7miWKR/iUf0Sn8/wDwuHjHcx8A/wA4q0VpJGRx&#xA;nbiP2abYDIdzKOGQ/iROQb3Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX//Z</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:OriginalDocumentID>uuid:65E6390686CF11DBA6E2D887CEACB407</xmpMM:OriginalDocumentID>
         <xmpMM:DocumentID>xmp.did:871594ac-ff28-b34e-9440-f6b5b207df34</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:871594ac-ff28-b34e-9440-f6b5b207df34</xmpMM:InstanceID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:a70e3e9d-a249-fa48-8639-a55f937b92d9</stRef:instanceID>
            <stRef:documentID>xmp.did:a70e3e9d-a249-fa48-8639-a55f937b92d9</stRef:documentID>
            <stRef:originalDocumentID>uuid:65E6390686CF11DBA6E2D887CEACB407</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:d2c70e2f-e729-7146-bbdf-a858860b27ec</stEvt:instanceID>
                  <stEvt:when>2015-02-14T01:49:28+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:a70e3e9d-a249-fa48-8639-a55f937b92d9</stEvt:instanceID>
                  <stEvt:when>2015-02-14T01:50:06+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:871594ac-ff28-b34e-9440-f6b5b207df34</stEvt:instanceID>
                  <stEvt:when>2015-02-15T00:36:03+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Web</illustrator:StartupProfile>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>500.000000</stDim:w>
            <stDim:h>500.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -500 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 500 li
500 500 li
500 0 li
cp
clp
500 500 mo
0 500 li
0 0 li
500 0 li
500 500 li
false sop
/0 
[/DeviceRGB] /CSA add_res
1 1 1 rgb
f
431.999 60.8766 mo
430.266 64.4535 li
358.452 28.3351 li
360.185 24.7581 li
431.999 60.8766 li
.498039 .164706 .203922 rgb
f
387.086 38.2948 mo
383.935 38.2948 li
359.565 26.0381 li
360.043 25.052 li
360.182 24.7635 li
387.086 38.2948 li
.807843 .682353 .698039 rgb
f
383.935 38.2948 mo
380.439 38.2948 li
358.88 27.4519 li
359.565 26.0381 li
383.935 38.2948 li
.603922 .341176 .372549 rgb
f
416.014 71.8338 mo
415.942 72.0789 415.854 72.3196 415.743 72.5478 cv
415.358 71.8459 414.721 71.2596 413.905 71.0178 cv
411.289 70.2419 410.722 71.5649 410.426 72.5655 cv
410.087 73.7061 410.279 74.8404 410.7 75.9341 cv
409.834 76.0093 408.928 75.9257 408.033 75.6601 cv
407.723 75.5681 407.419 75.4561 407.135 75.3285 cv
407.399 73.1372 405.879 70.8471 406.502 68.7461 cv
407.339 65.9247 411.934 65.7743 414.756 66.4262 cv
416.041 67.9285 416.58 69.9278 416.014 71.8338 cv
.729412 0 0 rgb
f
415.743 72.5478 mo
414.865 74.4806 412.921 75.7327 410.7 75.9341 cv
410.279 74.8404 410.087 73.7061 410.426 72.5655 cv
410.722 71.5649 411.289 70.2419 413.905 71.0178 cv
414.721 71.2596 415.358 71.8459 415.743 72.5478 cv
.647059 .00392157 .00784314 rgb
f
411.408 64.2797 mo
412.774 64.6847 413.924 65.4503 414.756 66.4262 cv
411.934 65.7743 407.339 65.9247 406.502 68.7461 cv
405.879 70.8471 407.399 73.1372 407.135 75.3285 cv
404.213 74.0263 402.583 70.9688 403.433 68.1025 cv
404.365 64.961 407.937 63.25 411.408 64.2797 cv
.47451 .0156863 .0235294 rgb
f
424.786 71.3279 mo
424.67 71.4628 424.544 71.5893 424.404 71.699 cv
424.303 71.094 423.988 70.4728 423.455 70.0131 cv
421.742 68.538 420.987 69.2025 420.513 69.7534 cv
419.972 70.3813 419.82 71.2003 419.846 72.0769 cv
419.194 71.8078 418.553 71.4192 417.967 70.9143 cv
417.764 70.7394 417.571 70.5536 417.396 70.3651 cv
418.153 69.0164 417.632 66.9459 418.629 65.7891 cv
419.967 64.2356 423.364 65.8277 425.258 67.2965 cv
425.811 68.7608 425.69 70.2784 424.786 71.3279 cv
.729412 0 0 rgb
f
424.404 71.699 mo
423.264 72.651 421.521 72.7614 419.846 72.0769 cv
419.82 71.2003 419.972 70.3813 420.513 69.7534 cv
420.987 69.2025 421.742 68.538 423.455 70.0131 cv
423.988 70.4728 424.303 71.094 424.404 71.699 cv
.647059 .00392157 .00784314 rgb
f
423.365 64.6481 mo
424.258 65.4181 424.902 66.3465 425.258 67.2965 cv
423.364 65.8277 419.967 64.2356 418.629 65.7891 cv
417.632 66.9459 418.153 69.0164 417.396 70.3651 cv
415.595 68.4299 415.192 65.8129 416.551 64.2346 cv
418.041 62.5049 421.092 62.6908 423.365 64.6481 cv
.47451 .0156863 .0235294 rgb
f
442.816 48.4349 mo
407.261 48.4349 li
393.057 41.2907 li
391.85 39.0506 li
391.684 38.7422 391.841 38.2948 392.114 38.2948 cv
388.271 38.2948 li
388.082 38.2948 387.946 38.4892 387.925 38.71 cv
387.1 38.2948 li
449.618 38.2948 li
450.005 38.2948 450.223 38.7423 449.987 39.0506 cv
442.816 48.4349 li
398.417 48.4349 mo
396.905 48.4349 li
396.343 47.3922 li
398.417 48.4349 li
393.289 48.4349 mo
384.678 48.4349 li
377.507 39.0506 li
377.271 38.7423 377.495 38.2948 377.882 38.2948 cv
378.255 38.2948 li
391.257 44.8343 li
393.289 48.4349 li
.968627 .964706 .976471 rgb
f
407.261 48.4349 mo
407.248 48.4349 li
393.061 41.2999 li
393.057 41.2907 li
407.261 48.4349 li
400.6 48.4349 mo
398.417 48.4349 li
396.343 47.3922 li
395.532 45.8856 li
400.6 48.4349 li
391.257 44.8343 mo
378.255 38.2948 li
380.439 38.2948 li
390.392 43.3006 li
391.257 44.8343 li
387.925 38.7164 mo
387.086 38.2948 li
387.1 38.2948 li
387.925 38.71 li
387.925 38.7121 387.925 38.7143 387.925 38.7164 cv
.741176 .588235 .615686 rgb
f
407.248 48.4349 mo
404.096 48.4349 li
394.233 43.474 li
393.061 41.2999 li
407.248 48.4349 li
389.007 40.8457 mo
383.935 38.2948 li
387.086 38.2948 li
387.925 38.7164 li
387.915 38.8287 387.935 38.9474 387.994 39.0506 cv
389.007 40.8457 li
.882353 .819608 .839216 rgb
f
404.096 48.4349 mo
400.6 48.4349 li
395.532 45.8856 li
394.233 43.474 li
404.096 48.4349 li
390.392 43.3006 mo
380.439 38.2948 li
383.935 38.2948 li
389.007 40.8457 li
390.392 43.3006 li
.788235 .666667 .694118 rgb
f
436.564 142.586 mo
390.936 142.586 li
390.936 141.715 391.287 140.936 391.855 140.367 cv
392.424 139.799 393.204 139.448 394.075 139.448 cv
399.934 139.448 li
401.282 139.448 402.576 138.91 403.531 137.954 cv
404.215 137.271 li
423.286 137.271 li
423.969 137.954 li
424.918 138.91 426.218 139.448 427.567 139.448 cv
433.426 139.448 li
435.155 139.448 436.564 140.851 436.564 142.586 cv
.866667 .894118 .905882 rgb
f
416.767 80.5422 mo
415.267 80.5422 li
415.165 79.2725 414.619 78.1477 413.805 77.5735 cv
413.103 77.0739 412.45 76.4535 411.859 75.7277 cv
413.093 75.3951 414.182 74.7215 414.966 73.7822 cv
423.437 73.7822 li
422.215 75.3785 420.643 76.6725 418.841 77.5735 cv
418.206 77.8878 417.686 78.3715 417.318 78.9581 cv
417.021 79.4297 416.834 79.9738 416.767 80.5422 cv
.443137 .619608 .635294 rgb
f
411.859 75.7277 mo
411.385 75.1445 410.951 74.4933 410.566 73.7822 cv
410.566 73.7822 li
414.966 73.7822 li
414.182 74.7215 413.093 75.3951 411.859 75.7277 cv
.396078 .490196 .505882 rgb
f
412.525 80.5422 mo
410.727 80.5422 li
410.582 79.2725 409.808 78.1477 408.653 77.5735 cv
406.857 76.6725 405.285 75.3785 404.058 73.7822 cv
404.931 73.7822 li
405.535 74.4156 406.28 74.9473 407.135 75.3285 cv
407.135 75.3285 li
407.419 75.4561 407.723 75.5681 408.033 75.6601 cv
408.387 75.7652 408.743 75.8417 409.097 75.8913 cv
409.678 76.5471 410.314 77.1118 410.993 77.5735 cv
411.846 78.1477 412.417 79.2725 412.525 80.5422 cv
.443137 .619608 .635294 rgb
f
409.097 75.8913 mo
408.743 75.8417 408.387 75.7652 408.033 75.6601 cv
407.723 75.5681 407.419 75.4561 407.135 75.3285 cv
407.157 75.1488 407.167 74.9684 407.166 74.7874 cv
407.166 74.4537 407.132 74.1184 407.078 73.7822 cv
407.6 73.7822 li
408.042 74.5606 408.544 75.2672 409.097 75.8913 cv
.407843 .490196 .505882 rgb
f
407.135 75.3285 mo
406.28 74.9473 405.535 74.4156 404.931 73.7822 cv
407.078 73.7822 li
407.132 74.1184 407.166 74.4537 407.166 74.7874 cv
407.167 74.9684 407.157 75.1488 407.135 75.3285 cv
407.135 75.3285 li
.376471 .494118 .509804 rgb
f
410.727 80.5422 mo
416.767 80.5422 li
416.755 80.6692 416.743 80.8023 416.743 80.9353 cv
416.32 125.202 li
411.18 125.202 li
410.751 80.9353 li
410.751 80.8023 410.739 80.6692 410.727 80.5422 cv
.819608 .823529 .827451 rgb
f
411.18 125.202 mo
416.32 125.202 li
416.314 125.747 li
416.296 127.748 416.798 129.725 417.777 131.479 cv
409.723 131.479 li
410.697 129.725 411.204 127.748 411.186 125.747 cv
411.18 125.202 li
.839216 .858824 .87451 rgb
f
420.631 136.552 mo
422.56 136.552 li
423.286 137.271 li
404.215 137.271 li
404.94 136.552 li
406.869 136.552 li
409.705 131.509 li
409.723 131.479 li
417.777 131.479 li
417.795 131.509 li
420.631 136.552 li
.792157 .811765 .823529 rgb
f
423.437 73.7822 mo
423.437 73.7822 li
423.437 73.7822 li
414.966 73.7822 li
415.276 73.4107 415.538 72.9977 415.743 72.5478 cv
415.358 71.8459 414.721 71.2596 413.905 71.0178 cv
413.899 71.0161 413.893 71.0143 413.888 71.0126 cv
413.893 71.0143 413.899 71.0161 413.905 71.0178 cv
414.721 71.2596 415.358 71.8459 415.743 72.5478 cv
415.854 72.3196 415.942 72.0789 416.014 71.8338 cv
416.58 69.9278 416.041 67.9285 414.756 66.4262 cv
414.756 66.4262 li
413.924 65.4503 412.774 64.6847 411.408 64.2797 cv
410.724 64.0767 410.036 63.9802 409.364 63.9802 cv
408.07 63.9802 406.84 64.3389 405.824 64.9841 cv
396.905 48.4349 li
398.417 48.4349 li
430.266 64.4535 li
430.694 63.5703 li
430.694 63.5703 li
431.379 62.1566 li
431.379 62.1565 li
431.379 62.1566 li
431.856 61.1705 li
431.999 60.8766 li
407.261 48.4349 li
442.816 48.4349 li
423.461 73.752 li
423.437 73.7822 li
419.846 72.0769 mo
419.846 72.0769 li
420.558 72.368 421.283 72.5153 421.968 72.5153 cv
422.894 72.5153 423.749 72.2461 424.404 71.699 cv
424.303 71.094 423.988 70.4728 423.455 70.0131 cv
423.455 70.0131 li
423.455 70.0131 li
423.988 70.4728 424.303 71.094 424.404 71.699 cv
424.544 71.5893 424.67 71.4628 424.786 71.3279 cv
425.69 70.2784 425.811 68.7608 425.258 67.2965 cv
425.258 67.2965 li
424.902 66.3465 424.258 65.4181 423.365 64.6481 cv
422.136 63.59 420.68 63.0496 419.366 63.0496 cv
418.25 63.0496 417.236 63.44 416.551 64.2346 cv
415.192 65.8129 415.595 68.4299 417.396 70.3651 cv
417.396 70.3651 li
417.571 70.5536 417.764 70.7394 417.967 70.9143 cv
418.553 71.4192 419.194 71.8078 419.846 72.0769 cv
410.434 72.5362 mo
410.67 71.7515 411.08 70.7854 412.507 70.7843 cv
411.08 70.7855 410.67 71.7516 410.434 72.5362 cv
413.872 71.008 mo
413.857 71.0037 413.842 70.9994 413.828 70.9952 cv
413.842 70.9994 413.857 71.0037 413.872 71.008 cv
412.513 70.7843 mo
412.512 70.7843 412.511 70.7843 412.51 70.7843 cv
412.51 70.7843 li
412.511 70.7843 412.512 70.7843 412.513 70.7843 cv
407.207 67.551 mo
407.207 67.5509 li
408.236 66.4946 410.07 66.1072 411.873 66.1066 cv
410.07 66.1073 408.236 66.4947 407.207 67.551 cv
414.756 66.4262 mo
414.733 66.4211 414.711 66.416 414.689 66.411 cv
414.711 66.416 414.733 66.4211 414.756 66.4262 cv
411.88 66.1066 mo
411.879 66.1066 411.879 66.1066 411.878 66.1066 cv
411.878 66.1066 li
411.879 66.1066 411.879 66.1066 411.88 66.1066 cv
.470588 .847059 .901961 rgb
f
430.266 64.4535 mo
398.417 48.4349 li
400.6 48.4349 li
430.694 63.5703 li
430.266 64.4535 li
431.856 61.1705 mo
431.996 60.882 li
407.248 48.4349 li
407.261 48.4349 li
431.999 60.8766 li
431.856 61.1705 li
.235294 .454902 .52549 rgb
f
431.379 62.1566 mo
404.096 48.4349 li
407.248 48.4349 li
431.996 60.882 li
431.856 61.1705 li
431.379 62.1565 li
.380392 .698039 .756863 rgb
f
430.694 63.5703 mo
430.694 63.5703 li
431.379 62.1565 li
431.379 62.1566 li
430.694 63.5703 li
.470588 .847059 .901961 rgb
f
430.694 63.5703 mo
400.6 48.4349 li
404.096 48.4349 li
431.379 62.1566 li
430.694 63.5703 li
.282353 .537255 .603922 rgb
f
410.283 73.2586 mo
407.207 67.551 li
408.236 66.4947 410.07 66.1073 411.873 66.1066 cv
411.875 66.1066 411.876 66.1066 411.878 66.1066 cv
411.879 66.1066 411.879 66.1066 411.88 66.1066 cv
412.872 66.1068 413.854 66.2239 414.689 66.411 cv
414.711 66.416 414.733 66.4211 414.756 66.4262 cv
414.756 66.4262 li
414.756 66.4262 li
414.756 66.4262 li
416.041 67.9285 416.58 69.9278 416.014 71.8338 cv
415.942 72.0789 415.854 72.3196 415.743 72.5478 cv
415.358 71.8459 414.721 71.2596 413.905 71.0178 cv
413.899 71.0161 413.893 71.0143 413.888 71.0126 cv
413.882 71.0111 413.877 71.0095 413.872 71.008 cv
413.857 71.0037 413.842 70.9994 413.828 70.9952 cv
413.313 70.8484 412.879 70.7846 412.513 70.7843 cv
412.512 70.7843 412.511 70.7843 412.51 70.7843 cv
412.51 70.7843 li
412.51 70.7843 li
412.509 70.7843 412.508 70.7843 412.507 70.7843 cv
411.08 70.7854 410.67 71.7515 410.434 72.5362 cv
410.431 72.546 410.429 72.5558 410.426 72.5655 cv
410.426 72.5655 li
410.357 72.7969 410.31 73.028 410.283 73.2586 cv
.345098 .376471 .431373 rgb
f
414.966 73.7822 mo
410.566 73.7822 li
410.549 73.7519 li
410.283 73.2586 li
410.31 73.028 410.357 72.7969 410.426 72.5655 cv
410.426 72.5655 li
410.429 72.5558 410.431 72.546 410.434 72.5362 cv
410.67 71.7516 411.08 70.7855 412.507 70.7843 cv
412.508 70.7843 412.509 70.7843 412.51 70.7843 cv
412.51 70.7843 li
412.511 70.7843 412.512 70.7843 412.513 70.7843 cv
412.879 70.7846 413.313 70.8484 413.828 70.9952 cv
413.842 70.9994 413.857 71.0037 413.872 71.008 cv
413.877 71.0095 413.882 71.0111 413.888 71.0126 cv
413.893 71.0143 413.899 71.0161 413.905 71.0178 cv
414.721 71.2596 415.358 71.8459 415.743 72.5478 cv
415.538 72.9977 415.276 73.4107 414.966 73.7822 cv
.305882 .376471 .435294 rgb
f
407.207 67.5509 mo
405.824 64.9841 li
406.84 64.3389 408.07 63.9802 409.364 63.9802 cv
410.036 63.9802 410.724 64.0767 411.408 64.2797 cv
412.774 64.6847 413.924 65.4503 414.756 66.4262 cv
414.756 66.4262 li
414.756 66.4262 li
414.733 66.4211 414.711 66.416 414.689 66.411 cv
413.854 66.2239 412.872 66.1068 411.88 66.1066 cv
411.879 66.1066 411.879 66.1066 411.878 66.1066 cv
411.878 66.1066 li
411.876 66.1066 411.875 66.1066 411.873 66.1066 cv
410.07 66.1072 408.236 66.4946 407.207 67.5509 cv
.223529 .384314 .439216 rgb
f
423.44 70.0006 mo
423.438 69.9992 423.437 69.998 423.435 69.9965 cv
423.437 69.998 423.438 69.9992 423.44 70.0006 cv
420.52 69.745 mo
420.523 69.7418 420.525 69.7386 420.528 69.7354 cv
420.525 69.7386 420.523 69.7418 420.52 69.745 cv
420.535 69.7272 mo
420.792 69.4332 421.131 69.1171 421.653 69.1162 cv
421.131 69.1172 420.792 69.4332 420.535 69.7272 cv
421.671 69.1162 mo
421.666 69.1162 421.66 69.1161 421.655 69.1161 cv
421.655 69.1161 li
421.66 69.1161 421.666 69.1162 421.671 69.1162 cv
425.258 67.2965 mo
425.251 67.2906 425.243 67.2847 425.235 67.2788 cv
425.243 67.2847 425.251 67.2906 425.258 67.2965 cv
425.2 67.2516 mo
425.194 67.247 425.188 67.2425 425.182 67.2379 cv
425.188 67.2425 425.194 67.247 425.2 67.2516 cv
425.177 67.2341 mo
425.147 67.2114 425.117 67.1885 425.086 67.1657 cv
425.117 67.1885 425.147 67.2114 425.177 67.2341 cv
418.641 65.7751 mo
419.029 65.3338 419.587 65.1518 420.23 65.1515 cv
419.587 65.1519 419.029 65.3339 418.641 65.7751 cv
420.241 65.1515 mo
420.238 65.1515 420.235 65.1515 420.232 65.1515 cv
420.232 65.1515 li
420.235 65.1515 420.238 65.1515 420.241 65.1515 cv
.470588 .847059 .901961 rgb
f
419.846 72.0769 mo
419.194 71.8078 418.553 71.4192 417.967 70.9143 cv
417.764 70.7394 417.571 70.5536 417.396 70.3651 cv
418.153 69.0164 417.632 66.9459 418.629 65.7891 cv
418.633 65.7844 418.637 65.7798 418.641 65.7751 cv
419.029 65.3339 419.587 65.1519 420.23 65.1515 cv
420.23 65.1515 420.231 65.1515 420.232 65.1515 cv
420.235 65.1515 420.238 65.1515 420.241 65.1515 cv
421.758 65.1558 423.743 66.1668 425.086 67.1657 cv
425.117 67.1885 425.147 67.2114 425.177 67.2341 cv
425.179 67.2354 425.18 67.2366 425.182 67.2379 cv
425.188 67.2425 425.194 67.247 425.2 67.2516 cv
425.212 67.2606 425.224 67.2697 425.235 67.2788 cv
425.243 67.2847 425.251 67.2906 425.258 67.2965 cv
425.258 67.2965 li
425.258 67.2965 li
425.258 67.2965 li
425.811 68.7608 425.69 70.2784 424.786 71.3279 cv
424.67 71.4628 424.544 71.5893 424.404 71.699 cv
424.303 71.094 423.988 70.4728 423.455 70.0131 cv
423.455 70.0131 li
423.45 70.0089 423.445 70.0047 423.44 70.0006 cv
423.438 69.9992 423.437 69.998 423.435 69.9965 cv
422.679 69.3495 422.111 69.1215 421.671 69.1162 cv
421.666 69.1162 421.66 69.1161 421.655 69.1161 cv
421.655 69.1161 li
421.655 69.1161 li
421.654 69.1161 421.654 69.1162 421.653 69.1162 cv
421.131 69.1171 420.792 69.4332 420.535 69.7272 cv
420.533 69.7299 420.531 69.7327 420.528 69.7354 cv
420.525 69.7386 420.523 69.7418 420.52 69.745 cv
420.518 69.7478 420.515 69.7506 420.513 69.7534 cv
420.513 69.7534 li
420.01 70.3372 419.843 71.0861 419.843 71.8929 cv
419.843 71.9539 419.844 72.0152 419.846 72.0769 cv
.345098 .376471 .431373 rgb
f
421.968 72.5153 mo
421.283 72.5153 420.558 72.368 419.846 72.0769 cv
419.846 72.0769 li
419.844 72.0152 419.843 71.9539 419.843 71.8929 cv
419.843 71.0861 420.01 70.3372 420.513 69.7534 cv
420.513 69.7534 li
420.515 69.7506 420.518 69.7478 420.52 69.745 cv
420.523 69.7418 420.525 69.7386 420.528 69.7354 cv
420.531 69.7327 420.533 69.7299 420.535 69.7272 cv
420.792 69.4332 421.131 69.1172 421.653 69.1162 cv
421.654 69.1162 421.654 69.1161 421.655 69.1161 cv
421.655 69.1161 li
421.66 69.1161 421.666 69.1162 421.671 69.1162 cv
422.111 69.1215 422.679 69.3495 423.435 69.9965 cv
423.437 69.998 423.438 69.9992 423.44 70.0006 cv
423.445 70.0047 423.45 70.0089 423.455 70.0131 cv
423.455 70.0131 li
423.988 70.4728 424.303 71.094 424.404 71.699 cv
423.749 72.2461 422.894 72.5153 421.968 72.5153 cv
.305882 .376471 .435294 rgb
f
417.396 70.3651 mo
415.595 68.4299 415.192 65.8129 416.551 64.2346 cv
417.236 63.44 418.25 63.0496 419.366 63.0496 cv
420.68 63.0496 422.136 63.59 423.365 64.6481 cv
424.258 65.4181 424.902 66.3465 425.258 67.2965 cv
425.258 67.2965 li
425.258 67.2965 li
425.251 67.2906 425.243 67.2847 425.235 67.2788 cv
425.224 67.2697 425.212 67.2606 425.2 67.2516 cv
425.194 67.247 425.188 67.2425 425.182 67.2379 cv
425.18 67.2366 425.179 67.2354 425.177 67.2341 cv
425.147 67.2114 425.117 67.1885 425.086 67.1657 cv
423.743 66.1668 421.758 65.1558 420.241 65.1515 cv
420.238 65.1515 420.235 65.1515 420.232 65.1515 cv
420.232 65.1515 li
420.231 65.1515 420.23 65.1515 420.23 65.1515 cv
419.587 65.1518 419.029 65.3338 418.641 65.7751 cv
418.637 65.7798 418.633 65.7844 418.629 65.7891 cv
417.632 66.9459 418.153 69.0164 417.396 70.3651 cv
417.396 70.3651 li
.223529 .384314 .439216 rgb
f
404.931 73.7822 mo
404.058 73.7822 li
404.058 73.7822 li
404.033 73.752 li
384.678 48.4349 li
393.289 48.4349 li
403.835 67.1152 li
403.672 67.4257 403.536 67.7552 403.433 68.1025 cv
402.832 70.1296 403.471 72.2523 404.931 73.7822 cv
.470588 .847059 .901961 rgb
f
407.6 73.7822 mo
407.078 73.7822 li
406.999 73.2828 406.875 72.7815 406.752 72.2822 cv
407.582 73.7519 li
407.6 73.7822 li
.345098 .376471 .431373 rgb
f
407.078 73.7822 mo
404.931 73.7822 li
403.471 72.2523 402.832 70.1296 403.433 68.1025 cv
403.536 67.7552 403.672 67.4257 403.835 67.1152 cv
406.752 72.2822 li
406.875 72.7815 406.999 73.2828 407.078 73.7822 cv
.223529 .384314 .439216 rgb
f
401.316 142.586 mo
397.911 142.586 li
397.911 141.715 398.17 140.936 398.589 140.367 cv
399.009 139.799 399.585 139.448 400.228 139.448 cv
403.529 139.448 li
402.915 139.448 402.365 139.799 401.964 140.367 cv
401.564 140.936 401.316 141.715 401.316 142.586 cv
.890196 .901961 .905882 rgb
f
407.659 139.448 mo
404.555 139.448 li
405.55 139.448 406.506 138.91 407.211 137.954 cv
407.716 137.271 li
410.676 137.271 li
410.195 137.954 li
409.521 138.91 408.609 139.448 407.659 139.448 cv
f
415.267 80.5422 mo
412.525 80.5422 li
412.417 79.2725 411.846 78.1477 410.993 77.5735 cv
410.314 77.1118 409.678 76.5471 409.097 75.8913 cv
409.43 75.9378 409.762 75.9605 410.089 75.9605 cv
410.295 75.9605 410.498 75.9516 410.7 75.9341 cv
410.7 75.9341 li
411.097 75.8981 411.485 75.8286 411.859 75.7277 cv
412.45 76.4535 413.103 77.0739 413.805 77.5735 cv
414.619 78.1477 415.165 79.2725 415.267 80.5422 cv
.560784 .690196 .694118 rgb
f
410.089 75.9605 mo
409.762 75.9605 409.43 75.9378 409.097 75.8913 cv
408.544 75.2672 408.042 74.5606 407.6 73.7822 cv
407.6 73.7822 li
410.252 73.7822 li
410.253 74.5102 410.429 75.2306 410.7 75.9341 cv
410.498 75.9516 410.295 75.9605 410.089 75.9605 cv
.533333 .588235 .592157 rgb
f
410.7 75.9341 mo
410.7 75.9341 li
410.429 75.2306 410.253 74.5102 410.252 73.7822 cv
410.566 73.7822 li
410.951 74.4933 411.385 75.1445 411.859 75.7277 cv
411.485 75.8286 411.097 75.8981 410.7 75.9341 cv
.52549 .588235 .592157 rgb
f
415.587 125.202 mo
412.86 125.202 li
412.543 80.9353 li
412.543 80.8022 412.534 80.6692 412.525 80.5422 cv
412.525 80.5422 li
415.267 80.5422 li
415.267 80.5422 li
415.275 80.6692 415.284 80.8022 415.284 80.9353 cv
415.587 125.202 li
.854902 .85098 .843137 rgb
f
414.559 131.479 mo
411.784 131.479 li
412.502 129.725 412.877 127.748 412.864 125.747 cv
412.86 125.202 li
415.587 125.202 li
415.591 125.747 li
415.604 127.748 415.246 129.725 414.559 131.479 cv
.870588 .87451 .882353 rgb
f
410.676 137.271 mo
407.716 137.271 li
407.716 137.271 li
408.252 136.552 li
409.676 136.552 li
411.77 131.509 li
411.784 131.479 li
411.784 131.479 li
414.559 131.479 li
414.559 131.479 li
414.547 131.509 li
412.548 136.552 li
411.188 136.552 li
410.676 137.271 li
410.676 137.271 li
.831372 .839216 .839216 rgb
f
396.905 48.4349 mo
393.289 48.4349 li
391.257 44.8343 li
396.343 47.3922 li
396.905 48.4349 li
393.057 41.2907 mo
387.925 38.71 li
387.946 38.4892 388.082 38.2948 388.271 38.2948 cv
392.114 38.2948 li
391.841 38.2948 391.684 38.7422 391.85 39.0506 cv
393.057 41.2907 li
.972549 .960784 .960784 rgb
f
396.343 47.3922 mo
391.257 44.8343 li
390.392 43.3006 li
395.532 45.8856 li
396.343 47.3922 li
393.061 41.2999 mo
387.925 38.7164 li
387.925 38.7143 387.925 38.7121 387.925 38.71 cv
393.057 41.2907 li
393.061 41.2999 li
.792157 .666667 .678431 rgb
f
394.233 43.474 mo
389.007 40.8457 li
387.994 39.0506 li
387.935 38.9474 387.915 38.8287 387.925 38.7164 cv
393.061 41.2999 li
394.233 43.474 li
.901961 .847059 .854902 rgb
f
395.532 45.8856 mo
390.392 43.3006 li
389.007 40.8457 li
394.233 43.474 li
395.532 45.8856 li
.831372 .72549 .741176 rgb
f
406.502 68.7461 mo
406.504 68.7401 406.506 68.7342 406.508 68.7282 cv
406.506 68.7342 406.504 68.7401 406.502 68.7461 cv
406.519 68.6917 mo
406.52 68.6895 406.521 68.6874 406.521 68.6852 cv
406.521 68.6874 406.52 68.6895 406.519 68.6917 cv
406.525 68.6724 mo
406.668 68.2352 406.902 67.8636 407.207 67.5509 cv
407.207 67.551 li
406.902 67.8637 406.668 68.2352 406.525 68.6724 cv
403.835 67.1152 mo
393.289 48.4349 li
396.905 48.4349 li
405.824 64.9841 li
404.988 65.5143 404.298 66.238 403.835 67.1152 cv
.584314 .866667 .901961 rgb
f
410.252 73.7822 mo
407.6 73.7822 li
407.582 73.7519 li
406.752 72.2822 li
406.55 71.4602 406.35 70.643 406.351 69.8447 cv
406.352 69.4739 406.395 69.1072 406.502 68.7461 cv
406.502 68.7461 li
406.504 68.7401 406.506 68.7342 406.508 68.7282 cv
406.512 68.716 406.515 68.7038 406.519 68.6917 cv
406.52 68.6895 406.521 68.6874 406.521 68.6852 cv
406.523 68.6809 406.524 68.6767 406.525 68.6724 cv
406.668 68.2352 406.902 67.8637 407.207 67.551 cv
410.283 73.2586 li
410.262 73.432 410.252 73.6052 410.252 73.7779 cv
410.252 73.7794 410.252 73.7807 410.252 73.7822 cv
.486274 .498039 .533333 rgb
f
410.566 73.7822 mo
410.252 73.7822 li
410.252 73.7807 410.252 73.7794 410.252 73.7779 cv
410.252 73.6052 410.262 73.432 410.283 73.2586 cv
410.549 73.7519 li
410.566 73.7822 li
.454902 .498039 .537255 rgb
f
406.752 72.2822 mo
403.835 67.1152 li
404.298 66.238 404.988 65.5143 405.824 64.9841 cv
407.207 67.5509 li
406.902 67.8636 406.668 68.2352 406.525 68.6724 cv
406.524 68.6767 406.523 68.6809 406.521 68.6852 cv
406.521 68.6874 406.52 68.6895 406.519 68.6917 cv
406.515 68.7038 406.512 68.716 406.508 68.7282 cv
406.506 68.7342 406.504 68.7401 406.502 68.7461 cv
406.502 68.7461 li
406.395 69.1072 406.352 69.4739 406.351 69.8447 cv
406.35 70.643 406.55 71.4602 406.752 72.2822 cv
.388235 .505882 .541176 rgb
f
72.1889 65.2737 mo
68.1986 66.3184 li
56.8486 22.9732 li
60.8389 21.9282 li
72.1889 65.2737 li
.854902 .886275 .909804 rgb
f
59.411 22.3021 mo
59.411 22.3021 li
60.8329 21.9297 li
59.411 22.3022 li
1 1 1 rgb
f
67.7025 48.1646 mo
66.183 48.1646 li
59.411 22.3021 li
60.8329 21.9298 li
67.7025 48.1646 li
.945098 .956863 .964706 rgb
f
57.8339 22.7151 mo
57.8339 22.7151 li
59.411 22.3021 li
57.834 22.7151 li
1 1 1 rgb
f
66.183 48.1646 mo
64.4979 48.1646 li
57.8339 22.7151 li
59.411 22.3022 li
66.183 48.1646 li
.886274 .909804 .929412 rgb
f
106.929 30.7608 mo
109.23 40.6429 107.399 58.2185 106.789 63.3352 cv
106.7 64.0771 105.951 64.5469 105.243 64.3073 cv
104.23 63.9641 li
104.287 57.8944 104.442 36.507 103.896 33.6356 cv
103.461 31.3573 101.187 25.7628 99.771 22.4094 cv
101.53 17.1053 li
101.639 16.7768 102.091 16.7452 102.243 17.0559 cv
103.139 18.8796 105.278 23.6652 106.929 30.7608 cv
cp
.580392 .447059 .0235294 rgb
f
103.896 33.6356 mo
104.442 36.507 104.287 57.8944 104.23 63.9641 cv
100.89 62.8351 li
100.927 59.7581 100.978 54.0355 100.964 48.9128 cv
100.951 44.3057 100.883 40.1839 100.701 38.9032 cv
100.395 36.7497 98.77 31.964 97.6477 28.8128 cv
99.771 22.4094 li
101.187 25.7628 103.461 31.3573 103.896 33.6356 cv
cp
.980392 .513726 .282353 rgb
f
101.318 77.8595 mo
105.696 89.7867 101.692 103.281 91.3353 110.867 cv
82.3436 117.456 li
82.2054 118.093 li
73.8574 118.093 li
73.7192 117.456 li
64.7275 110.867 li
54.3709 103.281 50.3669 89.7867 54.7416 77.8595 cv
101.318 77.8595 li
1 .0588235 .0980392 rgb
f
100.964 48.9128 mo
100.978 54.0355 100.927 59.7581 100.89 62.8351 cv
97.7994 61.7904 li
97.8533 59.1077 98.2207 56.4216 98.9116 53.7928 cv
99.5081 51.5179 li
100.138 49.1049 li
100.162 48.9128 li
100.964 48.9128 li
cp
1 .337255 .262745 rgb
f
100.964 48.9128 mo
100.162 48.9128 li
100.162 48.5117 99.835 48.1646 99.4104 48.1646 cv
91.2275 48.1646 li
97.6477 28.8128 li
98.77 31.964 100.395 36.7497 100.701 38.9032 cv
100.883 40.1839 100.951 44.3057 100.964 48.9128 cv
cp
1 .294118 .223529 rgb
f
91.2275 48.1646 mo
99.4105 48.1646 li
99.835 48.1646 100.162 48.5117 100.162 48.9128 cv
100.138 49.1049 li
99.5081 51.5179 li
56.5548 51.5179 li
55.9245 49.1049 li
55.7998 48.6297 56.1604 48.1646 56.6525 48.1646 cv
91.2275 48.1646 li
.984314 .827451 .854902 rgb
f
82.2054 118.093 mo
80.8102 124.534 li
80.4496 126.209 80.2742 127.91 80.2911 129.616 cv
78.0297 127.354 li
75.7716 129.613 li
75.7751 129.451 li
75.7751 127.803 75.5998 126.155 75.2493 124.534 cv
73.8574 118.093 li
82.2054 118.093 li
.745098 .815686 .784314 rgb
f
78.0297 146.905 mo
74.7269 146.929 71.4376 146.443 68.2865 145.469 cv
69.9581 144.556 71.3769 143.215 72.3813 141.563 cv
73.089 140.401 73.6923 139.181 74.1842 137.92 cv
74.3933 137.388 74.582 136.845 74.7473 136.296 cv
81.3157 136.296 li
81.4808 136.845 81.6696 137.388 81.8785 137.92 cv
82.3706 139.181 82.9738 140.401 83.6816 141.563 cv
84.4298 142.79 85.4005 143.845 86.5395 144.681 cv
86.9338 144.97 87.345 145.233 87.7764 145.469 cv
84.6219 146.443 81.3359 146.929 78.0297 146.905 cv
.560784 .611765 .635294 rgb
f
81.3157 136.296 mo
74.7473 136.296 li
74.9797 135.547 75.1684 134.789 75.3235 134.021 cv
75.6167 132.565 75.765 131.089 75.7716 129.613 cv
78.0297 127.354 li
80.2911 129.616 li
80.2979 131.089 80.4462 132.565 80.7394 134.021 cv
80.8943 134.789 81.0832 135.547 81.3157 136.296 cv
.94902 .847059 .752941 rgb
f
78.0297 146.905 mo
81.3359 146.929 84.6219 146.443 87.7764 145.469 cv
88.5851 145.914 89.4581 146.258 90.3681 146.484 cv
94.4191 147.498 li
95.4841 147.764 96.2321 148.722 96.2321 149.82 cv
96.2321 150.504 li
59.8306 150.504 li
59.8306 149.82 li
59.8306 148.722 60.5788 147.764 61.6439 147.498 cv
65.6948 146.484 li
66.6047 146.258 67.4776 145.914 68.2865 145.469 cv
71.4376 146.443 74.7269 146.929 78.0297 146.905 cv
.458824 .509804 .592157 rgb
f
101.318 77.8595 mo
54.7416 77.8595 li
54.9303 77.3439 55.1325 76.835 55.3516 76.3294 cv
55.4459 76.1137 li
58.4926 69.0734 59.0959 61.214 57.1513 53.7928 cv
56.5548 51.5179 li
99.5081 51.5179 li
98.9117 53.7928 li
98.2207 56.4216 97.8533 59.1077 97.7994 61.7904 cv
97.7016 66.6804 98.6487 71.5673 100.617 76.1137 cv
100.708 76.3294 li
100.927 76.835 101.133 77.3439 101.318 77.8595 cv
1 .396078 .333333 rgb
f
77.3656 118.093 mo
75.1695 118.093 li
75.125 117.882 75.0804 117.67 75.0361 117.456 cv
66.4477 110.867 li
56.5557 103.281 52.7316 89.7867 56.9098 77.8595 cv
56.9098 77.8595 li
63.4534 77.8595 li
63.4534 77.8595 li
59.2751 89.7867 62.2337 104.501 71.5868 111.299 cv
76.7781 115.072 77.231 117.456 77.231 117.456 cv
77.2748 117.668 77.3197 117.88 77.3656 118.093 cv
1 .466667 .486274 rgb
f
65.1853 51.5179 mo
58.6417 51.5179 li
58.0397 49.1049 li
57.9206 48.6297 58.265 48.1646 58.735 48.1646 cv
65.2787 48.1646 li
64.8086 48.1646 64.4642 48.6297 64.5833 49.1049 cv
65.1853 51.5179 li
.992157 .901961 .917647 rgb
f
79.1526 128.477 mo
78.0297 127.354 li
76.9591 128.425 li
76.7745 125.098 75.9619 121.84 75.1695 118.093 cv
77.3656 118.093 li
78.0645 121.342 78.9691 124.785 79.1526 128.477 cv
.854902 .894118 .878431 rgb
f
71.2131 146.225 mo
70.5632 146.09 69.9173 145.934 69.2765 145.758 cv
71.6733 144.616 73.7435 142.578 75.4802 137.92 cv
75.6872 137.368 75.87 136.827 76.0302 136.296 cv
78.2584 136.296 li
77.7505 137.999 77.0048 139.754 75.953 141.563 cv
74.9938 143.215 74.136 144.248 72.6241 145.296 cv
72.0736 145.677 71.6805 145.965 71.2131 146.225 cv
.74902 .780392 .792157 rgb
f
78.2584 136.296 mo
76.0302 136.296 li
76.8811 133.476 77.0982 130.931 76.9591 128.425 cv
78.0297 127.354 li
79.1526 128.477 li
79.2762 130.964 79.0727 133.565 78.2584 136.296 cv
.972549 .913725 .858823 rgb
f
65.8497 150.504 mo
61.7707 150.504 li
61.7707 149.82 li
61.7707 148.722 62.4852 147.764 63.5024 147.498 cv
65.5999 146.948 67.5253 146.592 69.2765 145.758 cv
69.9173 145.934 70.5632 146.09 71.2131 146.225 cv
70.4814 146.633 69.5675 146.973 67.5815 147.498 cv
66.5644 147.764 65.8497 148.722 65.8497 149.82 cv
65.8497 150.504 li
.694118 .721569 .768627 rgb
f
63.4534 77.8595 mo
56.9098 77.8595 li
57.0901 77.3439 57.2832 76.835 57.4925 76.3294 cv
57.5826 76.1137 li
60.4925 69.0734 61.0688 61.214 59.2114 53.7928 cv
58.6417 51.5179 li
65.1853 51.5179 li
65.7549 53.7928 li
67.6124 61.214 67.0362 69.0734 64.1262 76.1137 cv
64.0361 76.3294 li
63.8268 76.835 63.6337 77.3439 63.4534 77.8595 cv
1 .654902 .619608 rgb
f
386.387 247.123 mo
386.388 246.751 li
386.128 246.1 li
385.314 245.807 li
384.457 246.284 li
384.533 247.445 li
384.989 248.14 li
386.301 247.793 li
386.387 247.123 li
401.266 239.695 mo
402.351 241.938 402.957 244.455 402.951 247.114 cv
402.947 249.177 402.574 251.154 401.896 252.981 cv
401.25 254.821 400.274 256.579 398.959 258.169 cv
397.265 260.219 395.19 261.768 392.923 262.8 cv
390.681 263.885 388.163 264.491 385.504 264.485 cv
383.441 264.48 381.465 264.108 379.637 263.429 cv
377.798 262.784 376.039 261.807 374.449 260.493 cv
372.4 258.798 370.85 256.724 369.818 254.457 cv
368.733 252.214 368.128 249.697 368.133 247.038 cv
368.138 244.975 368.511 242.998 369.189 241.171 cv
369.835 239.331 370.811 237.573 372.126 235.982 cv
373.82 233.933 375.894 232.384 378.162 231.352 cv
380.404 230.267 382.921 229.661 385.58 229.667 cv
387.644 229.672 389.62 230.044 391.448 230.723 cv
393.287 231.369 395.046 232.345 396.636 233.659 cv
398.685 235.353 400.234 237.428 401.266 239.695 cv
.972549 .741176 .239216 rgb
f
397.861 251.524 mo
398.398 250.135 398.691 248.646 398.694 247.105 cv
398.698 245.127 398.226 243.233 397.371 241.524 cv
396.602 239.774 395.447 238.2 393.923 236.94 cv
392.735 235.958 391.403 235.232 389.991 234.758 cv
388.601 234.221 387.113 233.928 385.571 233.924 cv
383.593 233.92 381.7 234.392 379.99 235.247 cv
378.24 236.016 376.667 237.171 375.407 238.696 cv
374.424 239.883 373.698 241.216 373.224 242.628 cv
372.687 244.017 372.394 245.506 372.391 247.047 cv
372.386 249.025 372.859 250.919 373.714 252.628 cv
374.483 254.378 375.638 255.952 377.162 257.212 cv
378.35 258.194 379.682 258.92 381.094 259.394 cv
382.484 259.931 383.972 260.224 385.513 260.228 cv
387.491 260.232 389.385 259.76 391.095 258.905 cv
392.845 258.136 394.418 256.981 395.678 255.456 cv
396.66 254.268 397.386 252.936 397.861 251.524 cv
399.342 240.599 mo
400.378 242.583 400.96 244.791 400.955 247.11 cv
400.951 248.92 400.59 250.658 399.935 252.273 cv
399.406 253.934 398.574 255.502 397.421 256.897 cv
395.943 258.684 394.085 260.011 392.02 260.875 cv
390.035 261.912 387.828 262.493 385.508 262.488 cv
383.699 262.484 381.961 262.123 380.345 261.468 cv
378.684 260.94 377.116 260.107 375.722 258.954 cv
373.934 257.476 372.608 255.619 371.743 253.553 cv
370.706 251.568 370.125 249.361 370.13 247.042 cv
370.134 245.232 370.495 243.494 371.15 241.879 cv
371.678 240.218 372.511 238.65 373.664 237.255 cv
375.142 235.468 377 234.141 379.065 233.276 cv
381.05 232.24 383.257 231.658 385.576 231.664 cv
387.386 231.668 389.124 232.029 390.74 232.684 cv
392.401 233.212 393.968 234.045 395.363 235.198 cv
397.151 236.676 398.477 238.533 399.342 240.599 cv
.988235 .898039 .694118 rgb
f
387.938 246.99 mo
389.84 249.024 393.369 249.37 395.874 248.445 cv
397.164 247.969 397.62 246.36 397.236 245.344 cv
396.857 244.339 395.323 243.754 392.367 244.87 cv
390.833 245.449 387.924 246.974 387.938 246.99 cv
.984314 .843137 .545098 rgb
f
385.456 244.68 mo
387.49 242.778 387.837 239.249 386.912 236.744 cv
386.436 235.454 384.826 234.999 383.81 235.382 cv
382.806 235.761 382.22 237.295 383.336 240.251 cv
383.915 241.786 385.441 244.694 385.456 244.68 cv
f
383.146 247.162 mo
381.245 245.128 377.715 244.782 375.21 245.706 cv
373.921 246.183 373.465 247.792 373.849 248.808 cv
374.228 249.813 375.761 250.398 378.718 249.282 cv
380.252 248.703 383.161 247.177 383.146 247.162 cv
f
385.629 249.472 mo
383.595 251.374 383.248 254.903 384.173 257.408 cv
384.649 258.698 386.259 259.153 387.275 258.77 cv
388.279 258.39 388.865 256.857 387.749 253.901 cv
387.169 252.366 385.644 249.458 385.629 249.472 cv
f
387.33 248.673 mo
390.093 248.323 393.029 250.312 394.366 252.624 cv
395.054 253.814 394.376 255.343 393.431 255.88 cv
392.498 256.41 390.944 255.881 389.383 253.134 cv
388.573 251.707 387.31 248.676 387.33 248.673 cv
f
387.14 245.288 mo
386.79 242.525 388.778 239.589 391.09 238.253 cv
392.28 237.565 393.81 238.243 394.346 239.187 cv
394.876 240.12 394.347 241.674 391.6 243.235 cv
390.174 244.046 387.142 245.309 387.14 245.288 cv
f
383.754 245.479 mo
380.992 245.829 378.055 243.84 376.719 241.528 cv
376.031 240.338 376.709 238.809 377.653 238.272 cv
378.587 237.742 380.14 238.271 381.702 241.018 cv
382.512 242.444 383.775 245.476 383.754 245.479 cv
f
383.945 248.864 mo
384.295 251.627 382.307 254.563 379.995 255.899 cv
378.804 256.587 377.275 255.909 376.739 254.965 cv
376.208 254.032 376.737 252.478 379.485 250.917 cv
380.911 250.106 383.943 248.843 383.945 248.864 cv
f
411.236 284.451 mo
407.22 286.787 li
372.24 226.508 li
376.256 224.173 li
411.236 284.451 li
.941176 .439216 .34902 rgb
f
374.818 225.008 mo
374.818 225.008 li
376.098 224.264 li
374.819 225.008 li
1 1 1 rgb
f
385.192 239.585 mo
383.277 239.585 li
374.818 225.008 li
376.098 224.264 li
376.25 224.176 li
385.192 239.585 li
.976471 .788235 .752941 rgb
f
383.277 239.585 mo
381.155 239.585 li
373.231 225.932 li
373.655 225.685 li
374.819 225.008 li
383.277 239.585 li
.952941 .556863 .486274 rgb
f
409.052 288.177 mo
405.036 290.513 li
370.056 230.234 li
374.072 227.898 li
409.052 288.177 li
1 .85098 0 rgb
f
380.846 239.585 mo
378.931 239.585 li
372.635 228.734 li
374.066 227.902 li
380.846 239.585 li
1 .945098 .619608 rgb
f
371.047 229.657 mo
371.047 229.657 li
371.865 229.182 li
371.047 229.657 li
1 1 1 rgb
f
378.931 239.585 mo
376.809 239.585 li
371.047 229.657 li
371.865 229.182 li
372.635 228.734 li
378.931 239.585 li
1 .882353 .211765 rgb
f
402.951 247.05 mo
402.947 244.414 402.343 241.92 401.266 239.695 cv
401.25 239.658 401.233 239.622 401.216 239.585 cv
432.329 239.585 li
433.22 239.585 433.903 240.375 433.776 241.256 cv
432.99 246.693 li
402.951 247.05 li
.980392 .964706 .917647 rgb
f
400.955 247.073 mo
400.954 244.767 400.373 242.573 399.342 240.599 cv
399.198 240.255 399.041 239.917 398.871 239.585 cv
401.216 239.585 li
401.233 239.622 401.25 239.658 401.266 239.695 cv
402.343 241.92 402.947 244.414 402.951 247.05 cv
400.955 247.073 li
398.694 247.052 mo
397.206 247.034 li
397.411 246.462 397.421 245.834 397.236 245.344 cv
397.002 244.724 396.329 244.264 395.155 244.264 cv
394.424 244.264 393.5 244.442 392.367 244.87 cv
391.472 245.208 390.11 245.867 389.132 246.362 cv
388.244 244.832 li
389.257 244.395 390.729 243.731 391.6 243.235 cv
393.987 241.879 394.699 240.528 394.498 239.585 cv
396.31 239.585 li
396.72 240.2 397.074 240.848 397.371 241.524 cv
398.218 243.218 398.69 245.093 398.694 247.052 cv
387.29 243.187 mo
386.885 242.49 li
387.233 241.579 387.398 240.576 387.398 239.585 cv
389.391 239.585 li
388.412 240.583 387.633 241.853 387.29 243.187 cv
.968627 .854902 .596078 rgb
f
400.72 247.076 mo
398.694 247.052 li
398.69 245.093 398.218 243.218 397.371 241.524 cv
397.074 240.848 396.72 240.2 396.31 239.585 cv
398.871 239.585 li
399.041 239.917 399.198 240.255 399.342 240.599 cv
400.373 242.573 400.954 244.767 400.955 247.073 cv
400.72 247.076 li
.976471 .921569 .788235 rgb
f
397.206 247.034 mo
389.469 246.943 li
389.132 246.362 li
390.11 245.867 391.472 245.208 392.367 244.87 cv
393.5 244.442 394.424 244.264 395.155 244.264 cv
396.329 244.264 397.002 244.724 397.236 245.344 cv
397.421 245.834 397.411 246.462 397.206 247.034 cv
.976471 .898039 .72549 rgb
f
386.885 242.49 mo
385.468 240.048 li
385.659 239.764 385.931 239.585 386.236 239.585 cv
385.2 239.585 li
387.398 239.585 li
387.398 240.576 387.233 241.579 386.885 242.49 cv
f
388.244 244.832 mo
387.29 243.187 li
387.633 241.853 388.412 240.583 389.391 239.585 cv
394.498 239.585 li
394.699 240.528 393.987 241.879 391.6 243.235 cv
390.729 243.731 389.257 244.395 388.244 244.832 cv
f
389.469 246.943 mo
389.461 246.942 li
385.464 240.054 li
385.465 240.052 385.467 240.05 385.468 240.048 cv
386.885 242.49 li
387.29 243.187 li
388.244 244.832 li
389.132 246.362 li
389.469 246.943 li
.956863 .729412 .643137 rgb
f
389.461 246.942 mo
387.534 246.92 li
385.402 243.246 li
385.195 241.256 li
385.147 240.798 385.257 240.365 385.464 240.054 cv
389.461 246.942 li
.972549 .87451 .811765 rgb
f
387.534 246.92 mo
385.782 246.899 li
385.761 246.693 li
385.402 243.246 li
387.534 246.92 li
.960784 .776471 .701961 rgb
f
368.235 245.21 mo
367.663 241.256 li
367.536 240.375 368.219 239.585 369.11 239.585 cv
369.838 239.585 li
369.594 240.105 369.377 240.635 369.189 241.171 cv
368.714 242.451 368.389 243.805 368.235 245.21 cv
.980392 .964706 .917647 rgb
f
374.037 246.76 mo
372.395 246.74 li
372.434 245.308 372.723 243.925 373.224 242.628 cv
373.583 241.558 374.087 240.535 374.737 239.585 cv
375.482 239.585 li
377.269 242.665 li
377.537 245.235 li
376.719 245.283 375.923 245.443 375.21 245.706 cv
374.676 245.904 374.285 246.296 374.037 246.76 cv
370.135 246.713 mo
368.449 246.693 li
368.235 245.21 li
368.389 243.805 368.714 242.451 369.189 241.171 cv
369.377 240.635 369.594 240.105 369.838 239.585 cv
372.11 239.585 li
371.72 240.323 371.401 241.09 371.15 241.879 cv
370.535 243.396 370.179 245.022 370.135 246.713 cv
.968627 .854902 .596078 rgb
f
372.395 246.74 mo
370.135 246.713 li
370.179 245.022 370.535 243.396 371.15 241.879 cv
371.401 241.09 371.72 240.323 372.11 239.585 cv
374.737 239.585 li
374.087 240.535 373.583 241.558 373.224 242.628 cv
372.723 243.925 372.434 245.308 372.395 246.74 cv
.976471 .921569 .788235 rgb
f
377.7 246.803 mo
374.037 246.76 li
374.285 246.296 374.676 245.904 375.21 245.706 cv
375.923 245.443 376.719 245.283 377.537 245.235 cv
377.689 246.693 li
377.7 246.803 li
.976471 .898039 .72549 rgb
f
377.269 242.665 mo
375.482 239.585 li
376.809 239.585 li
377.245 240.336 li
377.137 240.605 377.088 240.924 377.123 241.256 cv
377.269 242.665 li
.980392 .901961 .498039 rgb
f
377.245 240.336 mo
376.809 239.585 li
378.931 239.585 li
378.164 239.585 li
377.765 239.585 377.423 239.892 377.245 240.336 cv
.980392 .913725 .584314 rgb
f
425.326 280.321 mo
408.839 280.321 li
397.1 260.091 li
397.759 259.509 398.381 258.869 398.959 258.169 cv
400.274 256.579 401.25 254.821 401.896 252.981 cv
402.574 251.154 402.947 249.177 402.951 247.114 cv
402.951 247.092 402.951 247.071 402.951 247.05 cv
432.99 246.693 li
428.801 275.708 li
428.628 276.007 li
425.75 277.213 li
425.326 280.321 li
.980392 .733333 .0705882 rgb
f
397.1 260.091 mo
396.068 258.313 li
396.547 257.879 396.999 257.406 397.421 256.897 cv
398.574 255.502 399.406 253.934 399.935 252.273 cv
400.59 250.658 400.951 248.92 400.955 247.11 cv
400.955 247.098 400.955 247.086 400.955 247.073 cv
402.951 247.05 li
402.951 247.071 402.951 247.092 402.951 247.114 cv
402.947 249.177 402.574 251.154 401.896 252.981 cv
401.25 254.821 400.274 256.579 398.959 258.169 cv
398.381 258.869 397.759 259.509 397.1 260.091 cv
394.904 256.308 mo
394.212 255.116 li
394.668 254.41 394.836 253.438 394.366 252.624 cv
393.609 251.315 392.341 250.11 390.88 249.374 cv
390.379 248.509 li
391.22 248.795 392.131 248.932 393.031 248.932 cv
394.028 248.932 395.012 248.764 395.874 248.445 cv
396.542 248.199 396.986 247.649 397.206 247.034 cv
398.694 247.052 li
398.694 247.07 398.694 247.087 398.694 247.105 cv
398.691 248.646 398.398 250.135 397.861 251.524 cv
397.386 252.936 396.66 254.268 395.678 255.456 cv
395.432 255.754 395.173 256.038 394.904 256.308 cv
.980392 .713725 .0156863 rgb
f
396.068 258.313 mo
394.904 256.308 li
395.173 256.038 395.432 255.754 395.678 255.456 cv
396.66 254.268 397.386 252.936 397.861 251.524 cv
398.398 250.135 398.691 248.646 398.694 247.105 cv
398.694 247.087 398.694 247.07 398.694 247.052 cv
400.72 247.076 li
400.955 247.073 li
400.955 247.086 400.955 247.098 400.955 247.11 cv
400.951 248.92 400.59 250.658 399.935 252.273 cv
399.406 253.934 398.574 255.502 397.421 256.897 cv
396.999 257.406 396.547 257.879 396.068 258.313 cv
.980392 .72549 .0470588 rgb
f
393.031 248.932 mo
392.131 248.932 391.22 248.795 390.379 248.509 cv
389.469 246.943 li
397.206 247.034 li
396.986 247.649 396.542 248.199 395.874 248.445 cv
395.012 248.764 394.028 248.932 393.031 248.932 cv
.980392 .721569 .0392157 rgb
f
394.212 255.116 mo
390.88 249.374 li
392.341 250.11 393.609 251.315 394.366 252.624 cv
394.836 253.438 394.668 254.41 394.212 255.116 cv
f
408.839 280.321 mo
408.831 280.321 li
389.461 246.942 li
389.469 246.943 li
390.379 248.509 li
390.88 249.374 li
394.212 255.116 li
394.904 256.308 li
396.068 258.313 li
397.1 260.091 li
408.839 280.321 li
404.794 280.321 mo
404.493 280.321 li
385.931 248.335 li
385.866 247.703 li
404.794 280.321 li
.976471 .694118 .0235294 rgb
f
408.831 280.321 mo
406.917 280.321 li
387.534 246.92 li
389.461 246.942 li
408.831 280.321 li
.980392 .717647 .054902 rgb
f
406.917 280.321 mo
404.794 280.321 li
385.866 247.703 li
385.782 246.899 li
387.534 246.92 li
406.917 280.321 li
.980392 .701961 .0352941 rgb
f
404.493 280.321 mo
404.485 280.321 li
385.933 248.352 li
385.931 248.335 li
404.493 280.321 li
.980392 .721569 0 rgb
f
404.485 280.321 mo
402.571 280.321 li
386.351 252.37 li
385.933 248.352 li
404.485 280.321 li
.980392 .729412 .0431373 rgb
f
399.122 280.321 mo
389.943 280.321 li
389.711 277.947 li
388.9 276.007 li
388.775 275.708 li
387.597 264.362 li
388.292 264.278 388.975 264.152 389.642 263.986 cv
399.122 280.321 li
.980392 .733333 .0705882 rgb
f
387.597 264.362 mo
387.389 262.363 li
387.789 262.308 388.185 262.236 388.575 262.148 cv
389.642 263.986 li
388.975 264.152 388.292 264.278 387.597 264.362 cv
387.156 260.121 mo
387.103 259.61 li
387.381 260.089 li
387.306 260.1 387.231 260.111 387.156 260.121 cv
.980392 .713725 .0156863 rgb
f
387.389 262.363 mo
387.156 260.121 li
387.231 260.111 387.306 260.1 387.381 260.089 cv
388.575 262.148 li
388.185 262.236 387.789 262.308 387.389 262.363 cv
.980392 .72549 .0470588 rgb
f
400.448 280.321 mo
399.122 280.321 li
389.642 263.986 li
388.575 262.148 li
387.381 260.089 li
387.103 259.61 li
386.814 256.826 li
400.448 280.321 li
.980392 .721569 0 rgb
f
381.87 280.321 mo
376.113 280.321 li
375.689 277.213 li
372.811 276.007 li
372.638 275.708 li
369.453 253.649 li
369.568 253.922 369.69 254.191 369.818 254.457 cv
370.85 256.724 372.4 258.798 374.449 260.493 cv
375.976 261.755 377.659 262.706 379.419 263.351 cv
380.703 275.708 li
380.828 276.007 li
381.639 277.947 li
381.87 280.321 li
.980392 .733333 .0705882 rgb
f
379.419 263.351 mo
377.659 262.706 375.976 261.755 374.449 260.493 cv
372.4 258.798 370.85 256.724 369.818 254.457 cv
369.69 254.191 369.568 253.922 369.453 253.649 cv
368.449 246.693 li
370.135 246.713 li
370.132 246.823 370.13 246.932 370.13 247.042 cv
370.125 249.361 370.706 251.568 371.743 253.553 cv
372.608 255.619 373.934 257.476 375.722 258.954 cv
376.785 259.834 377.95 260.527 379.179 261.04 cv
379.419 263.351 li
378.907 258.416 mo
378.298 258.07 377.715 257.669 377.162 257.212 cv
375.638 255.952 374.483 254.378 373.714 252.628 cv
372.859 250.919 372.386 249.025 372.391 247.047 cv
372.391 246.944 372.392 246.842 372.395 246.74 cv
374.037 246.76 li
373.687 247.415 373.624 248.213 373.849 248.808 cv
374.082 249.428 374.755 249.888 375.93 249.888 cv
376.496 249.888 377.178 249.781 377.984 249.534 cv
378.214 251.752 li
376.582 253.015 376.303 254.199 376.739 254.965 cv
377.087 255.578 377.853 256.078 378.673 256.166 cv
378.907 258.416 li
.980392 .713725 .0156863 rgb
f
379.179 261.04 mo
377.95 260.527 376.785 259.834 375.722 258.954 cv
373.934 257.476 372.608 255.619 371.743 253.553 cv
370.706 251.568 370.125 249.361 370.13 247.042 cv
370.13 246.932 370.132 246.823 370.135 246.713 cv
372.395 246.74 li
372.392 246.842 372.391 246.944 372.391 247.047 cv
372.386 249.025 372.859 250.919 373.714 252.628 cv
374.483 254.378 375.638 255.952 377.162 257.212 cv
377.715 257.669 378.298 258.07 378.907 258.416 cv
379.179 261.04 li
.980392 .72549 .0470588 rgb
f
375.93 249.888 mo
374.755 249.888 374.082 249.428 373.849 248.808 cv
373.624 248.213 373.687 247.415 374.037 246.76 cv
377.7 246.803 li
377.984 249.534 li
377.178 249.781 376.496 249.888 375.93 249.888 cv
.980392 .721569 .0392157 rgb
f
378.673 256.166 mo
377.853 256.078 377.087 255.578 376.739 254.965 cv
376.303 254.199 376.582 253.015 378.214 251.752 cv
378.673 256.166 li
f
402.571 280.321 mo
400.448 280.321 li
386.814 256.826 li
386.351 252.37 li
402.571 280.321 li
.980392 .72549 .0156863 rgb
f
422.285 316.486 mo
393.466 316.486 li
392.922 310.904 li
414.59 310.904 li
418.359 310.904 421.546 308.12 422.055 304.382 cv
422.081 304.173 li
422.742 299.324 li
424.508 286.35 li
425.326 280.321 li
425.75 277.213 li
428.628 276.007 li
427.501 277.947 li
422.285 316.486 li
385.393 316.486 mo
379.154 316.486 li
373.938 277.947 li
372.811 276.007 li
375.689 277.213 li
376.113 280.321 li
376.931 286.35 li
378.698 299.324 li
379.358 304.173 li
379.384 304.382 li
379.798 307.426 381.988 309.837 384.823 310.627 cv
385.393 316.486 li
.980392 .964706 .917647 rgb
f
424.508 286.35 mo
407.992 286.35 li
407.987 286.341 li
408.288 286.165 li
409.799 285.287 li
409.799 285.287 li
409.799 285.287 li
410.649 284.793 li
411.236 284.451 li
408.839 280.321 li
425.326 280.321 li
424.508 286.35 li
1 .67451 .109804 rgb
f
407.987 286.341 mo
404.493 280.321 li
404.794 280.321 li
408.212 286.21 li
408.288 286.165 li
407.987 286.341 li
410.649 284.793 mo
411.23 284.455 li
408.831 280.321 li
408.839 280.321 li
411.236 284.451 li
410.649 284.793 li
.992157 .615686 .0392157 rgb
f
409.799 285.287 mo
406.917 280.321 li
408.831 280.321 li
411.23 284.455 li
410.649 284.793 li
409.799 285.287 li
.996078 .65098 .0823529 rgb
f
408.288 286.165 mo
409.799 285.287 li
409.799 285.287 li
408.288 286.165 li
1 .67451 .109804 rgb
f
408.212 286.21 mo
404.794 280.321 li
406.917 280.321 li
409.799 285.287 li
408.288 286.165 li
408.212 286.21 li
.996078 .627451 .054902 rgb
f
407.992 286.35 mo
407.984 286.35 li
404.485 280.321 li
404.493 280.321 li
407.987 286.341 li
407.992 286.35 li
1 .658823 0 rgb
f
407.984 286.35 mo
406.07 286.35 li
402.571 280.321 li
404.485 280.321 li
407.984 286.35 li
1 .670588 .0666667 rgb
f
402.62 286.35 mo
390.53 286.35 li
389.943 280.321 li
399.122 280.321 li
402.62 286.35 li
1 .67451 .109804 rgb
f
403.947 286.35 mo
402.62 286.35 li
399.122 280.321 li
400.448 280.321 li
403.947 286.35 li
1 .658823 0 rgb
f
406.07 286.35 mo
403.947 286.35 li
400.448 280.321 li
402.571 280.321 li
406.07 286.35 li
1 .662745 .0235294 rgb
f
382.458 286.35 mo
376.931 286.35 li
376.113 280.321 li
381.87 280.321 li
382.458 286.35 li
1 .67451 .109804 rgb
f
422.742 299.324 mo
391.794 299.324 li
390.53 286.35 li
402.62 286.35 li
405.036 290.513 li
406.028 289.936 li
406.028 289.936 li
407.615 289.013 li
407.94 288.823 li
409.052 288.177 li
407.992 286.35 li
424.508 286.35 li
422.742 299.324 li
1 .619608 .188235 rgb
f
405.036 290.513 mo
402.62 286.35 li
403.947 286.35 li
406.028 289.936 li
405.036 290.513 li
407.94 288.823 mo
409.046 288.18 li
407.984 286.35 li
407.992 286.35 li
409.052 288.177 li
407.94 288.823 li
1 .592157 0 rgb
f
407.615 289.013 mo
406.07 286.35 li
407.984 286.35 li
409.046 288.18 li
407.94 288.823 li
407.615 289.013 li
1 .611765 .117647 rgb
f
406.028 289.936 mo
403.947 286.35 li
406.07 286.35 li
407.615 289.013 li
406.028 289.936 li
1 .6 .0392157 rgb
f
383.721 299.324 mo
378.698 299.324 li
376.931 286.35 li
382.458 286.35 li
383.721 299.324 li
1 .619608 .188235 rgb
f
422.081 304.173 mo
392.266 304.173 li
391.794 299.324 li
422.742 299.324 li
422.081 304.173 li
1 .478431 .223529 rgb
f
384.194 304.173 mo
379.358 304.173 li
378.698 299.324 li
383.721 299.324 li
384.194 304.173 li
f
414.59 310.904 mo
392.922 310.904 li
392.266 304.173 li
422.081 304.173 li
422.055 304.382 li
421.546 308.12 418.359 310.904 414.59 310.904 cv
1 .333333 .247059 rgb
f
384.823 310.627 mo
381.988 309.837 379.798 307.426 379.384 304.382 cv
379.358 304.173 li
384.194 304.173 li
384.823 310.627 li
f
393.466 316.486 mo
385.393 316.486 li
384.823 310.627 li
385.469 310.808 386.149 310.904 386.849 310.904 cv
392.922 310.904 li
393.466 316.486 li
.980392 .956863 .913725 rgb
f
385.468 240.048 mo
385.2 239.585 li
386.236 239.585 li
385.931 239.585 385.659 239.764 385.468 240.048 cv
.976471 .917647 .8 rgb
f
385.396 246.894 mo
385.093 246.891 li
380.854 239.585 li
381.155 239.585 li
385.396 246.894 li
385.464 240.054 mo
385.192 239.585 li
385.2 239.585 li
385.468 240.048 li
385.467 240.05 385.465 240.052 385.464 240.054 cv
.964706 .815686 .752941 rgb
f
385.402 243.246 mo
383.277 239.585 li
385.192 239.585 li
385.464 240.054 li
385.257 240.365 385.147 240.798 385.195 241.256 cv
385.402 243.246 li
.976471 .901961 .85098 rgb
f
385.782 246.899 mo
385.396 246.894 li
381.155 239.585 li
383.277 239.585 li
385.402 243.246 li
385.761 246.693 li
385.782 246.899 li
.968627 .843137 .784314 rgb
f
385.093 246.891 mo
385.085 246.891 li
380.846 239.585 li
380.854 239.585 li
385.093 246.891 li
.980392 .917647 .666667 rgb
f
385.085 246.891 mo
383.158 246.868 li
378.931 239.585 li
380.846 239.585 li
385.085 246.891 li
.980392 .941176 .819608 rgb
f
378.769 245.249 mo
378.531 245.23 378.292 245.22 378.054 245.22 cv
377.881 245.22 377.708 245.225 377.537 245.235 cv
377.269 242.665 li
378.769 245.249 li
.972549 .890196 .72549 rgb
f
379.685 246.827 mo
377.7 246.803 li
377.689 246.693 li
377.537 245.235 li
377.708 245.225 377.881 245.22 378.054 245.22 cv
378.292 245.22 378.531 245.23 378.769 245.249 cv
379.685 246.827 li
.976471 .917647 .8 rgb
f
381.02 246.842 mo
379.685 246.827 li
378.769 245.249 li
377.269 242.665 li
377.123 241.256 li
377.088 240.924 377.137 240.605 377.245 240.336 cv
381.02 246.842 li
.980392 .917647 .666667 rgb
f
383.158 246.868 mo
381.02 246.842 li
377.245 240.336 li
377.423 239.892 377.765 239.585 378.164 239.585 cv
378.931 239.585 li
383.158 246.868 li
.980392 .92549 .717647 rgb
f
389.943 280.321 mo
381.87 280.321 li
381.639 277.947 li
380.828 276.007 li
380.703 275.708 li
379.419 263.351 li
379.492 263.378 379.564 263.404 379.637 263.429 cv
381.465 264.108 383.441 264.48 385.504 264.485 cv
385.518 264.485 385.531 264.485 385.544 264.485 cv
386.239 264.485 386.924 264.443 387.597 264.362 cv
388.775 275.708 li
388.9 276.007 li
389.711 277.947 li
389.943 280.321 li
.980392 .819608 .415686 rgb
f
385.544 264.485 mo
385.531 264.485 385.518 264.485 385.504 264.485 cv
383.441 264.48 381.465 264.108 379.637 263.429 cv
379.564 263.404 379.492 263.378 379.419 263.351 cv
379.179 261.04 li
379.562 261.2 379.951 261.343 380.345 261.468 cv
381.961 262.123 383.699 262.484 385.508 262.488 cv
385.519 262.488 385.529 262.488 385.539 262.488 cv
386.165 262.488 386.782 262.446 387.389 262.363 cv
387.597 264.362 li
386.924 264.443 386.239 264.485 385.544 264.485 cv
385.541 260.228 mo
385.532 260.228 385.522 260.228 385.513 260.228 cv
383.972 260.224 382.484 259.931 381.094 259.394 cv
380.339 259.141 379.606 258.815 378.907 258.416 cv
378.673 256.166 li
378.757 256.175 378.842 256.18 378.928 256.18 cv
379.29 256.18 379.656 256.095 379.995 255.899 cv
381.217 255.193 382.349 254.039 383.093 252.7 cv
383.721 253.783 li
383.609 255.04 383.771 256.32 384.173 257.408 cv
384.54 258.403 385.582 258.901 386.505 258.901 cv
386.567 258.901 386.627 258.899 386.688 258.895 cv
387.103 259.61 li
387.156 260.121 li
386.625 260.191 386.086 260.228 385.541 260.228 cv
378.214 251.752 mo
377.984 249.534 li
378.218 249.462 378.462 249.379 378.718 249.282 cv
379.248 249.082 379.942 248.769 380.623 248.444 cv
381.482 249.924 li
380.753 250.258 380.01 250.618 379.485 250.917 cv
378.992 251.197 378.571 251.476 378.214 251.752 cv
.980392 .807843 .380392 rgb
f
385.539 262.488 mo
385.529 262.488 385.519 262.488 385.508 262.488 cv
383.699 262.484 381.961 262.123 380.345 261.468 cv
379.951 261.343 379.562 261.2 379.179 261.04 cv
378.907 258.416 li
379.606 258.815 380.339 259.141 381.094 259.394 cv
382.484 259.931 383.972 260.224 385.513 260.228 cv
385.522 260.228 385.532 260.228 385.541 260.228 cv
386.086 260.228 386.625 260.191 387.156 260.121 cv
387.389 262.363 li
386.782 262.446 386.165 262.488 385.539 262.488 cv
.980392 .815686 .4 rgb
f
377.984 249.534 mo
377.7 246.803 li
379.685 246.827 li
380.623 248.444 li
379.942 248.769 379.248 249.082 378.718 249.282 cv
378.462 249.379 378.218 249.462 377.984 249.534 cv
.980392 .811765 .396078 rgb
f
386.505 258.901 mo
385.582 258.901 384.54 258.403 384.173 257.408 cv
383.771 256.32 383.609 255.04 383.721 253.783 cv
386.688 258.895 li
386.627 258.899 386.567 258.901 386.505 258.901 cv
f
378.928 256.18 mo
378.842 256.18 378.757 256.175 378.673 256.166 cv
378.214 251.752 li
378.571 251.476 378.992 251.197 379.485 250.917 cv
380.01 250.618 380.753 250.258 381.482 249.924 cv
383.093 252.7 li
382.349 254.039 381.217 255.193 379.995 255.899 cv
379.656 256.095 379.29 256.18 378.928 256.18 cv
f
387.103 259.61 mo
386.688 258.895 li
383.721 253.783 li
383.093 252.7 li
381.482 249.924 li
380.623 248.444 li
379.685 246.827 li
381.02 246.842 li
386.814 256.826 li
387.103 259.61 li
.980392 .811765 .372549 rgb
f
385.931 248.335 mo
385.093 246.891 li
385.396 246.894 li
385.866 247.703 li
385.931 248.335 li
.976471 .796078 .388235 rgb
f
385.866 247.703 mo
385.396 246.894 li
385.782 246.899 li
385.866 247.703 li
.980392 .8 .392157 rgb
f
385.933 248.352 mo
385.085 246.891 li
385.093 246.891 li
385.931 248.335 li
385.933 248.352 li
.980392 .811765 .372549 rgb
f
386.351 252.37 mo
383.158 246.868 li
385.085 246.891 li
385.933 248.352 li
386.351 252.37 li
.980392 .815686 .4 rgb
f
386.814 256.826 mo
381.02 246.842 li
383.158 246.868 li
386.351 252.37 li
386.814 256.826 li
.980392 .815686 .380392 rgb
f
390.53 286.35 mo
382.458 286.35 li
381.87 280.321 li
389.943 280.321 li
390.53 286.35 li
.992157 .784314 .439216 rgb
f
391.794 299.324 mo
383.721 299.324 li
382.458 286.35 li
390.53 286.35 li
391.794 299.324 li
.992157 .752941 .482353 rgb
f
392.266 304.173 mo
384.194 304.173 li
383.721 299.324 li
391.794 299.324 li
392.266 304.173 li
.992157 .670588 .505882 rgb
f
392.922 310.904 mo
386.849 310.904 li
386.149 310.904 385.469 310.808 384.823 310.627 cv
384.194 304.173 li
392.266 304.173 li
392.922 310.904 li
.992157 .584314 .517647 rgb
f
100.392 421 mo
100.392 423.642 100.177 425.723 99.7938 427.375 cv
99.4217 426.793 98.9657 426.368 98.3419 426.368 cv
98.2842 426.373 li
98.0378 426.384 97.7914 426.389 97.5398 426.389 cv
91.0815 426.389 83.2866 423.066 80.5293 417.231 cv
80.524 416.995 80.524 416.759 80.524 416.518 cv
80.524 415.113 80.6551 413.703 80.9119 412.319 cv
81.0168 412.325 81.1217 412.325 81.2264 412.325 cv
85.6613 412.325 89.4041 410.899 93.8861 409.95 cv
99.6419 411.884 100.392 414.364 100.392 421 cv
.823529 .662745 .533333 rgb
f
99.7938 427.375 mo
100.177 425.723 100.392 423.642 100.392 421 cv
100.392 414.364 99.6419 411.884 93.8861 409.95 cv
95.6527 409.573 97.5398 409.274 99.6314 409.164 cv
102.719 409.887 105.796 410.914 108.847 411.827 cv
108.994 413.84 109.13 416.083 109.13 418.332 cv
109.13 429.351 106.336 434.231 94.9396 434.231 cv
94.2845 434.231 93.6501 434.21 93.0316 434.158 cv
96.0091 433.387 98.651 432.286 99.7938 427.375 cv
.709804 .458824 .2 rgb
f
98.3419 426.368 mo
98.9657 426.368 99.4217 426.793 99.7938 427.375 cv
98.651 432.286 96.0091 433.387 93.0316 434.158 cv
85.6875 433.581 80.7127 429.409 80.5293 417.231 cv
83.2866 423.066 91.0815 426.389 97.5398 426.389 cv
97.7914 426.389 98.0378 426.384 98.2842 426.373 cv
98.3419 426.368 li
.898039 .709804 .521569 rgb
f
92.5127 408.236 mo
94.8821 408.236 97.262 408.608 99.6314 409.164 cv
97.5398 409.274 95.6527 409.573 93.8861 409.95 cv
89.4041 410.899 85.6613 412.325 81.2264 412.325 cv
81.1217 412.325 81.0168 412.325 80.9119 412.319 cv
81.022 411.717 81.1583 411.119 81.3155 410.526 cv
81.6457 410.689 82.0861 411.108 82.3431 411.108 cv
82.4321 411.082 li
85.7661 409.001 89.1368 408.236 92.5127 408.236 cv
.909804 .858824 .815686 rgb
f
72.6567 425.812 mo
74.0116 428.08 74.8945 429.977 75.4127 431.591 cv
74.7948 431.282 74.1855 431.152 73.65 431.472 cv
73.6032 431.506 li
73.397 431.641 73.1881 431.772 72.9722 431.901 cv
67.4279 435.213 59.0316 436.357 53.6723 432.763 cv
53.5469 432.563 53.4258 432.36 53.3022 432.153 cv
52.5817 430.947 51.9711 429.669 51.4819 428.35 cv
51.5746 428.301 51.6646 428.247 51.7546 428.193 cv
55.5619 425.919 58.0438 422.775 61.4049 419.662 cv
67.3382 418.371 69.2533 420.115 72.6567 425.812 cv
.823529 .662745 .533333 rgb
f
75.4127 431.591 mo
74.8945 429.977 74.0116 428.08 72.6567 425.812 cv
69.2533 420.115 67.3382 418.371 61.4049 419.662 cv
62.728 418.432 64.1948 417.208 65.9339 416.041 cv
68.9557 415.078 72.1241 414.382 75.2111 413.601 cv
76.3695 415.253 77.637 417.11 78.7902 419.04 cv
84.4412 428.5 84.5454 434.122 74.7618 439.967 cv
74.1993 440.303 73.644 440.61 73.0861 440.882 cv
75.2471 438.694 76.9506 436.394 75.4127 431.591 cv
.709804 .458824 .2 rgb
f
73.65 431.472 mo
74.1855 431.152 74.7948 431.282 75.4127 431.591 cv
76.9506 436.394 75.2471 438.694 73.0861 440.882 cv
66.4855 444.154 60.0749 443.123 53.6723 432.763 cv
59.0316 436.357 67.4279 435.213 72.9722 431.901 cv
73.1881 431.772 73.397 431.641 73.6032 431.506 cv
73.65 431.472 li
.898039 .709804 .521569 rgb
f
59.3467 418.895 mo
61.3809 417.68 63.6148 416.779 65.9339 416.041 cv
64.1948 417.208 62.728 418.432 61.4049 419.662 cv
58.0438 422.775 55.5619 425.919 51.7546 428.193 cv
51.6646 428.247 51.5746 428.301 51.4819 428.35 cv
51.2672 427.776 51.8689 426.708 52.0894 426.576 cv
52.1525 426.508 li
53.9474 423.012 56.4486 420.626 59.3467 418.895 cv
.909804 .858824 .815686 rgb
f
84.9513 447.229 mo
80.5538 448.728 li
58.1333 382.739 li
62.5309 381.24 li
84.9513 447.229 li
1 .101961 .305882 rgb
f
60.9573 381.777 mo
60.9573 381.777 li
62.5243 381.243 li
60.9573 381.777 li
1 1 1 rgb
f
68.5885 399.091 mo
66.84 399.091 li
60.9573 381.777 li
62.5243 381.243 li
68.5885 399.091 li
1 .658823 .737255 rgb
f
66.84 399.091 mo
64.9009 399.091 li
59.2194 382.369 li
60.604 381.897 li
60.9573 381.777 li
66.84 399.091 li
1 .290196 .45098 rgb
f
102.09 475.991 mo
70.8726 475.991 li
70.2305 470.41 li
94.3972 470.41 li
98.1661 470.41 101.353 467.626 101.862 463.888 cv
101.888 463.679 li
102.15 461.76 li
102.147 461.76 li
102.15 461.76 li
102.549 458.83 li
103.796 449.672 li
103.793 449.672 li
103.796 449.672 li
104.315 445.856 li
105.133 439.827 li
105.558 436.719 li
108.431 435.515 li
107.306 437.451 li
102.09 475.991 li
65.0731 475.991 mo
58.9583 475.991 li
53.7424 437.451 li
52.6152 435.511 li
52.6174 435.512 li
52.6177 435.513 li
52.6188 435.513 li
52.6177 435.513 li
55.4934 436.718 li
55.9178 439.826 li
56.7356 445.854 li
58.5022 458.828 li
59.1627 463.677 li
59.1889 463.887 li
59.4948 466.136 60.7706 468.039 62.5593 469.199 cv
63.1236 469.565 63.7389 469.857 64.3911 470.062 cv
65.0731 475.991 li
.980392 .964706 .917647 rgb
f
111.948 412.096 mo
108.867 412.096 li
108.86 412.006 108.854 411.916 108.847 411.827 cv
105.796 410.914 102.719 409.887 99.6314 409.164 cv
99.6314 409.164 li
97.262 408.608 94.8821 408.236 92.5127 408.236 cv
89.1368 408.236 85.7661 409.001 82.4321 411.082 cv
82.3431 411.108 li
82.0861 411.108 81.6457 410.689 81.3155 410.526 cv
81.1777 411.046 81.056 411.569 80.9538 412.096 cv
73.0147 412.096 li
68.5959 399.091 li
112.136 399.091 li
113.022 399.091 113.709 399.877 113.578 400.758 cv
112.797 406.199 li
111.948 412.096 li
f
98.0175 412.096 mo
84.3781 412.096 li
87.5371 411.655 90.5005 410.667 93.8861 409.95 cv
93.8861 409.95 li
95.7308 410.57 97.0611 411.246 98.0175 412.096 cv
.905882 .823529 .721569 rgb
f
108.867 412.096 mo
98.0175 412.096 li
97.0611 411.246 95.7308 410.57 93.8861 409.95 cv
95.6527 409.573 97.5398 409.274 99.6314 409.164 cv
99.6314 409.164 li
99.6314 409.164 li
102.719 409.887 105.796 410.914 108.847 411.827 cv
108.854 411.916 108.86 412.006 108.867 412.096 cv
.858823 .737255 .580392 rgb
f
84.3781 412.096 mo
80.9538 412.096 li
81.056 411.569 81.1777 411.046 81.3155 410.526 cv
81.6457 410.689 82.0861 411.108 82.3431 411.108 cv
82.4321 411.082 li
85.7661 409.001 89.1368 408.236 92.5127 408.236 cv
94.8821 408.236 97.262 408.608 99.6314 409.164 cv
99.6314 409.164 li
97.5398 409.274 95.6527 409.573 93.8861 409.95 cv
93.8861 409.95 li
90.5005 410.667 87.5371 411.655 84.3781 412.096 cv
.945098 .905882 .839216 rgb
f
73.0147 412.096 mo
73.0073 412.096 li
68.5885 399.091 li
68.5959 399.091 li
73.0147 412.096 li
.980392 .588235 .623529 rgb
f
73.0073 412.096 mo
71.2588 412.096 li
66.84 399.091 li
68.5885 399.091 li
73.0073 412.096 li
.980392 .819608 .803922 rgb
f
68.1078 412.096 mo
62.4973 412.096 li
61.7754 406.199 li
61.107 400.758 li
60.9956 399.877 61.5794 399.091 62.3368 399.091 cv
56.5373 399.091 li
55.7798 399.091 55.1961 399.877 55.3075 400.758 cv
55.9758 406.199 li
56.6976 412.096 li
49.1056 412.096 li
48.2565 406.199 li
47.47 400.758 li
47.339 399.877 48.0256 399.091 48.9168 399.091 cv
63.689 399.091 li
68.1078 412.096 li
.980392 .964706 .917647 rgb
f
69.3197 412.096 mo
68.1078 412.096 li
63.689 399.091 li
64.9009 399.091 li
69.3197 412.096 li
.980392 .588235 .623529 rgb
f
71.2588 412.096 mo
69.3197 412.096 li
64.9009 399.091 li
66.84 399.091 li
71.2588 412.096 li
.980392 .666667 .686274 rgb
f
108.435 435.513 mo
108.432 435.513 li
108.433 435.511 li
108.429 435.513 li
80.9708 435.513 li
80.7868 434.971 li
82.5271 432.655 82.9949 430.202 82.4342 427.385 cv
84.5509 431.922 88.2994 433.786 93.0316 434.158 cv
93.0316 434.158 li
93.6501 434.21 94.2845 434.231 94.9396 434.231 cv
106.336 434.231 109.13 429.351 109.13 418.332 cv
109.13 416.183 109.006 414.039 108.867 412.096 cv
111.948 412.096 li
108.609 435.214 li
108.435 435.513 li
99.7938 427.375 mo
99.4217 426.793 98.9657 426.368 98.3419 426.368 cv
98.2842 426.373 li
98.0378 426.384 97.7914 426.389 97.5398 426.389 cv
91.0815 426.389 83.2866 423.066 80.5293 417.231 cv
80.566 419.664 80.7937 421.776 81.1935 423.605 cv
80.5715 422.183 79.7632 420.669 78.7902 419.04 cv
77.637 417.11 76.3695 415.253 75.2111 413.601 cv
74.6951 413.731 74.1766 413.86 73.6571 413.987 cv
73.0147 412.096 li
80.9538 412.096 li
80.9394 412.171 80.9255 412.245 80.9119 412.319 cv
80.9119 412.319 li
80.6551 413.703 80.524 415.113 80.524 416.518 cv
80.524 416.759 80.524 416.995 80.5293 417.231 cv
83.2866 423.066 91.0815 426.389 97.5398 426.389 cv
97.7914 426.389 98.0378 426.384 98.2842 426.373 cv
98.3419 426.368 li
98.9657 426.368 99.4217 426.793 99.7938 427.375 cv
100.177 425.723 100.392 423.642 100.392 421 cv
100.392 421 li
100.392 423.642 100.177 425.723 99.7938 427.375 cv
99.7938 427.375 li
.898039 .811765 .662745 rgb
f
99.7938 427.375 mo
99.4217 426.793 98.9657 426.368 98.3419 426.368 cv
98.2842 426.373 li
98.0378 426.384 97.7914 426.389 97.5398 426.389 cv
91.0815 426.389 83.2866 423.066 80.5293 417.231 cv
80.524 416.995 80.524 416.759 80.524 416.518 cv
80.524 415.113 80.6551 413.703 80.9119 412.319 cv
80.9119 412.319 li
80.9119 412.319 li
81.0168 412.325 81.1217 412.325 81.2264 412.325 cv
82.3113 412.325 83.3551 412.239 84.3781 412.096 cv
98.0175 412.096 li
100.045 413.9 100.392 416.491 100.392 421 cv
100.392 423.642 100.177 425.723 99.7938 427.375 cv
.882353 .780392 .623529 rgb
f
94.9396 434.231 mo
94.2845 434.231 93.6501 434.21 93.0316 434.158 cv
96.0091 433.387 98.651 432.286 99.7938 427.375 cv
99.7938 427.375 li
99.7938 427.375 li
100.177 425.723 100.392 423.642 100.392 421 cv
100.392 421 li
100.392 416.491 100.045 413.9 98.0175 412.096 cv
108.867 412.096 li
109.006 414.039 109.13 416.183 109.13 418.332 cv
109.13 429.351 106.336 434.231 94.9396 434.231 cv
.870588 .760784 .592157 rgb
f
93.0316 434.158 mo
88.2994 433.786 84.5509 431.922 82.4342 427.385 cv
82.1976 426.196 81.7777 424.941 81.1935 423.605 cv
80.7937 421.776 80.566 419.664 80.5293 417.231 cv
83.2866 423.066 91.0815 426.389 97.5398 426.389 cv
97.7914 426.389 98.0378 426.384 98.2842 426.373 cv
98.3419 426.368 li
98.9657 426.368 99.4217 426.793 99.7938 427.375 cv
99.7938 427.375 li
98.651 432.286 96.0091 433.387 93.0316 434.158 cv
93.0316 434.158 li
.886274 .784314 .619608 rgb
f
81.2264 412.325 mo
81.1217 412.325 81.0168 412.325 80.9119 412.319 cv
80.9119 412.319 li
80.9255 412.245 80.9394 412.171 80.9538 412.096 cv
84.3781 412.096 li
83.3551 412.239 82.3113 412.325 81.2264 412.325 cv
.890196 .8 .647059 rgb
f
80.7868 434.971 mo
73.6571 413.987 li
74.1766 413.86 74.6951 413.731 75.2111 413.601 cv
76.3695 415.253 77.637 417.11 78.7902 419.04 cv
79.7632 420.669 80.5715 422.183 81.1935 423.605 cv
81.7777 424.941 82.1976 426.196 82.4342 427.385 cv
82.9949 430.202 82.5271 432.655 80.7868 434.971 cv
.870588 .760784 .592157 rgb
f
80.9708 435.513 mo
80.9634 435.513 li
73.0073 412.096 li
73.0147 412.096 li
73.6571 413.987 li
80.7868 434.971 li
80.9708 435.513 li
.898039 .729412 .603922 rgb
f
80.9634 435.513 mo
79.2149 435.513 li
71.2588 412.096 li
73.0073 412.096 li
80.9634 435.513 li
.898039 .780392 .639216 rgb
f
65.2701 434.68 mo
65.2701 434.68 li
68.0438 434.217 70.7392 433.235 72.9722 431.901 cv
73.1881 431.772 73.397 431.641 73.6032 431.506 cv
73.65 431.472 li
73.6596 431.466 73.6692 431.46 73.6789 431.455 cv
73.6692 431.46 73.6596 431.466 73.65 431.472 cv
73.6032 431.506 li
73.397 431.641 73.1881 431.772 72.9722 431.901 cv
70.7392 433.235 68.0438 434.217 65.2701 434.68 cv
73.6806 431.454 mo
73.887 431.338 74.104 431.287 74.328 431.287 cv
74.1041 431.287 73.887 431.338 73.6806 431.454 cv
74.3344 431.287 mo
74.3336 431.287 74.3326 431.287 74.3317 431.287 cv
74.3317 431.287 li
74.3326 431.287 74.3336 431.287 74.3344 431.287 cv
72.6567 425.812 mo
72.6513 425.803 72.6459 425.794 72.6405 425.785 cv
72.6459 425.794 72.6513 425.803 72.6567 425.812 cv
72.5858 425.694 mo
72.5682 425.665 72.5508 425.636 72.5333 425.606 cv
72.5508 425.636 72.5682 425.665 72.5858 425.694 cv
63.3853 419.329 mo
63.3853 419.329 li
63.8166 419.282 64.2233 419.259 64.609 419.258 cv
64.2233 419.259 63.8167 419.282 63.3853 419.329 cv
64.6147 419.258 mo
64.6136 419.258 64.6128 419.258 64.6117 419.258 cv
64.6117 419.258 li
64.6128 419.258 64.6136 419.258 64.6147 419.258 cv
63.1057 417.052 mo
62.4973 412.096 li
68.1078 412.096 li
69.1342 415.117 li
68.0561 415.403 66.9861 415.705 65.9339 416.041 cv
65.9339 416.041 li
64.9738 416.346 64.0285 416.679 63.1057 417.052 cv
.898039 .811765 .662745 rgb
f
65.2701 434.68 mo
63.3853 419.329 li
63.8167 419.282 64.2233 419.259 64.609 419.258 cv
64.6098 419.258 64.6109 419.258 64.6117 419.258 cv
64.6128 419.258 64.6136 419.258 64.6147 419.258 cv
68.1371 419.26 69.9019 421.23 72.5333 425.606 cv
72.5508 425.636 72.5682 425.665 72.5858 425.694 cv
72.6039 425.724 72.6222 425.755 72.6405 425.785 cv
72.6459 425.794 72.6513 425.803 72.6567 425.812 cv
72.6567 425.812 li
72.7461 425.962 72.8337 426.11 72.9191 426.257 cv
74.6378 431.316 li
74.5355 431.297 74.4343 431.287 74.3344 431.287 cv
74.3336 431.287 74.3326 431.287 74.3317 431.287 cv
74.3317 431.287 li
74.3317 431.287 li
74.3305 431.287 74.3293 431.287 74.328 431.287 cv
74.104 431.287 73.887 431.338 73.6806 431.454 cv
73.68 431.454 73.6795 431.455 73.6789 431.455 cv
73.6692 431.46 73.6596 431.466 73.65 431.472 cv
73.6032 431.506 li
73.397 431.641 73.1881 431.772 72.9722 431.901 cv
70.7392 433.235 68.0438 434.217 65.2701 434.68 cv
.882353 .780392 .623529 rgb
f
76.0639 435.513 mo
75.9844 435.513 li
75.9892 435.447 75.9932 435.381 75.9963 435.314 cv
76.0639 435.513 li
72.9191 426.257 mo
72.8337 426.11 72.7461 425.962 72.6567 425.812 cv
72.6567 425.812 li
72.6513 425.803 72.6459 425.794 72.6405 425.785 cv
72.6222 425.755 72.6039 425.724 72.5858 425.694 cv
72.5682 425.665 72.5508 425.636 72.5333 425.606 cv
69.9019 421.23 68.1371 419.26 64.6147 419.258 cv
64.6136 419.258 64.6128 419.258 64.6117 419.258 cv
64.6117 419.258 li
64.6109 419.258 64.6098 419.258 64.609 419.258 cv
64.2233 419.259 63.8166 419.282 63.3853 419.329 cv
63.2294 418.06 li
64.0598 417.375 64.9536 416.698 65.9339 416.041 cv
65.9339 416.041 li
65.9339 416.041 li
66.9861 415.705 68.0561 415.403 69.1342 415.117 cv
72.9191 426.257 li
.870588 .760784 .592157 rgb
f
75.9844 435.513 mo
65.4816 435.513 li
65.4808 435.511 li
65.4824 435.512 li
65.3357 435.214 li
65.2701 434.68 li
68.0438 434.217 70.7392 433.235 72.9722 431.901 cv
73.1881 431.772 73.397 431.641 73.6032 431.506 cv
73.65 431.472 li
73.6596 431.466 73.6692 431.46 73.6789 431.455 cv
73.6795 431.455 73.68 431.454 73.6806 431.454 cv
73.887 431.338 74.1041 431.287 74.328 431.287 cv
74.3293 431.287 74.3305 431.287 74.3317 431.287 cv
74.3317 431.287 li
74.3326 431.287 74.3336 431.287 74.3344 431.287 cv
74.4343 431.287 74.5355 431.297 74.6378 431.316 cv
75.9963 435.314 li
75.9932 435.381 75.9892 435.447 75.9844 435.513 cv
.886274 .784314 .619608 rgb
f
63.2294 418.06 mo
63.1057 417.052 li
64.0285 416.679 64.9738 416.346 65.9339 416.041 cv
65.9339 416.041 li
64.9536 416.698 64.0598 417.375 63.2294 418.06 cv
.890196 .8 .647059 rgb
f
77.2757 435.513 mo
76.0639 435.513 li
75.9963 435.314 li
74.6378 431.316 li
72.9191 426.257 li
69.1342 415.117 li
68.1078 412.096 li
69.3197 412.096 li
77.2757 435.513 li
.898039 .729412 .603922 rgb
f
55.5315 435.513 mo
52.6177 435.513 li
52.6174 435.512 li
52.4448 435.214 li
49.1056 412.096 li
56.6976 412.096 li
57.669 420.007 li
55.4828 421.618 53.5908 423.706 52.1525 426.508 cv
52.0894 426.576 li
51.8689 426.708 51.2672 427.776 51.4819 428.35 cv
51.4819 428.35 li
51.9711 429.669 52.5817 430.947 53.3022 432.153 cv
53.4258 432.36 53.5469 432.563 53.6723 432.763 cv
53.69 432.775 53.7079 432.786 53.7256 432.798 cv
53.7079 432.786 53.69 432.775 53.6723 432.763 cv
54.2921 433.766 54.9114 434.68 55.5315 435.513 cv
.898039 .811765 .662745 rgb
f
59.4895 434.833 mo
57.3929 434.567 55.4109 433.915 53.7256 432.798 cv
53.7079 432.786 53.69 432.775 53.6723 432.763 cv
53.5469 432.563 53.4258 432.36 53.3022 432.153 cv
52.5817 430.947 51.9711 429.669 51.4819 428.35 cv
51.5746 428.301 51.6646 428.247 51.7546 428.193 cv
54.1994 426.732 56.0978 424.914 58.0333 422.974 cv
59.4895 434.833 li
.882353 .780392 .623529 rgb
f
59.6821 435.513 mo
55.5315 435.513 li
54.9114 434.68 54.2921 433.766 53.6723 432.763 cv
53.69 432.775 53.7079 432.786 53.7256 432.798 cv
55.4109 433.915 57.3929 434.567 59.4895 434.833 cv
59.5362 435.214 li
59.6829 435.512 li
59.6813 435.511 li
59.6821 435.513 li
.886274 .784314 .619608 rgb
f
51.4819 428.35 mo
51.2672 427.776 51.8689 426.708 52.0894 426.576 cv
52.1525 426.508 li
53.5908 423.706 55.4828 421.618 57.669 420.007 cv
58.0333 422.974 li
56.0978 424.914 54.1994 426.732 51.7546 428.193 cv
51.6646 428.247 51.5746 428.301 51.4819 428.35 cv
51.4819 428.35 li
.890196 .8 .647059 rgb
f
79.2149 435.513 mo
77.2757 435.513 li
69.3197 412.096 li
71.2588 412.096 li
79.2149 435.513 li
.898039 .745098 .615686 rgb
f
108.432 435.513 mo
108.429 435.513 li
108.433 435.511 li
108.432 435.513 li
52.6177 435.513 mo
52.6177 435.513 li
52.6174 435.512 li
52.6188 435.513 li
.894118 .807843 .658823 rgb
f
108.435 435.513 mo
105.558 436.719 li
105.133 439.827 li
104.315 445.856 li
103.796 449.672 li
57.257 449.672 li
56.738 445.856 li
55.9203 439.827 li
55.4956 436.719 li
52.6177 435.513 li
108.435 435.513 li
.858824 .764706 .623529 rgb
f
103.796 449.672 mo
102.549 458.83 li
102.15 461.76 li
58.903 461.76 li
58.5046 458.83 li
57.257 449.672 li
103.796 449.672 li
.780392 .619608 .380392 rgb
f
102.15 461.76 mo
101.888 463.679 li
101.862 463.888 li
101.353 467.626 98.1661 470.41 94.3972 470.41 cv
66.6562 470.41 li
62.887 470.41 59.6998 467.626 59.1913 463.888 cv
59.1651 463.679 li
58.903 461.76 li
102.15 461.76 li
.576471 .305882 .0313726 rgb
f
70.8726 475.991 mo
65.0731 475.991 li
64.3911 470.062 li
65.1081 470.288 65.8694 470.41 66.6562 470.41 cv
70.2305 470.41 li
70.8726 475.991 li
.980392 .94902 .909804 rgb
f
62.4973 412.096 mo
56.6976 412.096 li
55.9758 406.199 li
55.3075 400.758 li
55.1961 399.877 55.7798 399.091 56.5373 399.091 cv
62.3368 399.091 li
61.5794 399.091 60.9956 399.877 61.107 400.758 cv
61.7754 406.199 li
62.4973 412.096 li
f
61.7868 434.976 mo
61.7855 434.976 61.7842 434.976 61.7829 434.976 cv
61.7842 434.976 61.7855 434.976 61.7868 434.976 cv
61.7868 434.976 li
61.7919 434.976 mo
62.9461 434.975 64.1151 434.873 65.2701 434.68 cv
65.2701 434.68 li
64.1147 434.873 62.9465 434.975 61.7919 434.976 cv
57.669 420.007 mo
56.6976 412.096 li
62.4973 412.096 li
63.1057 417.052 li
61.7995 417.578 60.5387 418.183 59.3467 418.895 cv
58.771 419.239 58.211 419.608 57.669 420.007 cv
61.507 419.64 mo
62.1833 419.496 62.8059 419.392 63.3853 419.329 cv
63.3853 419.329 li
62.8061 419.392 62.183 419.496 61.507 419.64 cv
.94902 .890196 .811765 rgb
f
61.7868 434.976 mo
61.7855 434.976 61.7842 434.976 61.7829 434.976 cv
61.0093 434.975 60.2419 434.929 59.4895 434.833 cv
58.0333 422.974 li
59.112 421.894 60.2022 420.776 61.4049 419.662 cv
61.4049 419.662 li
61.4389 419.655 61.4733 419.647 61.507 419.64 cv
62.183 419.496 62.8061 419.392 63.3853 419.329 cv
65.2701 434.68 li
64.1151 434.873 62.9461 434.975 61.7919 434.976 cv
61.7902 434.976 61.7885 434.976 61.7868 434.976 cv
.941176 .878431 .8 rgb
f
61.4049 419.662 mo
61.9821 419.125 62.5868 418.59 63.2294 418.06 cv
63.3853 419.329 li
62.8059 419.392 62.1833 419.496 61.507 419.64 cv
61.4733 419.647 61.4389 419.655 61.4049 419.662 cv
.937255 .87451 .788235 rgb
f
65.4816 435.513 mo
59.6821 435.513 li
59.6813 435.511 li
59.6829 435.512 li
59.5362 435.214 li
59.4895 434.833 li
60.2419 434.929 61.0093 434.975 61.7829 434.976 cv
61.7842 434.976 61.7855 434.976 61.7868 434.976 cv
61.7868 434.976 li
61.7885 434.976 61.7902 434.976 61.7919 434.976 cv
62.9465 434.975 64.1147 434.873 65.2701 434.68 cv
65.3357 435.214 li
65.4824 435.512 li
65.4808 435.511 li
65.4816 435.513 li
.945098 .882353 .796078 rgb
f
58.0333 422.974 mo
57.669 420.007 li
58.211 419.608 58.771 419.239 59.3467 418.895 cv
60.5387 418.183 61.7995 417.578 63.1057 417.052 cv
63.2294 418.06 li
62.5868 418.59 61.9821 419.125 61.4049 419.662 cv
61.4049 419.662 li
60.2022 420.776 59.112 421.894 58.0333 422.974 cv
.945098 .886274 .807843 rgb
f
67.8447 449.672 mo
62.0452 449.672 li
60.6392 437.451 li
59.6821 435.513 li
65.4816 435.513 li
66.4387 437.451 li
67.8447 449.672 li
.933333 .87451 .8 rgb
f
69.2354 461.76 mo
63.4359 461.76 li
62.0452 449.672 li
67.8447 449.672 li
69.2354 461.76 li
.905882 .819608 .705882 rgb
f
70.2305 470.41 mo
66.6562 470.41 li
65.8694 470.41 65.1081 470.288 64.3911 470.062 cv
63.4359 461.76 li
69.2354 461.76 li
70.2305 470.41 li
.827451 .698039 .572549 rgb
f
101.492 202.471 mo
102.939 202.471 104.113 203.645 104.113 205.092 cv
101.681 209.239 99.8096 213.647 98.5201 218.197 cv
62.5279 218.197 li
61.2384 213.647 59.367 209.239 56.9346 205.092 cv
56.9346 204.369 57.2282 203.714 57.7 203.236 cv
58.177 202.765 58.8323 202.471 59.5556 202.471 cv
101.492 202.471 li
.968627 .913725 .87451 rgb
f
101.796 262.755 mo
102.389 266.729 102.069 270.754 100.9 274.55 cv
60.148 274.55 li
58.979 270.754 58.6593 266.729 59.2516 262.755 cv
101.796 262.755 li
.843137 0 .0352941 rgb
f
101.796 262.755 mo
59.2516 262.755 li
59.3722 261.927 59.5347 261.099 59.7339 260.281 cv
60.8662 255.678 li
100.182 255.678 li
101.314 260.281 li
101.513 261.099 101.676 261.927 101.796 262.755 cv
.890196 .431373 .0980392 rgb
f
98.9132 313.331 mo
100.381 313.635 101.377 314.998 101.23 316.486 cv
59.8178 316.486 li
59.8072 316.387 59.802 316.292 59.802 316.198 cv
59.802 314.825 60.7613 313.614 62.1348 313.331 cv
72.1367 311.244 li
88.9113 311.244 li
98.9132 313.331 li
.701961 .694118 .678431 rgb
f
98.5724 249.126 mo
100.182 255.678 li
60.8662 255.678 li
62.4755 249.126 li
98.5724 249.126 li
.882353 .498039 .105882 rgb
f
98.0221 246.882 mo
98.5724 249.126 li
62.4755 249.126 li
63.0259 246.882 li
63.2723 245.886 63.4872 244.885 63.6759 243.884 cv
97.3721 243.884 li
97.5608 244.885 97.7757 245.886 98.0221 246.882 cv
.909804 .580392 .133333 rgb
f
62.5279 218.197 mo
98.5201 218.197 li
97.11 223.167 96.397 228.315 96.397 233.483 cv
96.397 236.954 96.7221 240.439 97.3721 243.884 cv
63.6759 243.884 li
65.2958 235.302 64.8816 226.506 62.5279 218.197 cv
.992157 .878431 .745098 rgb
f
88.9113 311.244 mo
72.1367 311.244 li
72.1367 310.238 72.5351 309.273 73.248 308.56 cv
76.8545 304.954 li
84.1934 304.954 li
87.8 308.56 li
88.5129 309.273 88.9113 310.238 88.9113 311.244 cv
.815686 .807843 .792157 rgb
f
85.7661 291.062 mo
84.7177 294.732 li
76.3303 294.732 li
75.2819 291.062 li
85.7661 291.062 li
.992157 .729412 .713726 rgb
f
85.095 295.251 mo
87.2757 298.249 86.8931 302.406 84.1934 304.954 cv
76.8545 304.954 li
75.329 303.512 74.5428 301.557 74.5428 299.586 cv
74.5428 298.076 75.0041 296.551 75.9529 295.251 cv
76.3303 294.732 li
84.7177 294.732 li
85.095 295.251 li
.784314 .698039 .694118 rgb
f
60.148 274.55 mo
100.9 274.55 li
100.156 276.972 99.0705 279.294 97.6447 281.443 cv
96.0352 283.87 li
93.6501 287.482 89.9755 290.051 85.7661 291.062 cv
75.2819 291.062 li
73.1746 290.559 71.2036 289.663 69.4632 288.441 cv
67.7228 287.22 66.2025 285.673 65.0127 283.87 cv
63.4034 281.443 li
61.9776 279.294 60.8923 276.972 60.148 274.55 cv
.564706 .00784314 .0117647 rgb
f
67.2794 316.486 mo
62.6999 316.486 li
62.6907 316.387 62.686 316.292 62.686 316.198 cv
62.686 314.825 63.535 313.614 64.7507 313.331 cv
73.6035 311.244 li
73.6035 311.244 li
78.1829 311.244 li
78.1829 311.244 li
69.3302 313.331 li
68.1146 313.614 67.2655 314.825 67.2655 316.198 cv
67.2655 316.292 67.2701 316.387 67.2794 316.486 cv
.839216 .835294 .827451 rgb
f
67.5716 274.55 mo
62.9922 274.55 li
61.9577 270.754 61.6745 266.729 62.1987 262.755 cv
62.1987 262.755 li
66.7783 262.755 li
66.7783 262.755 li
66.254 266.729 66.537 270.754 67.5716 274.55 cv
.913725 .458824 .478431 rgb
f
66.7783 262.755 mo
62.1987 262.755 li
62.3055 261.927 62.4493 261.099 62.6257 260.281 cv
63.6279 255.678 li
68.2074 255.678 li
67.2051 260.281 li
67.0288 261.099 66.885 261.927 66.7783 262.755 cv
.941176 .694118 .513725 rgb
f
68.2074 255.678 mo
63.6279 255.678 li
65.0524 249.126 li
69.6318 249.126 li
68.2074 255.678 li
.937255 .729412 .517647 rgb
f
69.6318 249.126 mo
65.0524 249.126 li
65.5395 246.882 li
65.7576 245.886 65.9478 244.885 66.1148 243.884 cv
66.1148 243.884 li
70.6943 243.884 li
70.6943 243.884 li
70.5273 244.885 70.3371 245.886 70.1189 246.882 cv
69.6318 249.126 li
.952941 .772549 .529412 rgb
f
69.6781 218.197 mo
65.0987 218.197 li
63.9572 213.647 62.3009 209.239 60.148 205.092 cv
60.148 204.369 60.4079 203.714 60.8254 203.236 cv
61.2477 202.765 61.8276 202.471 62.4678 202.471 cv
67.0474 202.471 li
66.4071 202.471 65.8272 202.765 65.405 203.236 cv
64.9874 203.714 64.7275 204.369 64.7275 205.092 cv
66.8805 209.239 68.5368 213.647 69.6781 218.197 cv
.984314 .952941 .933333 rgb
f
70.6943 243.884 mo
66.1148 243.884 li
67.5485 235.302 67.1819 226.506 65.0987 218.197 cv
65.0987 218.197 li
69.6781 218.197 li
69.6781 218.197 li
71.7615 226.506 72.128 235.302 70.6943 243.884 cv
.996078 .933333 .862745 rgb
f
78.1829 311.244 mo
73.6035 311.244 li
73.6035 310.238 73.9561 309.273 74.587 308.56 cv
77.7792 304.954 li
77.7792 304.954 li
82.3587 304.954 li
82.3587 304.954 li
79.1666 308.56 li
78.5355 309.273 78.1829 310.238 78.1829 311.244 cv
.901961 .894118 .886274 rgb
f
81.8948 294.732 mo
77.3152 294.732 li
76.3874 291.062 li
76.3874 291.062 li
80.9668 291.062 li
80.9668 291.062 li
81.8948 294.732 li
.996078 .854902 .843137 rgb
f
82.3587 304.954 mo
77.7792 304.954 li
76.429 303.512 75.7331 301.557 75.7331 299.586 cv
75.7331 298.076 76.1414 296.551 76.9812 295.251 cv
77.3152 294.732 li
81.8948 294.732 li
81.5607 295.251 li
80.7209 296.551 80.3126 298.076 80.3126 299.586 cv
80.3126 301.557 81.0086 303.512 82.3587 304.954 cv
.882353 .835294 .835294 rgb
f
80.9668 291.062 mo
76.3874 291.062 li
74.5221 290.559 72.7775 289.663 71.2372 288.441 cv
69.6968 287.22 68.3512 285.673 67.2979 283.87 cv
65.8736 281.443 li
64.6115 279.294 63.6511 276.972 62.9922 274.55 cv
62.9922 274.55 li
67.5716 274.55 li
67.5716 274.55 li
68.2305 276.972 69.191 279.294 70.4531 281.443 cv
71.8774 283.87 li
72.9305 285.673 74.2762 287.22 75.8166 288.441 cv
77.357 289.663 79.1017 290.559 80.9668 291.062 cv
.764706 .462745 .466667 rgb
f
262.37 217.378 mo
268.687 219.397 270.862 222.804 271.313 223.978 cv
271.187 227.412 269.83 229.079 268.498 229.079 cv
268.005 229.079 267.476 228.901 266.925 228.738 cv
267.712 227.988 268.252 227.066 268.252 226.154 cv
268.252 225.96 268.231 225.761 268.178 225.567 cv
267.507 222.967 264.184 222.343 262.029 220.65 cv
260.168 221.446 257.684 223.181 257.589 225.21 cv
257.453 225.205 li
255.597 225.205 254.806 226.332 254.806 228.078 cv
254.806 228.209 254.811 228.334 254.827 228.465 cv
254.056 227.616 253.579 226.652 253.579 225.567 cv
253.579 221.74 255.042 216.592 258.895 216.592 cv
260.027 216.592 261.232 216.943 262.37 217.378 cv
1 .788235 .419608 rgb
f
271.407 224.34 mo
271.407 229.215 267.607 233.12 265.216 233.12 cv
264.388 233.12 257.652 231.605 254.827 228.465 cv
254.811 228.334 254.806 228.209 254.806 228.078 cv
254.806 226.332 255.597 225.205 257.453 225.205 cv
257.589 225.21 li
257.584 225.331 li
257.584 227.344 260.378 230.405 263.272 230.405 cv
264.462 230.405 265.898 229.718 266.925 228.738 cv
267.476 228.901 268.005 229.079 268.498 229.079 cv
269.83 229.079 271.187 227.412 271.313 223.978 cv
271.376 224.151 271.407 224.272 271.407 224.34 cv
1 .87451 .419608 rgb
f
266.925 228.738 mo
265.898 229.718 264.462 230.405 263.272 230.405 cv
260.378 230.405 257.584 227.344 257.584 225.331 cv
257.589 225.21 li
257.684 223.181 260.168 221.446 262.029 220.65 cv
264.184 222.343 267.507 222.967 268.178 225.567 cv
268.231 225.761 268.252 225.96 268.252 226.154 cv
268.252 227.066 267.712 227.988 266.925 228.738 cv
1 .713726 .419608 rgb
f
252.37 302.449 mo
249.667 301.993 li
265.395 208.8 li
268.098 209.256 li
252.37 302.449 li
.25098 .592157 .486275 rgb
f
280.233 203.047 mo
280.659 202.071 280.997 201.3 281.424 200.324 cv
274.538 197.573 266.824 201.627 265.184 208.858 cv
266.23 209.06 267.184 209.076 268.23 209.278 cv
269.424 204.014 275.22 201.045 280.233 203.047 cv
cp
.203922 .478431 .384314 rgb
f
301.855 211.232 mo
280.306 202.86 li
281.256 200.414 li
302.805 208.786 li
301.855 211.232 li
cp
.25098 .592157 .486275 rgb
f
268.525 208.505 mo
265.391 207.214 li
265.929 205.909 li
269.062 207.2 li
268.525 208.505 li
cp
f
269.32 206.656 mo
266.824 204.363 li
267.762 203.343 li
270.258 205.636 li
269.32 206.656 li
cp
f
270.907 204.938 mo
268.691 202.374 li
269.724 201.481 li
271.94 204.045 li
270.907 204.938 li
cp
f
272.604 203.686 mo
271.099 200.649 li
272.487 199.962 li
273.992 202.999 li
272.604 203.686 li
cp
f
274.639 202.872 mo
274.106 199.525 li
275.556 199.294 li
276.09 202.641 li
274.639 202.872 li
cp
f
277.427 202.575 mo
277.707 199.197 li
279.26 199.325 li
278.98 202.703 li
277.427 202.575 li
cp
f
251.666 222.346 mo
252.634 228.906 250.532 232.359 249.676 233.281 cv
246.537 234.679 244.443 234.194 243.857 232.998 cv
243.64 232.556 243.567 232.002 243.47 231.436 cv
244.49 231.812 245.556 231.891 246.375 231.489 cv
246.549 231.404 246.718 231.297 246.87 231.165 cv
248.909 229.418 248.006 226.159 248.579 223.48 cv
247.044 222.159 244.392 220.692 242.529 221.5 cv
242.474 221.375 li
241.657 219.709 240.297 219.494 238.729 220.262 cv
238.612 220.32 238.501 220.38 238.39 220.452 cv
238.814 219.386 239.47 218.534 240.444 218.056 cv
243.88 216.372 249.147 215.419 250.842 218.879 cv
251.341 219.896 251.556 221.133 251.666 222.346 cv
1 .788235 .419608 rgb
f
249.392 233.525 mo
245.015 235.67 239.835 233.977 238.783 231.83 cv
238.419 231.087 236.814 224.371 238.39 220.452 cv
238.501 220.38 238.612 220.32 238.729 220.262 cv
240.297 219.494 241.657 219.709 242.474 221.375 cv
242.529 221.5 li
242.419 221.548 li
240.611 222.434 239.092 226.291 240.366 228.889 cv
240.889 229.957 242.138 230.945 243.47 231.436 cv
243.567 232.002 243.64 232.556 243.857 232.998 cv
244.443 234.194 246.537 234.679 249.676 233.281 cv
249.548 233.413 249.453 233.495 249.392 233.525 cv
1 .87451 .419608 rgb
f
243.47 231.436 mo
242.138 230.945 240.889 229.957 240.366 228.889 cv
239.092 226.291 240.611 222.434 242.419 221.548 cv
242.529 221.5 li
244.392 220.692 247.044 222.159 248.579 223.48 cv
248.006 226.159 248.909 229.418 246.87 231.165 cv
246.718 231.297 246.549 231.404 246.375 231.489 cv
245.556 231.891 244.49 231.812 243.47 231.436 cv
1 .713726 .419608 rgb
f
235.564 224.123 mo
239.394 229.537 239.08 233.567 238.733 234.776 cv
236.566 237.443 234.479 237.956 233.415 237.155 cv
233.022 236.859 232.706 236.397 232.365 235.936 cv
233.444 235.811 234.43 235.399 234.979 234.671 cv
235.096 234.516 235.199 234.344 235.274 234.158 cv
236.303 231.678 234.025 229.179 233.323 226.53 cv
231.358 226.046 228.329 225.936 227.033 227.5 cv
226.927 227.413 li
225.445 226.296 224.134 226.72 223.084 228.114 cv
223.005 228.219 222.933 228.322 222.867 228.436 cv
222.763 227.295 222.962 226.237 223.616 225.371 cv
225.919 222.315 230.185 219.084 233.262 221.403 cv
234.166 222.085 234.918 223.091 235.564 224.123 cv
1 .788235 .419608 rgb
f
238.591 235.122 mo
235.657 239.015 230.271 239.846 228.362 238.407 cv
227.701 237.909 223.233 232.645 222.867 228.436 cv
222.933 228.322 223.005 228.219 223.084 228.114 cv
224.134 226.72 225.445 226.296 226.927 227.413 cv
227.033 227.5 li
226.956 227.593 li
225.744 229.2 226.133 233.327 228.443 235.068 cv
229.394 235.785 230.954 236.101 232.365 235.936 cv
232.706 236.397 233.022 236.859 233.415 237.155 cv
234.479 237.956 236.566 237.443 238.733 234.776 cv
238.679 234.952 238.632 235.067 238.591 235.122 cv
1 .87451 .419608 rgb
f
232.365 235.936 mo
230.954 236.101 229.394 235.785 228.443 235.068 cv
226.133 233.327 225.744 229.2 226.956 227.593 cv
227.033 227.5 li
228.329 225.936 231.358 226.046 233.323 226.53 cv
234.025 229.179 236.303 231.678 235.274 234.158 cv
235.199 234.344 235.096 234.516 234.979 234.671 cv
234.43 235.399 233.444 235.811 232.365 235.936 cv
1 .713726 .419608 rgb
f
260.33 245.749 mo
253.873 247.262 250.257 245.455 249.267 244.679 cv
247.611 241.669 247.92 239.541 249.063 238.857 cv
249.485 238.604 250.031 238.485 250.587 238.342 cv
250.297 239.389 250.308 240.458 250.776 241.24 cv
250.876 241.407 250.996 241.567 251.141 241.706 cv
252.418 242.967 254.258 242.862 256.15 242.757 cv
257.089 242.705 258.04 242.653 258.942 242.768 cv
260.13 241.128 261.37 238.363 260.409 236.574 cv
260.529 236.508 li
262.121 235.555 262.222 234.182 261.325 232.684 cv
261.258 232.571 261.189 232.466 261.108 232.362 cv
262.205 232.695 263.11 233.277 263.667 234.209 cv
265.633 237.492 267.022 242.66 263.716 244.639 cv
262.744 245.22 261.529 245.538 260.33 245.749 cv
1 .788235 .419608 rgb
f
249 244.417 mo
246.496 240.234 247.751 234.932 249.802 233.704 cv
250.513 233.279 257.071 231.119 261.108 232.362 cv
261.189 232.466 261.258 232.571 261.325 232.684 cv
262.222 234.182 262.121 235.555 260.529 236.508 cv
260.409 236.574 li
260.352 236.468 li
259.318 234.741 255.349 233.549 252.866 235.035 cv
251.845 235.646 250.965 236.973 250.587 238.342 cv
250.031 238.485 249.485 238.604 249.063 238.857 cv
247.92 239.541 247.611 241.669 249.267 244.679 cv
249.124 244.563 249.035 244.476 249 244.417 cv
1 .87451 .419608 rgb
f
250.587 238.342 mo
250.965 236.973 251.845 235.646 252.866 235.035 cv
255.349 233.549 259.318 234.741 260.352 236.468 cv
260.409 236.574 li
261.37 238.363 260.13 241.128 258.942 242.768 cv
258.04 242.653 257.089 242.705 256.15 242.757 cv
254.258 242.862 252.418 242.967 251.141 241.706 cv
250.996 241.567 250.876 241.407 250.776 241.24 cv
250.308 240.458 250.297 239.389 250.587 238.342 cv
1 .713726 .419608 rgb
f
255.588 237.687 mo
249.132 239.199 245.515 237.393 244.525 236.617 cv
242.87 233.606 243.178 231.479 244.321 230.795 cv
244.744 230.542 245.289 230.423 245.845 230.279 cv
245.556 231.326 245.566 232.395 246.035 233.178 cv
246.134 233.344 246.254 233.505 246.399 233.644 cv
247.676 234.905 249.517 234.8 251.408 234.694 cv
252.347 234.642 253.299 234.59 254.201 234.705 cv
255.388 233.066 256.629 230.301 255.668 228.512 cv
255.787 228.446 li
257.38 227.493 257.48 226.119 256.584 224.622 cv
256.516 224.509 256.447 224.404 256.366 224.3 cv
257.464 224.633 258.368 225.215 258.926 226.146 cv
260.891 229.43 262.28 234.598 258.974 236.576 cv
258.003 237.158 256.788 237.476 255.588 237.687 cv
1 .788235 .419608 rgb
f
244.258 236.355 mo
241.755 232.172 243.01 226.869 245.061 225.642 cv
245.771 225.216 252.329 223.057 256.366 224.3 cv
256.447 224.404 256.516 224.509 256.584 224.622 cv
257.48 226.119 257.38 227.493 255.787 228.446 cv
255.668 228.512 li
255.61 228.406 li
254.577 226.678 250.607 225.486 248.124 226.973 cv
247.103 227.584 246.223 228.911 245.845 230.279 cv
245.289 230.423 244.744 230.542 244.321 230.795 cv
243.178 231.479 242.87 233.606 244.525 236.617 cv
244.382 236.501 244.293 236.414 244.258 236.355 cv
1 .87451 .419608 rgb
f
245.845 230.279 mo
246.223 228.911 247.103 227.584 248.124 226.973 cv
250.607 225.486 254.577 226.678 255.61 228.406 cv
255.668 228.512 li
256.629 230.301 255.388 233.066 254.201 234.705 cv
253.299 234.59 252.347 234.642 251.408 234.695 cv
249.517 234.8 247.676 234.905 246.399 233.644 cv
246.254 233.505 246.134 233.344 246.035 233.178 cv
245.566 232.395 245.556 231.326 245.845 230.279 cv
1 .713726 .419608 rgb
f
241.135 251.026 mo
235.754 249.389 233.868 246.525 233.471 245.534 cv
233.537 242.62 234.669 241.19 235.798 241.174 cv
236.216 241.169 236.667 241.314 237.136 241.445 cv
236.478 242.09 236.031 242.879 236.042 243.653 cv
236.044 243.817 236.065 243.986 236.111 244.15 cv
236.711 246.347 239.538 246.837 241.385 248.247 cv
242.954 247.549 245.041 246.048 245.097 244.326 cv
245.213 244.329 li
246.787 244.306 247.445 243.341 247.424 241.861 cv
247.422 241.749 247.416 241.643 247.401 241.532 cv
248.065 242.243 248.481 243.055 248.494 243.976 cv
248.54 247.221 247.361 251.605 244.093 251.651 cv
243.132 251.664 242.105 251.381 241.135 251.026 cv
1 .788235 .419608 rgb
f
233.387 245.229 mo
233.329 241.094 236.506 237.736 238.533 237.707 cv
239.236 237.697 244.967 238.902 247.401 241.532 cv
247.416 241.643 247.422 241.749 247.424 241.861 cv
247.445 243.341 246.787 244.306 245.213 244.329 cv
245.097 244.326 li
245.1 244.223 li
245.076 242.516 242.67 239.953 240.215 239.987 cv
239.206 240.002 237.996 240.601 237.136 241.445 cv
236.667 241.314 236.216 241.169 235.798 241.174 cv
234.669 241.19 233.537 242.62 233.471 245.534 cv
233.416 245.388 233.388 245.286 233.387 245.229 cv
1 .87451 .419608 rgb
f
237.136 241.445 mo
237.996 240.601 239.206 240.002 240.215 239.987 cv
242.67 239.953 245.076 242.516 245.1 244.223 cv
245.097 244.326 li
245.041 246.048 242.954 247.549 241.385 248.247 cv
239.538 246.837 236.711 246.347 236.111 244.15 cv
236.065 243.986 236.044 243.817 236.042 243.653 cv
236.031 242.879 236.478 242.09 237.136 241.445 cv
1 .713726 .419608 rgb
f
250.587 252.759 mo
245.205 251.123 243.319 248.258 242.923 247.268 cv
242.988 244.354 244.12 242.924 245.25 242.908 cv
245.667 242.902 246.119 243.047 246.587 243.178 cv
245.929 243.823 245.483 244.613 245.493 245.386 cv
245.496 245.551 245.516 245.719 245.563 245.883 cv
246.163 248.081 248.989 248.57 250.837 249.981 cv
252.406 249.282 254.493 247.781 254.548 246.059 cv
254.664 246.062 li
256.238 246.04 256.896 245.075 256.875 243.594 cv
256.874 243.483 256.868 243.376 256.853 243.265 cv
257.517 243.976 257.933 244.789 257.946 245.709 cv
257.991 248.955 256.812 253.339 253.544 253.385 cv
252.584 253.398 251.557 253.115 250.587 252.759 cv
1 .788235 .419608 rgb
f
242.838 246.962 mo
242.78 242.827 245.957 239.469 247.985 239.441 cv
248.687 239.431 254.419 240.636 256.853 243.265 cv
256.868 243.376 256.874 243.483 256.875 243.594 cv
256.896 245.075 256.238 246.04 254.664 246.062 cv
254.548 246.059 li
254.551 245.957 li
254.527 244.25 252.121 241.686 249.667 241.721 cv
248.657 241.735 247.447 242.335 246.587 243.178 cv
246.119 243.047 245.667 242.902 245.25 242.908 cv
244.12 242.924 242.988 244.354 242.923 247.268 cv
242.867 247.122 242.839 247.02 242.838 246.962 cv
1 .87451 .419608 rgb
f
246.587 243.178 mo
247.447 242.335 248.657 241.735 249.667 241.721 cv
252.121 241.686 254.527 244.25 254.551 245.957 cv
254.548 246.059 li
254.493 247.781 252.406 249.282 250.837 249.981 cv
248.989 248.57 246.163 248.081 245.563 245.883 cv
245.516 245.719 245.496 245.551 245.493 245.386 cv
245.483 244.613 245.929 243.823 246.587 243.178 cv
1 .713726 .419608 rgb
f
275.416 217.825 mo
275.416 217.825 li
266.652 217.825 li
267.301 213.983 li
275.573 213.983 li
275.416 217.825 li
263.871 217.825 mo
263.646 217.825 li
263.241 217.67 262.816 217.521 262.37 217.378 cv
261.232 216.943 260.027 216.592 258.895 216.592 cv
257.73 216.592 256.783 217.063 256.03 217.825 cv
250.094 217.825 li
249.169 216.903 247.833 216.538 246.369 216.538 cv
244.575 216.538 242.589 217.086 240.937 217.825 cv
237.853 217.825 li
237.747 213.983 li
228.856 213.983 li
229.015 217.825 li
220.709 217.825 li
220.552 213.983 li
264.52 213.983 li
263.871 217.825 li
.956863 .87451 .8 rgb
f
263.646 217.825 mo
256.03 217.825 li
256.03 217.825 li
256.783 217.063 257.73 216.592 258.895 216.592 cv
260.027 216.592 261.232 216.943 262.37 217.378 cv
262.816 217.521 263.241 217.67 263.646 217.825 cv
263.646 217.825 li
.956863 .768627 .513725 rgb
f
266.652 217.825 mo
263.871 217.825 li
264.52 213.983 li
267.301 213.983 li
266.652 217.825 li
.584314 .670588 .545098 rgb
f
250.094 217.825 mo
240.937 217.825 li
240.937 217.825 li
242.589 217.086 244.575 216.538 246.369 216.538 cv
247.833 216.538 249.169 216.903 250.094 217.825 cv
250.094 217.825 li
.956863 .768627 .513725 rgb
f
267.427 316.486 mo
264.083 316.486 li
264.339 309.263 li
265.875 265.712 li
266.08 259.825 268.512 254.231 272.68 250.069 cv
274.142 248.607 li
273.88 255.012 li
272.737 257.031 li
272.176 258.032 271.836 259.138 271.752 260.281 cv
267.427 316.486 li
.956863 .87451 .8 rgb
f
264.083 316.486 mo
243.228 316.486 li
242.854 309.263 li
264.339 309.263 li
264.083 316.486 li
237.116 316.486 mo
232.043 316.486 li
231.786 309.263 li
236.553 309.263 li
237.116 316.486 li
f
232.043 316.486 mo
228.698 316.486 li
224.379 260.281 li
224.29 259.138 223.949 258.032 223.388 257.031 cv
222.245 255.012 li
221.983 248.607 li
223.446 250.069 li
227.613 254.231 230.046 259.825 230.25 265.712 cv
231.786 309.263 li
232.043 316.486 li
f
264.339 309.263 mo
242.854 309.263 li
240.322 260.281 li
240.262 259.138 240.033 258.032 239.655 257.031 cv
238.887 255.012 li
238.752 250.131 li
239.458 250.453 240.249 250.756 241.135 251.026 cv
242.083 251.373 243.085 251.651 244.026 251.651 cv
244.049 251.651 244.071 251.651 244.093 251.651 cv
244.957 251.639 245.674 251.324 246.262 250.806 cv
247.358 251.518 248.774 252.208 250.587 252.759 cv
251.535 253.106 252.537 253.385 253.478 253.385 cv
253.5 253.385 253.522 253.385 253.544 253.385 cv
256.656 253.341 257.874 249.364 257.944 246.182 cv
258.322 246.134 258.713 246.075 259.116 246.002 cv
249.667 301.993 li
252.37 302.449 li
262.004 245.365 li
262.617 245.181 263.201 244.947 263.716 244.639 cv
266.925 242.718 265.71 237.791 263.838 234.501 cv
264.101 232.94 li
264.655 233.061 265.052 233.12 265.216 233.12 cv
267.607 233.12 271.407 229.215 271.407 224.34 cv
271.407 224.272 271.376 224.151 271.313 223.978 cv
271.187 227.412 269.83 229.079 268.498 229.079 cv
268.005 229.079 267.476 228.901 266.925 228.738 cv
266.925 228.738 li
267.476 228.901 268.005 229.079 268.498 229.079 cv
269.83 229.079 271.187 227.412 271.313 223.978 cv
270.977 223.103 269.683 220.988 266.432 219.132 cv
266.652 217.825 li
275.416 217.825 li
274.142 248.607 li
272.68 250.069 li
268.512 254.231 266.08 259.825 265.875 265.712 cv
264.339 309.263 li
258.907 242.763 mo
258.906 242.763 258.906 242.763 258.905 242.763 cv
258.906 242.763 258.906 242.763 258.907 242.763 cv
245.932 240.324 mo
243.194 238.54 239.157 237.707 238.542 237.707 cv
238.539 237.707 238.536 237.707 238.533 237.707 cv
238.492 237.708 238.45 237.71 238.407 237.713 cv
238.343 235.436 li
238.428 235.334 238.51 235.229 238.591 235.122 cv
238.632 235.067 238.679 234.952 238.733 234.776 cv
238.726 234.785 238.719 234.794 238.712 234.803 cv
238.719 234.794 238.726 234.785 238.733 234.776 cv
238.875 234.282 239.012 233.315 238.861 231.975 cv
239.505 233.082 241.239 234.045 243.366 234.385 cv
243.583 235.056 243.877 235.718 244.258 236.355 cv
244.293 236.414 244.382 236.501 244.525 236.617 cv
244.525 236.617 li
244.525 236.617 li
244.087 235.819 243.786 235.084 243.602 234.42 cv
243.602 234.42 li
243.786 235.084 244.087 235.819 244.525 236.617 cv
244.991 236.983 246.04 237.577 247.694 237.945 cv
247.63 238.438 247.601 238.953 247.612 239.481 cv
247.084 239.583 246.503 239.877 245.932 240.324 cv
238.338 235.24 mo
238.338 235.24 li
238.437 235.13 238.536 235.015 238.635 234.896 cv
238.536 235.015 238.437 235.13 238.338 235.24 cv
261.355 232.735 mo
261.345 232.718 261.335 232.701 261.325 232.684 cv
261.258 232.571 261.189 232.466 261.108 232.362 cv
261.058 232.346 261.008 232.332 260.957 232.317 cv
260.953 232.222 260.948 232.127 260.941 232.031 cv
261.111 232.091 261.279 232.149 261.445 232.204 cv
261.402 232.459 li
261.305 232.424 261.208 232.392 261.108 232.362 cv
261.189 232.466 261.258 232.571 261.325 232.684 cv
261.335 232.701 261.345 232.718 261.355 232.735 cv
261.355 232.735 li
239.895 226.701 mo
239.895 224.5 241.077 222.206 242.419 221.548 cv
242.529 221.5 li
242.474 221.375 li
242.474 221.375 li
242.474 221.375 li
242.529 221.5 li
242.534 221.498 242.539 221.496 242.545 221.493 cv
242.539 221.496 242.534 221.498 242.529 221.5 cv
242.419 221.548 li
241.077 222.206 239.895 224.5 239.895 226.701 cv
251.852 223.996 mo
251.812 223.469 251.75 222.919 251.666 222.346 cv
251.556 221.133 251.341 219.896 250.842 218.879 cv
250.64 218.467 250.388 218.118 250.094 217.825 cv
256.03 217.825 li
254.636 219.235 253.902 221.645 253.665 223.92 cv
253.591 223.919 253.517 223.919 253.442 223.919 cv
252.917 223.919 252.383 223.947 251.852 223.996 cv
248.579 223.48 mo
248.55 223.455 248.521 223.43 248.492 223.406 cv
248.521 223.43 248.55 223.455 248.579 223.48 cv
248.579 223.48 li
248.416 223.343 mo
248.416 223.343 li
248.416 223.343 li
237.967 221.899 mo
237.853 217.825 li
240.937 217.825 li
240.769 217.9 240.605 217.977 240.444 218.056 cv
239.47 218.534 238.814 219.386 238.39 220.452 cv
238.501 220.38 238.612 220.32 238.729 220.262 cv
238.734 220.26 238.739 220.258 238.744 220.255 cv
238.739 220.258 238.734 220.26 238.729 220.262 cv
238.612 220.32 238.501 220.38 238.39 220.452 cv
238.209 220.902 238.07 221.389 237.967 221.899 cv
242.549 221.492 mo
242.913 221.337 243.306 221.269 243.716 221.269 cv
243.307 221.269 242.913 221.337 242.549 221.492 cv
242.465 221.357 mo
242.458 221.343 242.451 221.329 242.444 221.316 cv
242.451 221.329 242.458 221.343 242.465 221.357 cv
242.434 221.296 mo
242.432 221.293 242.431 221.29 242.43 221.287 cv
242.431 221.29 242.432 221.293 242.434 221.296 cv
243.727 221.269 mo
243.724 221.269 243.721 221.269 243.717 221.269 cv
243.717 221.269 li
243.721 221.269 243.724 221.269 243.727 221.269 cv
238.815 220.222 mo
239.346 219.972 239.853 219.837 240.322 219.837 cv
239.853 219.838 239.346 219.972 238.815 220.222 cv
240.329 219.837 mo
240.328 219.837 240.327 219.837 240.326 219.837 cv
240.326 219.837 li
240.327 219.837 240.328 219.837 240.329 219.837 cv
263.858 217.907 mo
263.788 217.88 263.717 217.852 263.646 217.825 cv
263.871 217.825 li
263.858 217.907 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 500 ]ct
[38.88 0 0 93.12 237.12 189.92 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 81 
/H 194 
/M[81 0 0 -194 0 194 ]
/BC 8 
/D[0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 81 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 81 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 81 string /rs cvx /pop cvx] cvx
]
/O 2
>>
%%BeginBinary: 1
img
qOcf@je;4=pL<`(oOR`.r+5M4oOn,9YS6u,qOd#Ek+M.9pL<`(oORQ)qe#\:oOn,9YS6u,n"96Ek+M.9
pgNc'oOIK'ok"#4q.BP;YS6u,jIcIEk+M.9pgNc'oOIK'ok!`,rb)7DYS6u,ih-"=n"B*BqdAu'o4%<$
ojmZ*qe#U:\J*qnlC\!Hm%F5`nmV-!o4.H(o4@f2m1[DOiL]/'qk3MQr*T#&o3q9#oOIN(q.8P!cP,9/
je)%8rLj'qnmM&toO@H&oORc/f+ZjOiL]/'m%F;`ra5A+o3h/uoO@H&pghS^jV-UEje(n4rEf)&o3h/u
oO@H&pgh2Sn.XuUjdtV,ra#/&oNqT*nmM-!o4%H([M/NOkFL_+k+DWYoNq,rpL*o,ojRH$pLCE@r132F
jdtV,!*o,$o3V&rpgF&.nmV6$YS6PtpRUE;k+;WYo3LrooO%5uqI02.p0t6>kFDUEk+:_-o3Cono3V&r
oO.Q)q-gK@lC@F9oUY$6o3Cono3V&roO.9!rY)UOlC@%.s./2AoNUrmo3M#qo3_&rYS6;llCIjDj.>mI
oN^unoj75snmM/)]+aJ"jdl:?l(7NOoN^unoj75snmLbs`Y7X-jdkn4oUbb[o3:fkoj./qoO%T*i"OKO
m$m.-igp+@p0.&lo3Croo3V&rra=7ig_9%Dk+(G%s.9!g!*SnsoNUrmo3LuprEm\\k7d3Ok+(G%s.8sf
pKIN!oNUrmo3LuprEm;P!#"l:m$m.-igp+@pfR,jq-*]"oNUrmo3M9#^(U/Rr=eXgjdY;#r13Ubo3(]h
qcio$oN^unr*I)Mo+Uthp6t*4j.-%<qcE>jo3(`iqcil#o3D/u^(U#Nn!`@-j.-%<qcE>jo3(`io3;3!
p0@K#^(U#Nn!`s>n=/I.r13adnlPEboi^lioNV?#qcpiJo+US]l^Rd@j.-%<r)WAio2tZgo31cjq-<h1
_\2PSnsSU.q4$]>q4.C`o2bHaoN:]foNM#onIj+[o+U\_jdPV,p7(lJrDiGio2kQdo3(]hpflknfb3li
nsSU.j.#k7r`&Mio2bNcnlYKdpKH;aj:_%tnsSU.j.#k7r`&Mio2bNcnlYKdpKGoVmh54*nsSU.j.#k7
!)rJgo2YHao2kKbp0#iWlk8n'opFj/igTV2!)rVkrD`AgoiCZcnlYTga:e4[o+UeajdG+spR;.]o2PQd
qGm2ho2kKbp0#*B!#+u<opFj/igTV2o2G9\qc3Jmo2bKbo2r^>ob7?=opFj/igTV2o2G9\oMtijpK$of
o2r^>o+Undrg;f8igTV2oMY<[oMkH_r`8_nnlNO<o+UkbpR(H;igKG-oMY<[oMkH_o2bE`^(U#NpQt66
qj?B2oU>JNo2>6[o2P<]oi;&nr`?fHo+Ukbk*Z(7kF(t2p/1EZoi(H]o2YE`r`Aq/`=hbUpQt$0nX8s9
oU>MNo250Yo2G6[oMtijmh3t[o+Utdjd5%q!1<;EpJCHYohtB[o2P?^rDqtlgCj)kqNg60j-]S/qjI4T
o2,*Wo2>3Zo2PWffb3E[o+Utdjd5"pnX9;NrD3#]ohk<YoMb?\r)M#TnIkF,qNg60j-]A)qbHl]r(lr]
oMP3Xo2GNc_\2k[o+Utdjd5"pnX98Lnk]-ZqG?f]o2>0Yqc(9Bq\/c=rKZK1j-T2$r(Z`WohYH]q,$Z[
oMYK`^(U#NrfmJKjd+qnm[3oHnkSjRo2,E`p/1H[q,>!?o+V(fjd+qnm[3oHnkSjRo2,$UoMYK`^(U#N
rK[5Fm$?[um[3rHo1emQnk\pTs%r>bpeng=o+V(fn!<^6j-T2$rClfWohP'Ro2,3ZrDE>f^(U#NkEYn0
k*GA#r_)lWoM+sQnk\jRq,./h^(U#NkEYM%nWrO.r_)lWoM+sQnk\jRpJL\u`tItWkEY+or0H]9!(uiU
oh=sOo1njPp/(,hdLu-bkEXqjqj6l?!(uiUoh=sOo1njPp/'`]h%K;mkEXqjn<a*?o1J[Ko1\aMoM5!R
f+R9[o+UDRig&YlqF^TVoh4mMo1ejPo2!RCo+LX.lBL:nk*GX2r(?fXo1S^Lo1edN_%Q_[o+UDRig&Yl
oL\^JrCclXoM"jNnkQn3q%NW=lBL:nk*G^3oL\[Ir_)rXo1\dNr_C0?o+V%cnWW!tj-B=/oL\[Io1S[K
oM,<[^(U#NnWWm7j-8ShpIFjHoL\XHoh5<XoM#3X^(U#Nm$%=2l'14npIFjHoL\XHo1SjPrCm/a^(U#N
m$$q'oT\C$pdXpHo18IEoLe^Jr(R)&_%Q>Qm$$Oqs-2Q/pdXpHo18IEoLe^Jr(Og;o+USUjcf_.ifsJ.
pdXpHo18IEoLe^Jr(QesaV+1Ymul^pplt*/s-<IMo1&=AoLSRFo1JmQlOiRtfFmY9j-/kpp6>TBqaL*G
o1/FDo1AOGqb,iZq@V?mmul^pifsJ.r'^0Go1&=Ao18LFq+B<Pr=[lumul^pifsJ.r'^KPpdOdDo1/CC
oL\jNfb*cfk7[?Jif`>cr07.IogJaIpI4XBo1/FDpds-Nk7[=unr_ppj-0D*rBp6Go0iXKo1&=AoLSaK
fb*!Pr=\[`if`>cr071IogA==oL8=?o1/OGfb)jLqN:T9if`>cr071IogA==oL8ICrC6BKpINsLfFmb;
rfZB+j-0D*!($6DoL&4<o0rFDqaU9Lfb)jLooS[*o9&'rq3(eEoKr1;o0i1=nj`OIqa]<OfFmk=jcTP)
j-'5%oKi+9o0`+;oL8@@r"7ctfFmk=ifX&"l]V(-oKi+9o0`+;oL8@@nIb!tfFmk=ifWYlp6,68p-A48
o0W(:o0i7?r^Q#^oF]^gpQ+?rifX8(q3(G:o0Mt7oL&4<ogSjLgCaGtfFmq>j,i8_pQGM?qEOR:oKi(8
o0`1=rC,BOp_)NupQ+?rifWtupHS77oKi(8o0`1=rC,BOq\%`upQ+?rifWtupHJXCoK`%7o0W%9ogJaI
fb*]dkn<`Oj,i8_pQG;8oKN=?oK`"6o0W+;r']3MjV%1uqMsTsifNeppce:6pH\^Co0Mt7ogAXFfb)pN
rt>0gj,`2]oTB#6nilY0pd"aBoKi+9qa9$KfFn%@s,Z9&ifNepq`XL6o0;h3qa('EoKrFBfb)jLqMt3/
n;lRjoTB&6nicS.oKVq4r'C0Fq*NaHfFn%@l&Y_&ifNepr&jO5o02e2o0Dt7rBgHLfb)jLrJffsqN'p&
nW<]2o/uV-o02b1og&:<q@VWtfFn.Bif<JgooJX)rB'U5o0)\/o0;n5pd+?\lOhb^rJffsjGs;%nW<`2
oK2Y,nicS.ofr19j:V(tfFn.Bif<&[pQ596r]9[5o/uS,o02h3pH[CDfFn.Bif<&[nW3`2rAs[6o/lS,
nicV/p-74Bp(HBuiJllXmZ.?.o/Zk5oK2\-nicV/p-74BlOrUuiJllXmZ6s"oK)S*o/u\/o01h>i"Ghu
iJllXmZ6s"oK)\-r]B^6of_n1fb)jLrf,uuj,WPgoJlJ'o/cY.r&aR6nibY<fFmA+hi6u_oJlJ'o/cb1
q)e73nibY<fFmn:nr2Icm#L]toJuM(o/lq6pcS+1fb)jLl\te$hi6u_p,DS&o/ZG(oK3%7pH8F<fb)jL
kD]7sk)J_fp,DS&o/ZG(oK2\-!'U?Ffb)jLkD\khnVumqpGVV%oJlG&oK)V+rB0ieiXsfUlAOY\!0-0$
pGVV%oJlG&oK)V+rB0HZm1It`lAOY\oo8O%pbhY$oJcA$of;V)r&`mMp^u-klAOY\lAbb%pbhY$oJcA$
of;V)r&`RDrt=#ulAOY\k)K6p!&a@*o/?2!of2P'q`<CBoFg6ulAOY\k)K6poel_+o/?2!of2P'q`<CB
kn<Ium#'h]j,Emlnhg,!r&++)oJcD%q)R+?h@f\um#'h]j,Emlnhfqqq_n:/oJcD%q)R+?fFn+>nVZ@b
j,Eplo/#tpo/6G(q)7k(pc-q=fFm_3r/0Nmj,Eplo/#tpo/6.ur\sR1pc-q=fFmP.qhs]sj,EsloJ6"o
nhg"so/?V-q)>MimtpFhpPRsgs,?q3oJ6"onhg"so/?>%rXlIKmtp(^!/olqs,?q3oJ6"onhg"so/?>%
YS$>\jbj(qiemksN%jiXo.oqooJH+rp,;UV]+OLgj,3Vil\bh'N%jiXo.oqooJH+rp,;4K`Y%ctiecuY
q25*.o.]eko.oqooJH.si"=?Knqc:^j,3hos,6J&oJ,qmoJ?+ro/5&1g_'+5iec]Qr/:>'r@ddso.fnn
o/#qoaq<eKnqc:^j,3bmoIp%pq_7UroeQ+pnhe)nne(GKiec]Qr/:8$o.Ttpq(VIro.oqor\Utor=S^X
ieZWOq24kuo.T\hr\=1&o.oqor\UhkqM5!(ieZWOq24nuo.KYgoJ$8!p+c1prA1YionWF#k_S8Uq24nu
o.KYgoJ#kkoJ6A$YS$P`n;-[lj,*Shpal"goIfbhoJ#nl!&=C,YS$P`jbWnlj,*Shpal"goIfbhoJ#kk
r%e0^[1W.fj+m>am>1Lnq^_4go.BVfo.T\hq_@UQ^_-<qj+lrVpk\[$q^_4go.BVfo.T\hq_@4Fb7XK'
j+lWMs,$Q.r$q7fo.9Pdo.KYgq(UP8ee.Y2j+lWMpPJl!s!mRio.9Pdo.KYgq(U/-i=Yg=j+lWMpPJet
ngj;_oe#bfoIp"odh1FKqM!saieR/^r@.RmqC;(eoITScoIfnla:[YKqM!saieR/^r@.=fr@@UmoITSc
oIfnl]b0lKqM!saieR/^r[@Cfo.'_ipabndo.B\hZ4[*KqM!saieR/^r[@Cfo.'D`s"*dno.B\hYS$he
r.X<fj+d)Z!%7@do-s>^o.0A_p+<K\rIj]pnqH+YnV7)lo-j2Zod]P`p+6.np+<K\rIj<erIs9dnV?]`
oI0>\o.'A_pFQ7oYS$heie@5`lA"hao-a/YoI9A]oIKMaq@U1KrIj0amtULinV?``oI'8ZoI9A]ngj/@
_@ba[j+[Mfn:pQ^oI'8ZoI9A]ngic5bn8ofj+[,[qhFejo-X,Xo-j2ZoIBhjfb)jKiIp6FmY:Wcq^(h\
odB>Zo-s;]r[Z8+it:7'j+ZoUpE]V^q'G\\o-a,XoI9_g_\);KiIp6FmY:H]o-OA_pa5S[o-j5[r@5;h
q%;eBhh:?Mp`oAUod0Sap*TDZo-jMcYS$kel@[uIm"P3Zo-EuTo-X)Wo-jMcYS$&Nhh:?Mp`oAUod0;Y
r[.7bo-jMcYS$S]nq5hQm"P<\ng!cPoHj5Yr?h+`q^AZ\l\#.ghh:?Mq]bSUoHa&To-X;]qBu.gYS$/P
pOhgbk(NXUnfm`Oo-EoRoHsG_s!P#_l@SATpOhU]r#tVTocs&Ro-O#Uq'YqL\In+Yie%5akCidVo-*cN
ng!`OoHj8Zm1I8Kl@S#Jon;mhr?1\TocirOo-ErSpa4u4cOoMpj+?HHrIb(koH<cLoHNiNo-F&Vf+H^K
m"+2Kj+I=Qr?1kXoHEiNng!`OpEe#qjUpj1j+?<D!$:_RrZLtYo-*]Lng!iR_%H/Km"+2Kj+@=Qo,mWJ
ruq%Yo-3`Mp*@'Xq[i+Fj+?<Do,dQHo-!WJoHNlOYRp__oRPtQie%2_o,dQHo-!`MrZUnXo-:INnUUXi
j+63As+BqaocE]HoH<lOr?:_UYRp8Rpjqd_ie%2_oH!TGo,mTIo-*rSq'*$SmsseVpOV=Us+C"boH!QF
o,mQHoHF2XrXcCImssGL!.s6_s+C"boH!QFo,mQHoHF2XYRpATidg'?r.=V^oH!QFo,mQHoHF2Xp(4hI
npfYLp4;X_r.=Y^oGmKDo,dKFoH=)UlO_&InpfYLl[ek_r.=Y^oGmKDo,dKFoH=)Ui"49InpfYLj+72]
s+:"aoc*KBo,[HEo,mlQeI^LInpfYLj+7,[p_rfEo,R?BoH*TGr#j,nk7I<8id^!=q18D\o,@3>oGmHC
o,dcN^C]rIomYnMj+-rVq\euDp)EuMoGmHCo,dcNZk30IomYnMj+-rVr##&Do,@?Br>Y>JoH!`KYRpY[
r-mXTj+-rVr##&Do,@3>qAf>OoH!`KYRpPWq0qXYid^]Qr>5,Do,7*;o,ITIq&K/MYRpPWmXFkYid^]Q
r>5,Do,7*;o,I<ArZ1kVYRpPWj*p!;pON5Yob[3:oGR3<o,IEDr"-7IpO2(Np4)IZpON5Yob[3:oGR3<
o,IEDnIWJIpO2(Nl[S\ZpOE5YoG7'8o,.':nf%3@jq,]IqL%=OidUfTq0rAZoG7'8o,.':nf%3@gCVpI
qL%=OidUNLrY>/BoG7$7o,.*;o,>sei=Pj5j*fp9oRHKJoG7$7o,.*;o,?'hh@TO2j*fp9oRHQLrtY/A
o,%!8oGR6=a:RSIqL%=OidUNLoG.-:r>+u@o,.*;o,>:RoFUkHj*fp9oRHKJoG79>qA8`?oGR6=Z4R$I
qL%=OidUNLoG.!6o,%?BpDEN?o,=hEqL&<kjaH-;oRHKJoG7$7o,%HFobm?>YRpYYoR64WidUNLoG.!6
o,%!8obd`Io,=hEqL%OUqgIIQoRHKJoG7$7o,.*;pDWuKYRpYYj*giSkC3&QoG.!6o,%!8oGR6=q@L+I
qL%=OnUC%XoRHKJoG7$7o,.*;o,@'/_@ZQkj*g'=rI4BgoG.!6o,%!8oGR6=j:KQIJ,~>

%%EndBinary
grestore
np
268.498 229.079 mo
268.005 229.079 267.476 228.901 266.925 228.738 cv
267.712 227.988 268.252 227.066 268.252 226.154 cv
268.252 226.154 li
268.252 226.154 li
268.252 225.96 268.231 225.761 268.178 225.567 cv
267.856 224.319 266.924 223.527 265.804 222.853 cv
266.432 219.132 li
269.683 220.988 270.977 223.103 271.313 223.978 cv
271.187 227.412 269.83 229.079 268.498 229.079 cv
256.9 225.242 mo
256.815 225.038 256.709 224.831 256.584 224.622 cv
256.516 224.509 256.447 224.404 256.366 224.3 cv
255.547 224.047 254.623 223.935 253.665 223.92 cv
253.902 221.645 254.636 219.235 256.03 217.825 cv
263.646 217.825 li
263.717 217.852 263.788 217.88 263.858 217.907 cv
263.258 221.463 li
262.826 221.214 262.409 220.948 262.029 220.65 cv
260.278 221.399 257.974 222.98 257.63 224.855 cv
257.25 224.622 256.825 224.439 256.366 224.3 cv
256.447 224.404 256.516 224.509 256.584 224.622 cv
256.709 224.831 256.815 225.038 256.9 225.242 cv
256.9 225.242 li
level3{
gsave
clp
[4.20873e-009 -93.7428 93.7428 4.20873e-009 248.063 309.674 ]ct
/0 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.533333 .137255 .0901961 ]
/C1 [.533333 .137255 .0901961 ]
/N 1 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.533333 .137255 .0901961 ]
/C1 [.670588 .443137 .101961 ]
/N 1 
>>
]
/Bounds [.0517977 ]
/Encode [0 1 0 1 ]
>>
>>/Gradient add_res /0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.20873e-009 -93.7428 93.7428 4.20873e-009 248.063 309.674 ]ct
clp
/0 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~LPLY?LPLY?LPLY?LPL\ALkpkCLl$tFM2@(GMMd:KMMd:LMi3LOMi3OQN/W^SNK&pWNK&pXNfK-[NfK0]
O,o?_O-#HbOH>QcOcbcgOcbchP*1ukP*2#mPEV2oPE_;rPa%DsQ'IW"Q'IW#QBmi&QBml(Q^=&*Q^F/-
R$a8.R@0J2R@0J3R[T\6R[T_8S"#n:S=H+>S=H+?SXl=BSXl@DSt;OFStDXIT:_aJTV.sNTV.sOTqS0R
TqS3TU8"BVU8+KYUSFTZUnjf^Unjf_V5:#bV5:&dVP^5fVPg>iVl-GjW2QYnW2QYoWMukrWMuntWiE)!
~>
<~+sJ3T+sJ3T+sJ3T+sJ6V,:"N[,paia-71)f-R^Ak.4H\p.Olnu.k</%/1iG*/hSb00/#"50JP::1,:U?
1G^gD1c.'I2)[?N2`EZT3&ioY3BB2^4$,Mc4?P_h4Zttm5!M7r5X7S#5s[h(6:4+-6psF277BX77Rfm<
7n?0A8P)KG8kM`L92&#Q9he>V:/4P[:JXe`:f1(e;GpCk;c?Xp<)lpu<`W7%='&I*=BJ^/=^#!4>?b<:
>[1Q??!^iD?XI/I?smAN@:<VS@UinXA7T4^AS#IcAnPahBP;'mBk_9rC2.O"CM[g'D/F--DJjB2DfBZ7
~>
<~()@Z$()@Z$()@Z$()@]&(Ddl((Ddl((Ddl((Ddl((Ddl((Ddl((Ddl((Ddl((Ddl((Ddl((Ddl((Ddl(
(Ddl((Ddl((Ddl((Ddl((Ddl((Ddl((Ddl((Ddl)(`4),(`4),(`4),(`4),(`4),(`4),(`4),(`4),
(`4),(`4),(`4),(`4),(`4),(`4),(`4),(`4),(`4),(`4),(`4),(`4),)&X;0)&X;0)&X;0)&X;0
)&X;0)&X;0)&X;0)&X;0)&X;0)&X;0)&X;0)&X;0)&X;0)&X;0)&X;0)&X;0)&X;0)&X;0)&X;0)&X;0
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /0 /Gradient get_res exec grestore
}if
np
265.216 233.12 mo
265.052 233.12 264.655 233.061 264.101 232.94 cv
264.568 230.175 li
265.406 229.895 266.253 229.379 266.925 228.738 cv
266.925 228.738 li
267.476 228.901 268.005 229.079 268.498 229.079 cv
269.83 229.079 271.187 227.412 271.313 223.978 cv
271.376 224.151 271.407 224.272 271.407 224.34 cv
271.407 229.215 267.607 233.12 265.216 233.12 cv
261.445 232.204 mo
261.279 232.149 261.111 232.091 260.941 232.031 cv
260.882 231.2 260.699 230.335 260.432 229.487 cv
260.86 229.763 261.317 229.991 261.791 230.151 cv
261.445 232.204 li
level3{
gsave
clp
[4.20873e-009 -93.7428 93.7428 4.20873e-009 248.063 309.674 ]ct
/1 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.533333 .145098 .0901961 ]
/C1 [.533333 .145098 .0901961 ]
/N 1 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.533333 .145098 .0901961 ]
/C1 [.670588 .45098 .101961 ]
/N 1 
>>
]
/Bounds [.0517977 ]
/Encode [0 1 0 1 ]
>>
>>/Gradient add_res /1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.20873e-009 -93.7428 93.7428 4.20873e-009 248.063 309.674 ]ct
clp
/1 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~LPLY?LPLY?LPLY?LPL\ALkpkCLl$tFM2@(GMMd:KMMd:LMi3LOMi3OQN/W^SNK&pWNK&pXNfK-[NfK0]
O,o?_O-#HbOH>QcOcbcgOcbchP*1ukP*2#mPEV2oPE_;rPa%DsQ'IW"Q'IW#QBmi&QBml(Q^=&*Q^F/-
R$a8.R@0J2R@0J3R[T\6R[T_8S"#n:S=H+>S=H+?SXl=BSXl@DSt;OFStDXIT:_aJTV.sNTV.sOTqS0R
TqS3TU8"BVU8+KYUSFTZUnjf^Unjf_V5:#bV5:&dVP^5fVPg>iVl-GjW2QYnW2QYoWMukrWMuntWiE)!
~>
<~,U=W\,U=W\,U=W\,U=Z^,pjrc-RU8i-n$Mn.4Qes.k<,#/1`>(/M/S-/h\k20JG180ekF=1,C^B1c.$G
2)R6L2E!KQ2`NcV3B9)\3]]>a4$5Vf4Ztqk5!D.p5<hCu5X@\%6:+"+6UO706q'O57Rfj:7n6'?84Z<D
8P2TI91qoO9MA/T9hnGY:JXb^:f'tc;,L4h;H$Lm<)cgs<E3(#<``@(=BJ[-=]nm2>$>-7>?kE<?!U`B
?=$uG?XR8L@:<SQ@U`eV@q0%[A7]=`AnGXfB4kmkBPD0pC2.KuCMR^%Ci!s*D/O6/Df9Q5E,]f:EH6)?
~>
<~()@Z$()@Z$()@Z$()@]&(Ddl((Ddl((Ddl((Ddl((Ddl((Ddl((Ddl((Ddl((Ddl((Ddl((Ddl((Ddl(
(Ddl((Ddl((Ddl((Ddl((Ddl((Ddl((Ddl((Ddl)(`4),(`4),(`4),(`4),(`4),(`4),(`4),(`4),
(`4),(`4),(`4),(`4),(`4),(`4),(`4),(`4),(`4),(`4),(`4),(`4),)&X;0)&X;0)&X;0)&X;0
)&X;0)&X;0)&X;0)&X;0)&X;0)&X;0)&X;0)&X;0)&X;0)&X;0)&X;0)&X;0)&X;0)&X;0)&X;0)&X;0
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /1 /Gradient get_res exec grestore
}if
np
264.568 230.175 mo
265.804 222.853 li
266.924 223.527 267.856 224.319 268.178 225.567 cv
268.231 225.761 268.252 225.96 268.252 226.154 cv
268.252 226.154 li
268.252 227.066 267.712 227.988 266.925 228.738 cv
266.925 228.738 li
266.925 228.738 li
266.253 229.379 265.406 229.895 264.568 230.175 cv
261.791 230.151 mo
261.317 229.991 260.86 229.763 260.432 229.487 cv
260.057 228.294 259.518 227.135 258.926 226.146 cv
258.601 225.604 258.159 225.18 257.63 224.855 cv
257.974 222.98 260.278 221.399 262.029 220.65 cv
262.409 220.948 262.826 221.214 263.258 221.463 cv
261.791 230.151 li
level3{
gsave
clp
[4.20873e-009 -93.7428 93.7428 4.20873e-009 248.063 309.674 ]ct
/2 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.533333 .129412 .0901961 ]
/C1 [.533333 .129412 .0901961 ]
/N 1 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.533333 .129412 .0901961 ]
/C1 [.670588 .435294 .101961 ]
/N 1 
>>
]
/Bounds [.0517977 ]
/Encode [0 1 0 1 ]
>>
>>/Gradient add_res /2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.20873e-009 -93.7428 93.7428 4.20873e-009 248.063 309.674 ]ct
clp
/2 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~LPLY?LPLY?LPLY?LPL\ALkpkCLl$tFM2@(GMMd:KMMd:LMi3LOMi3OQN/W^SNK&pWNK&pXNfK-[NfK0]
O,o?_O-#HbOH>QcOcbcgOcbchP*1ukP*2#mPEV2oPE_;rPa%DsQ'IW"Q'IW#QBmi&QBml(Q^=&*Q^F/-
R$a8.R@0J2R@0J3R[T\6R[T_8S"#n:S=H+>S=H+?SXl=BSXl@DSt;OFStDXIT:_aJTV.sNTV.sOTqS0R
TqS3TU8"BVU8+KYUSFTZUnjf^Unjf_V5:#bV5:&dVP^5fVPg>iVl-GjW2QYnW2QYoWMukrWMuntWiE)!
~>
<~+<VdL+<VdL+<VdL+<VgN+X/*S,9nEY,U=Z^,pjrc-RU8h-n$Jm.4H_r.P!#"/1`>(/M/S-/h\k20JG17
0ekC<1,:XA1GgpF2)R6L2E!KQ2`NcV3B9)[3]];`4$,Pe4?Yhj5!D.p5<hCu5X@\%6:+"*6UO4/6psI4
77Ka97n6'?84Z<D8P2TI91qoN9MA,S9heAX:/=Y]:f'tc;,L4h;H$Lm<)cgr<E3%"<`W:'='/R,=]nm2
>$>-7>?kE<?!U`A?=$rF?XI2K?t!JP@U`eV@q0%[A7]=`AnGXeB4kjjBP;*oBkhBtCMR^%Ci!s*D/O6/
~>
<~()@Z$()@Z$()@Z$()@]&(Ddl((Ddl((Ddl((Ddl((Ddl((Ddl((Ddl((Ddl((Ddl((Ddl((Ddl((Ddl(
(Ddl((Ddl((Ddl((Ddl((Ddl((Ddl((Ddl((Ddl)(`4),(`4),(`4),(`4),(`4),(`4),(`4),(`4),
(`4),(`4),(`4),(`4),(`4),(`4),(`4),(`4),(`4),(`4),(`4),(`4),)&X;0)&X;0)&X;0)&X;0
)&X;0)&X;0)&X;0)&X;0)&X;0)&X;0)&X;0)&X;0)&X;0)&X;0)&X;0)&X;0)&X;0)&X;0)&X;0)&X;0
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /2 /Gradient get_res exec grestore
}if
np
252.37 302.449 mo
249.667 301.993 li
259.116 246.002 li
259.509 245.93 259.914 245.847 260.33 245.749 cv
260.894 245.65 261.461 245.527 262.004 245.365 cv
252.37 302.449 li
263.838 234.501 mo
263.782 234.402 263.725 234.304 263.667 234.209 cv
263.161 233.362 262.367 232.803 261.402 232.459 cv
261.445 232.204 li
261.791 230.151 li
263.258 221.463 li
263.858 217.907 li
263.871 217.825 li
266.652 217.825 li
266.432 219.132 li
265.804 222.853 li
264.568 230.175 li
264.101 232.94 li
263.838 234.501 li
level3{
gsave
clp
[4.20873e-009 -93.7428 93.7428 4.20873e-009 248.063 309.674 ]ct
/3 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.454902 .117647 .0941176 ]
/C1 [.454902 .117647 .0941176 ]
/N 1 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.454902 .117647 .0941176 ]
/C1 [.592157 .423529 .109804 ]
/N 1 
>>
]
/Bounds [.0517977 ]
/Encode [0 1 0 1 ]
>>
>>/Gradient add_res /3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.20873e-009 -93.7428 93.7428 4.20873e-009 248.063 309.674 ]ct
clp
/3 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~F)uDDF)uDDF)uDDF)uGFFEDVHFEM_KF`hhLG'8%PG'8%QGB\7TGB\:VG^+IXH$O[\H$O[]H?sm`H?spb
H[C*dH[L3gI!g<hI=6NlI=6NmIXZ`pIXZcrIt)rtIt3'"J:N0#JUrB'JUrB(JqAT+JqAW-K7ef/K7no2
KS5#3KnY57KnY58L5(G;L5(J=LPLY?LkpkCLkpkDM2@(GM2@+IMMd:KMMmCNMi3LON/W^SN/W^TNK&pW
NK&sYNfK-[NfT6^O,o?_OH>QcOH>QdOcbcgOcbfiP*1ukP*;)nPEV2oPa%DsPa%DtQ'IW"Q'IZ$QBmi&
~>
<~*??.@*??.@*??.@*??1B*ZlIG+<VdM+X&$R+sS<W,U=W\,paia-71)f-R^Ak.4H\q.Olr!.kE5&/M/P+
/hSb00/#"50JP::1,:U@1G^jE1c7-J2E!HO2`EZT3&ioY3BB2^4$,Md4?Pbi4[)%n5<h@s5X7S#5s[h(
6:4+-6psF377B[87Ros=84Z9B8P)KG8kM`L92&#Q9he>W:/4S\:Jaka;,L1f;GpCk;c?Xp<)lpu<`W7&
='&L+=BSd0>$>*5>?b<:>[1Q??!^iD?XI/J?smDO@:E\T@q0"YA7T4^AS#IcAnPahBP;'nBk_<sC27U#
~>
<~(Ddl((Ddl((Ddl((Ddo*(`4),(`4),(`4),(`4),(`4),(`4),(`4),(`4),(`4),(`4),(`4),(`4),
(`4),(`4),(`4,.)&X;0)&X;0)&X;0)&X;0)&X;0)&X;0)&X;0)&X;0)&X;0)&X;0)&X;0)&X;0)&X;0
)&X;0)&X;1)B'M4)B'M4)B'M4)B'M4)B'M4)B'M4)B'M4)B'M4)B'M4)B'M4)B'M4)B'M4)B'M4)B'M4
)B'M4)]K_8)]K_8)]K_8)]K_8)]K_8)]K_8)]K_8)]K_8)]K_8)]K_8)]K_8)]K_8)]K_8)]K_8)]K_8
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /3 /Gradient get_res exec grestore
}if
np
248.419 224.571 mo
248.453 224.201 248.503 223.835 248.579 223.48 cv
248.579 223.48 li
248.579 223.48 li
248.55 223.455 248.521 223.43 248.492 223.406 cv
248.467 223.385 248.442 223.364 248.416 223.343 cv
248.416 223.343 li
247.184 222.327 245.337 221.273 243.727 221.269 cv
243.724 221.269 243.721 221.269 243.717 221.269 cv
243.717 221.269 li
243.717 221.269 li
243.717 221.269 243.716 221.269 243.716 221.269 cv
243.306 221.269 242.913 221.337 242.549 221.492 cv
242.548 221.492 242.546 221.493 242.545 221.493 cv
242.539 221.496 242.534 221.498 242.529 221.5 cv
242.474 221.375 li
242.474 221.375 li
242.471 221.369 242.468 221.363 242.465 221.357 cv
242.458 221.343 242.451 221.329 242.444 221.316 cv
242.441 221.309 242.437 221.302 242.434 221.296 cv
242.432 221.293 242.431 221.29 242.43 221.287 cv
241.91 220.284 241.183 219.838 240.329 219.837 cv
240.328 219.837 240.327 219.837 240.326 219.837 cv
240.326 219.837 li
240.326 219.837 li
240.324 219.837 240.323 219.837 240.322 219.837 cv
239.853 219.837 239.346 219.972 238.815 220.222 cv
238.791 220.233 238.768 220.244 238.744 220.255 cv
238.739 220.258 238.734 220.26 238.729 220.262 cv
238.612 220.32 238.501 220.38 238.39 220.452 cv
238.814 219.386 239.47 218.534 240.444 218.056 cv
240.605 217.977 240.769 217.9 240.937 217.825 cv
250.094 217.825 li
250.388 218.118 250.64 218.467 250.842 218.879 cv
251.341 219.896 251.556 221.133 251.666 222.346 cv
251.75 222.919 251.812 223.469 251.852 223.996 cv
250.648 224.107 249.459 224.326 248.419 224.571 cv
level3{
gsave
clp
[4.20873e-009 -93.7428 93.7428 4.20873e-009 248.063 309.674 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.20873e-009 -93.7428 93.7428 4.20873e-009 248.063 309.674 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
243.366 234.385 mo
241.239 234.045 239.505 233.082 238.861 231.975 cv
238.766 231.131 238.558 230.139 238.165 229.022 cv
237.967 221.899 li
238.07 221.389 238.209 220.902 238.39 220.452 cv
238.501 220.38 238.612 220.32 238.729 220.262 cv
238.734 220.26 238.739 220.258 238.744 220.255 cv
238.768 220.244 238.791 220.233 238.815 220.222 cv
239.346 219.972 239.853 219.838 240.322 219.837 cv
240.323 219.837 240.324 219.837 240.326 219.837 cv
240.326 219.837 li
240.327 219.837 240.328 219.837 240.329 219.837 cv
241.183 219.838 241.91 220.284 242.43 221.287 cv
242.431 221.29 242.432 221.293 242.434 221.296 cv
242.437 221.302 242.441 221.309 242.444 221.316 cv
242.451 221.329 242.458 221.343 242.465 221.357 cv
242.468 221.363 242.471 221.369 242.474 221.375 cv
242.474 221.375 li
242.529 221.5 li
242.419 221.548 li
241.077 222.206 239.895 224.5 239.895 226.701 cv
239.894 227.465 240.037 228.219 240.366 228.889 cv
240.809 229.794 241.774 230.641 242.868 231.178 cv
242.866 232.216 243.017 233.31 243.366 234.385 cv
level3{
gsave
clp
[4.20873e-009 -93.7428 93.7428 4.20873e-009 248.063 309.674 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.20873e-009 -93.7428 93.7428 4.20873e-009 248.063 309.674 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
242.868 231.178 mo
241.774 230.641 240.809 229.794 240.366 228.889 cv
240.037 228.219 239.894 227.465 239.895 226.701 cv
239.895 224.5 241.077 222.206 242.419 221.548 cv
242.529 221.5 li
242.534 221.498 242.539 221.496 242.545 221.493 cv
242.546 221.493 242.548 221.492 242.549 221.492 cv
242.913 221.337 243.307 221.269 243.716 221.269 cv
243.716 221.269 243.717 221.269 243.717 221.269 cv
243.717 221.269 li
243.721 221.269 243.724 221.269 243.727 221.269 cv
245.337 221.273 247.184 222.327 248.416 223.343 cv
248.416 223.343 li
248.442 223.364 248.467 223.385 248.492 223.406 cv
248.521 223.43 248.55 223.455 248.579 223.48 cv
248.579 223.48 li
248.503 223.835 248.453 224.201 248.419 224.571 cv
246.683 224.981 245.359 225.463 245.061 225.642 cv
243.823 226.383 242.874 228.609 242.868 231.178 cv
level3{
gsave
clp
[4.20873e-009 -93.7428 93.7428 4.20873e-009 248.063 309.674 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.20873e-009 -93.7428 93.7428 4.20873e-009 248.063 309.674 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
238.338 235.24 mo
238.165 229.022 li
238.558 230.139 238.766 231.131 238.861 231.975 cv
239.012 233.315 238.875 234.282 238.733 234.776 cv
238.726 234.785 238.719 234.794 238.712 234.803 cv
238.686 234.834 238.661 234.865 238.635 234.896 cv
238.536 235.015 238.437 235.13 238.338 235.24 cv
level3{
gsave
clp
[4.20873e-009 -93.7428 93.7428 4.20873e-009 248.063 309.674 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.20873e-009 -93.7428 93.7428 4.20873e-009 248.063 309.674 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
238.343 235.436 mo
238.338 235.24 li
238.437 235.13 238.536 235.015 238.635 234.896 cv
238.661 234.865 238.686 234.834 238.712 234.803 cv
238.719 234.794 238.726 234.785 238.733 234.776 cv
238.679 234.952 238.632 235.067 238.591 235.122 cv
238.51 235.229 238.428 235.334 238.343 235.436 cv
level3{
gsave
clp
[4.20873e-009 -93.7428 93.7428 4.20873e-009 248.063 309.674 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.20873e-009 -93.7428 93.7428 4.20873e-009 248.063 309.674 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
257.944 246.182 mo
257.947 246.022 257.948 245.864 257.946 245.709 cv
257.933 244.789 257.517 243.976 256.853 243.265 cv
256.868 243.376 256.874 243.483 256.875 243.594 cv
256.875 243.617 256.876 243.64 256.876 243.663 cv
256.876 243.64 256.875 243.617 256.875 243.594 cv
256.874 243.483 256.868 243.376 256.853 243.265 cv
256.687 243.086 256.506 242.914 256.312 242.748 cv
256.783 242.722 257.257 242.699 257.725 242.699 cv
258.124 242.699 258.519 242.716 258.905 242.763 cv
258.906 242.763 258.906 242.763 258.907 242.763 cv
258.919 242.765 258.93 242.766 258.942 242.768 cv
259.833 241.538 260.753 239.675 260.753 238.066 cv
260.752 237.529 260.65 237.021 260.409 236.574 cv
260.529 236.508 li
261.471 235.944 261.891 235.233 261.891 234.436 cv
261.891 233.901 261.702 233.328 261.355 232.735 cv
261.345 232.718 261.335 232.701 261.325 232.684 cv
261.258 232.571 261.189 232.466 261.108 232.362 cv
261.208 232.392 261.305 232.424 261.402 232.459 cv
262.367 232.803 263.161 233.362 263.667 234.209 cv
263.725 234.304 263.782 234.402 263.838 234.501 cv
265.71 237.791 266.925 242.718 263.716 244.639 cv
263.201 244.947 262.617 245.181 262.004 245.365 cv
261.461 245.527 260.894 245.65 260.33 245.749 cv
259.914 245.847 259.509 245.93 259.116 246.002 cv
258.713 246.075 258.322 246.134 257.944 246.182 cv
level3{
gsave
clp
[4.20873e-009 -93.7428 93.7428 4.20873e-009 248.063 309.674 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.20873e-009 -93.7428 93.7428 4.20873e-009 248.063 309.674 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
248.24 242.061 mo
248.24 242.061 li
248.723 241.851 249.215 241.727 249.667 241.721 cv
249.683 241.721 249.699 241.721 249.716 241.721 cv
249.699 241.721 249.683 241.721 249.667 241.721 cv
249.215 241.727 248.723 241.851 248.24 242.061 cv
249.723 241.721 mo
249.721 241.721 249.718 241.721 249.716 241.721 cv
249.716 241.721 li
249.718 241.721 249.721 241.721 249.723 241.721 cv
level3{
gsave
clp
[4.20873e-009 -93.7428 93.7428 4.20873e-009 248.063 309.674 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.20873e-009 -93.7428 93.7428 4.20873e-009 248.063 309.674 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
238.484 240.473 mo
238.484 240.473 li
239.061 240.175 239.668 239.995 240.215 239.987 cv
240.232 239.987 240.248 239.987 240.264 239.987 cv
240.248 239.987 240.232 239.987 240.215 239.987 cv
239.668 239.995 239.061 240.175 238.484 240.473 cv
240.279 239.987 mo
240.274 239.987 240.269 239.987 240.264 239.987 cv
240.264 239.987 li
240.269 239.987 240.274 239.987 240.279 239.987 cv
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 500 ]ct
[3.36 0 0 1.92 237.6 259.04 ]ct
snap_to_device
<<
/T 1
/W 7 
/H 4 
/M[7 0 0 -4 0 4 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 ]
/DS 
[
<~QBmi&QBml'QBmi&QC!l%Q'R`%QBd`#QBmi&~>
<~:/4PZ:/=Y\:/4PZ:JX\Z9heAX:/+GW9hnGY~>
<~&eYfi&eYfi&eYfi&eYfi&eYfi&eYfi&eYfi~>
]
/O 2
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
250.4 239.937 mo
249.59 239.711 248.899 239.564 248.453 239.492 cv
248.61 239.218 248.817 239.004 249.063 238.857 cv
249.485 238.604 250.031 238.485 250.587 238.342 cv
250.461 238.796 250.392 239.254 250.392 239.691 cv
250.392 239.774 250.395 239.856 250.4 239.937 cv
level3{
gsave
clp
[4.20873e-009 -93.7428 93.7428 4.20873e-009 248.063 309.674 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.20873e-009 -93.7428 93.7428 4.20873e-009 248.063 309.674 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
248.316 226.864 mo
248.316 226.864 li
249.063 226.469 249.927 226.299 250.798 226.298 cv
249.927 226.299 249.063 226.47 248.316 226.864 cv
level3{
gsave
clp
[4.20873e-009 -93.7428 93.7428 4.20873e-009 248.063 309.674 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.20873e-009 -93.7428 93.7428 4.20873e-009 248.063 309.674 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
248.147 226.959 mo
248.203 226.926 248.259 226.895 248.316 226.864 cv
248.316 226.864 li
248.259 226.895 248.203 226.926 248.147 226.959 cv
level3{
gsave
clp
[4.20873e-009 -93.7428 93.7428 4.20873e-009 248.063 309.674 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.20873e-009 -93.7428 93.7428 4.20873e-009 248.063 309.674 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
248.453 239.492 mo
248.239 239.458 248.081 239.441 247.994 239.441 cv
247.991 239.441 247.988 239.441 247.985 239.441 cv
247.864 239.443 247.74 239.456 247.612 239.481 cv
247.601 238.953 247.63 238.438 247.694 237.945 cv
248.515 238.128 249.485 238.255 250.607 238.271 cv
250.6 238.294 250.593 238.318 250.587 238.342 cv
250.587 238.342 li
250.031 238.485 249.485 238.604 249.063 238.857 cv
248.817 239.004 248.61 239.218 248.453 239.492 cv
260.409 236.574 mo
260.352 236.468 li
260.352 236.468 li
260.227 236.258 260.058 236.056 259.853 235.866 cv
260.701 234.945 261.007 233.685 260.957 232.317 cv
261.008 232.332 261.058 232.346 261.108 232.362 cv
261.189 232.466 261.258 232.571 261.325 232.684 cv
261.335 232.701 261.345 232.718 261.355 232.735 cv
261.702 233.328 261.891 233.901 261.891 234.436 cv
261.891 235.233 261.471 235.944 260.529 236.508 cv
260.409 236.574 li
level3{
gsave
clp
[4.20873e-009 -93.7428 93.7428 4.20873e-009 248.063 309.674 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.20873e-009 -93.7428 93.7428 4.20873e-009 248.063 309.674 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
258.942 242.768 mo
258.93 242.766 258.919 242.765 258.907 242.763 cv
258.906 242.763 258.906 242.763 258.905 242.763 cv
258.519 242.716 258.124 242.699 257.725 242.699 cv
257.257 242.699 256.783 242.722 256.312 242.748 cv
254.712 241.377 252.246 240.452 250.4 239.937 cv
250.395 239.856 250.392 239.774 250.392 239.691 cv
250.392 239.254 250.461 238.796 250.587 238.342 cv
250.593 238.318 250.6 238.294 250.607 238.271 cv
250.686 238.272 250.765 238.272 250.845 238.272 cv
252.208 238.272 253.788 238.108 255.588 237.687 cv
256.788 237.476 258.003 237.158 258.974 236.576 cv
259.316 236.372 259.607 236.133 259.853 235.866 cv
260.058 236.056 260.227 236.258 260.352 236.468 cv
260.352 236.468 li
260.409 236.574 li
260.65 237.021 260.752 237.529 260.753 238.066 cv
260.753 239.675 259.833 241.538 258.942 242.768 cv
254.201 234.705 mo
254.18 234.703 254.16 234.7 254.14 234.698 cv
254.16 234.7 254.18 234.703 254.201 234.705 cv
level3{
gsave
clp
[4.20873e-009 -93.7428 93.7428 4.20873e-009 248.063 309.674 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.20873e-009 -93.7428 93.7428 4.20873e-009 248.063 309.674 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
250.845 238.272 mo
250.765 238.272 250.686 238.272 250.607 238.271 cv
250.607 238.271 li
249.485 238.255 248.515 238.128 247.694 237.945 cv
246.04 237.577 244.991 236.983 244.525 236.617 cv
244.087 235.819 243.786 235.084 243.602 234.42 cv
243.446 233.856 243.374 233.345 243.373 232.892 cv
243.373 231.867 243.738 231.143 244.321 230.795 cv
244.744 230.542 245.289 230.423 245.845 230.279 cv
245.72 230.733 245.65 231.192 245.651 231.629 cv
245.651 232.2 245.769 232.735 246.035 233.178 cv
246.134 233.344 246.254 233.505 246.399 233.644 cv
246.412 233.657 246.425 233.669 246.438 233.682 cv
246.443 233.687 246.448 233.692 246.453 233.697 cv
246.454 233.697 246.454 233.697 246.454 233.697 cv
246.473 233.715 246.492 233.733 246.512 233.75 cv
247.42 234.571 248.592 234.753 249.857 234.753 cv
250.363 234.753 250.884 234.724 251.408 234.695 cv
251.933 234.665 252.462 234.636 252.983 234.636 cv
253.374 234.636 253.762 234.653 254.14 234.698 cv
254.16 234.7 254.18 234.703 254.201 234.705 cv
254.201 234.705 li
255.091 233.476 256.012 231.613 256.011 230.004 cv
256.011 229.467 255.908 228.959 255.668 228.512 cv
255.787 228.446 li
256.73 227.882 257.15 227.171 257.149 226.374 cv
257.149 226.012 257.063 225.633 256.9 225.242 cv
256.815 225.038 256.709 224.831 256.584 224.622 cv
256.516 224.509 256.447 224.404 256.366 224.3 cv
256.825 224.439 257.25 224.622 257.63 224.855 cv
257.63 224.855 li
258.159 225.18 258.601 225.604 258.926 226.146 cv
259.518 227.135 260.057 228.294 260.432 229.487 cv
260.699 230.335 260.882 231.2 260.941 232.031 cv
260.948 232.127 260.953 232.222 260.957 232.317 cv
261.007 233.685 260.701 234.945 259.853 235.866 cv
259.607 236.133 259.316 236.372 258.974 236.576 cv
258.003 237.158 256.788 237.476 255.588 237.687 cv
253.788 238.108 252.208 238.272 250.845 238.272 cv
level3{
gsave
clp
[4.20873e-009 -93.7428 93.7428 4.20873e-009 248.063 309.674 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.20873e-009 -93.7428 93.7428 4.20873e-009 248.063 309.674 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
244.525 236.617 mo
244.382 236.501 244.293 236.414 244.258 236.355 cv
243.877 235.718 243.583 235.056 243.366 234.385 cv
243.017 233.31 242.866 232.216 242.868 231.178 cv
242.874 228.609 243.823 226.383 245.061 225.642 cv
245.359 225.463 246.683 224.981 248.419 224.571 cv
249.459 224.326 250.648 224.107 251.852 223.996 cv
252.383 223.947 252.917 223.919 253.442 223.919 cv
253.517 223.919 253.591 223.919 253.665 223.92 cv
254.623 223.935 255.547 224.047 256.366 224.3 cv
256.447 224.404 256.516 224.509 256.584 224.622 cv
256.709 224.831 256.815 225.038 256.9 225.242 cv
257.063 225.633 257.149 226.012 257.149 226.374 cv
257.15 227.171 256.73 227.882 255.787 228.446 cv
255.668 228.512 li
255.61 228.406 li
255.61 228.406 li
255.603 228.394 255.596 228.382 255.589 228.371 cv
255.586 228.366 255.583 228.361 255.58 228.356 cv
255.577 228.351 255.574 228.347 255.571 228.342 cv
255.568 228.338 255.566 228.334 255.563 228.33 cv
254.817 227.189 252.794 226.3 250.805 226.298 cv
250.804 226.298 250.802 226.298 250.801 226.298 cv
250.801 226.298 li
250.801 226.298 li
250.8 226.298 250.799 226.298 250.798 226.298 cv
249.927 226.299 249.063 226.469 248.316 226.864 cv
248.259 226.895 248.203 226.926 248.147 226.959 cv
248.139 226.963 248.132 226.968 248.124 226.973 cv
248.124 226.973 li
247.103 227.584 246.223 228.911 245.845 230.279 cv
245.845 230.279 li
245.289 230.423 244.744 230.542 244.321 230.795 cv
243.738 231.143 243.373 231.867 243.373 232.892 cv
243.374 233.345 243.446 233.856 243.602 234.42 cv
243.786 235.084 244.087 235.819 244.525 236.617 cv
level3{
gsave
clp
[4.20873e-009 -93.7428 93.7428 4.20873e-009 248.063 309.674 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.20873e-009 -93.7428 93.7428 4.20873e-009 248.063 309.674 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
249.857 234.753 mo
248.592 234.753 247.42 234.571 246.512 233.75 cv
246.492 233.733 246.473 233.715 246.454 233.697 cv
246.454 233.697 246.454 233.697 246.453 233.697 cv
246.448 233.692 246.443 233.687 246.438 233.682 cv
246.425 233.669 246.412 233.657 246.399 233.644 cv
246.254 233.505 246.134 233.344 246.035 233.178 cv
245.769 232.735 245.651 232.2 245.651 231.629 cv
245.65 231.192 245.72 230.733 245.845 230.279 cv
246.223 228.911 247.103 227.584 248.124 226.973 cv
248.124 226.973 li
248.132 226.968 248.139 226.963 248.147 226.959 cv
248.203 226.926 248.259 226.895 248.316 226.864 cv
249.063 226.47 249.927 226.299 250.798 226.298 cv
250.799 226.298 250.8 226.298 250.801 226.298 cv
250.801 226.298 li
250.802 226.298 250.804 226.298 250.805 226.298 cv
252.794 226.3 254.817 227.189 255.563 228.33 cv
255.566 228.334 255.568 228.338 255.571 228.342 cv
255.574 228.347 255.577 228.351 255.58 228.356 cv
255.583 228.361 255.586 228.366 255.589 228.371 cv
255.596 228.382 255.603 228.394 255.61 228.406 cv
255.61 228.406 li
255.668 228.512 li
255.908 228.959 256.011 229.467 256.011 230.004 cv
256.012 231.613 255.091 233.476 254.201 234.705 cv
254.201 234.705 li
254.18 234.703 254.16 234.7 254.14 234.698 cv
253.762 234.653 253.374 234.636 252.983 234.636 cv
252.462 234.636 251.933 234.665 251.408 234.695 cv
250.884 234.724 250.363 234.753 249.857 234.753 cv
level3{
gsave
clp
[4.20873e-009 -93.7428 93.7428 4.20873e-009 248.063 309.674 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.20873e-009 -93.7428 93.7428 4.20873e-009 248.063 309.674 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
244.026 251.651 mo
243.085 251.651 242.083 251.373 241.135 251.026 cv
240.249 250.756 239.458 250.453 238.752 250.131 cv
238.71 248.607 li
238.657 246.699 li
239.574 247.186 240.574 247.628 241.385 248.247 cv
241.885 248.025 242.437 247.721 242.959 247.355 cv
243.265 248.049 244.194 249.465 246.262 250.806 cv
245.674 251.324 244.957 251.639 244.093 251.651 cv
244.071 251.651 244.049 251.651 244.026 251.651 cv
level3{
gsave
clp
[4.20873e-009 -93.7428 93.7428 4.20873e-009 248.063 309.674 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.20873e-009 -93.7428 93.7428 4.20873e-009 248.063 309.674 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
246.485 243.149 mo
246.479 243.148 246.473 243.146 246.467 243.144 cv
246.473 243.146 246.479 243.148 246.485 243.149 cv
245.262 242.908 mo
245.262 242.908 245.262 242.908 245.262 242.908 cv
245.262 242.908 245.262 242.908 245.262 242.908 cv
245.278 242.908 mo
245.277 242.908 245.275 242.908 245.274 242.908 cv
245.274 242.908 li
245.275 242.908 245.277 242.908 245.278 242.908 cv
244.25 242.199 mo
243.342 241.018 241.824 239.993 240.279 239.987 cv
240.274 239.987 240.269 239.987 240.264 239.987 cv
240.264 239.987 li
240.264 239.987 li
240.264 239.987 li
240.248 239.987 240.232 239.987 240.215 239.987 cv
239.668 239.995 239.061 240.175 238.484 240.473 cv
238.407 237.713 li
238.45 237.71 238.492 237.708 238.533 237.707 cv
238.536 237.707 238.539 237.707 238.542 237.707 cv
239.157 237.707 243.194 238.54 245.932 240.324 cv
245.334 240.794 244.748 241.434 244.25 242.199 cv
level3{
gsave
clp
[4.20873e-009 -93.7428 93.7428 4.20873e-009 248.063 309.674 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.20873e-009 -93.7428 93.7428 4.20873e-009 248.063 309.674 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
241.385 248.247 mo
240.574 247.628 239.574 247.186 238.657 246.699 cv
238.484 240.473 li
239.061 240.175 239.668 239.995 240.215 239.987 cv
240.232 239.987 240.248 239.987 240.264 239.987 cv
240.264 239.987 li
240.264 239.987 li
240.269 239.987 240.274 239.987 240.279 239.987 cv
241.824 239.993 243.342 241.018 244.25 242.199 cv
243.405 243.496 242.813 245.155 242.838 246.962 cv
242.839 247.02 242.867 247.122 242.923 247.268 cv
242.923 247.268 li
242.934 247.295 242.946 247.324 242.959 247.355 cv
242.437 247.721 241.885 248.025 241.385 248.247 cv
level3{
gsave
clp
[4.20873e-009 -93.7428 93.7428 4.20873e-009 248.063 309.674 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.20873e-009 -93.7428 93.7428 4.20873e-009 248.063 309.674 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
253.478 253.385 mo
252.537 253.385 251.535 253.106 250.587 252.759 cv
248.774 252.208 247.358 251.518 246.262 250.806 cv
244.194 249.465 243.265 248.049 242.959 247.355 cv
242.946 247.324 242.934 247.295 242.923 247.268 cv
242.988 244.354 244.12 242.924 245.25 242.908 cv
245.254 242.908 245.258 242.908 245.262 242.908 cv
245.262 242.908 245.262 242.908 245.262 242.908 cv
245.266 242.908 245.27 242.908 245.274 242.908 cv
245.275 242.908 245.277 242.908 245.278 242.908 cv
245.651 242.909 246.052 243.026 246.467 243.144 cv
246.473 243.146 246.479 243.148 246.485 243.149 cv
246.519 243.159 246.553 243.169 246.587 243.178 cv
245.937 243.816 245.493 244.594 245.493 245.359 cv
245.493 245.368 245.493 245.377 245.493 245.386 cv
245.496 245.551 245.516 245.719 245.563 245.883 cv
246.163 248.081 248.989 248.57 250.837 249.981 cv
252.406 249.282 254.493 247.781 254.548 246.059 cv
254.548 246.059 li
254.664 246.062 li
256.213 246.04 256.875 245.105 256.876 243.663 cv
256.876 243.64 256.875 243.617 256.875 243.594 cv
256.874 243.483 256.868 243.376 256.853 243.265 cv
257.517 243.976 257.933 244.789 257.946 245.709 cv
257.948 245.864 257.947 246.022 257.944 246.182 cv
257.874 249.364 256.656 253.341 253.544 253.385 cv
253.522 253.385 253.5 253.385 253.478 253.385 cv
level3{
gsave
clp
[4.20873e-009 -93.7428 93.7428 4.20873e-009 248.063 309.674 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.20873e-009 -93.7428 93.7428 4.20873e-009 248.063 309.674 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
242.923 247.268 mo
242.867 247.122 242.839 247.02 242.838 246.962 cv
242.813 245.155 243.405 243.496 244.25 242.199 cv
244.748 241.434 245.334 240.794 245.932 240.324 cv
246.503 239.877 247.084 239.583 247.612 239.481 cv
247.74 239.456 247.864 239.443 247.985 239.441 cv
247.988 239.441 247.991 239.441 247.994 239.441 cv
248.081 239.441 248.239 239.458 248.453 239.492 cv
248.899 239.564 249.59 239.711 250.4 239.937 cv
252.246 240.452 254.712 241.377 256.312 242.748 cv
256.506 242.914 256.687 243.086 256.853 243.265 cv
256.868 243.376 256.874 243.483 256.875 243.594 cv
256.875 243.617 256.876 243.64 256.876 243.663 cv
256.875 245.105 256.213 246.04 254.664 246.062 cv
254.548 246.059 li
254.551 245.957 li
254.551 245.957 li
254.551 245.957 li
254.528 244.263 252.158 241.725 249.723 241.721 cv
249.721 241.721 249.718 241.721 249.716 241.721 cv
249.716 241.721 li
249.716 241.721 li
249.716 241.721 li
249.699 241.721 249.683 241.721 249.667 241.721 cv
249.215 241.727 248.723 241.851 248.24 242.061 cv
247.644 242.321 247.062 242.712 246.587 243.178 cv
246.587 243.178 li
246.553 243.169 246.519 243.159 246.485 243.149 cv
246.479 243.148 246.473 243.146 246.467 243.144 cv
246.052 243.026 245.651 242.909 245.278 242.908 cv
245.277 242.908 245.275 242.908 245.274 242.908 cv
245.274 242.908 li
245.27 242.908 245.266 242.908 245.262 242.908 cv
245.262 242.908 245.262 242.908 245.262 242.908 cv
245.258 242.908 245.254 242.908 245.25 242.908 cv
244.12 242.924 242.988 244.354 242.923 247.268 cv
242.923 247.268 li
level3{
gsave
clp
[4.20873e-009 -93.7428 93.7428 4.20873e-009 248.063 309.674 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.20873e-009 -93.7428 93.7428 4.20873e-009 248.063 309.674 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
250.837 249.981 mo
248.989 248.57 246.163 248.081 245.563 245.883 cv
245.516 245.719 245.496 245.551 245.493 245.386 cv
245.493 245.377 245.493 245.368 245.493 245.359 cv
245.493 244.594 245.937 243.816 246.587 243.178 cv
247.062 242.712 247.644 242.321 248.24 242.061 cv
248.723 241.851 249.215 241.727 249.667 241.721 cv
249.683 241.721 249.699 241.721 249.716 241.721 cv
249.716 241.721 li
249.716 241.721 li
249.718 241.721 249.721 241.721 249.723 241.721 cv
252.158 241.725 254.528 244.263 254.551 245.957 cv
254.551 245.957 li
254.551 245.957 li
254.548 246.059 li
254.493 247.781 252.406 249.282 250.837 249.981 cv
level3{
gsave
clp
[4.20873e-009 -93.7428 93.7428 4.20873e-009 248.063 309.674 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.20873e-009 -93.7428 93.7428 4.20873e-009 248.063 309.674 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
236.553 309.263 mo
231.786 309.263 li
230.25 265.712 li
230.046 259.825 227.613 254.231 223.446 250.069 cv
221.983 248.607 li
220.709 217.825 li
229.015 217.825 li
229.146 220.937 li
227.05 221.673 224.986 223.553 223.616 225.371 cv
222.962 226.237 222.763 227.295 222.867 228.436 cv
222.933 228.322 223.005 228.219 223.084 228.114 cv
223.084 228.114 li
223.084 228.114 li
223.005 228.219 222.933 228.322 222.867 228.436 cv
223.233 232.645 227.701 237.909 228.362 238.407 cv
228.75 238.699 229.28 238.898 229.904 238.996 cv
230.307 248.607 li
230.573 255.012 li
231.732 257.031 li
232.3 258.032 232.646 259.138 232.736 260.281 cv
236.553 309.263 li
228.492 235.104 mo
228.485 235.1 228.479 235.095 228.473 235.09 cv
228.479 235.095 228.485 235.1 228.492 235.104 cv
228.456 235.078 mo
228.452 235.075 228.448 235.072 228.443 235.068 cv
228.448 235.072 228.452 235.075 228.456 235.078 cv
226.284 230.123 mo
226.284 229.103 226.513 228.18 226.956 227.593 cv
227.033 227.5 li
226.927 227.413 li
226.922 227.41 226.918 227.407 226.913 227.403 cv
226.918 227.407 226.922 227.41 226.927 227.413 cv
227.033 227.5 li
227.033 227.5 li
227.033 227.5 li
226.956 227.593 li
226.513 228.18 226.284 229.103 226.284 230.123 cv
223.099 228.094 mo
223.099 228.094 223.099 228.094 223.099 228.094 cv
223.099 228.094 223.099 228.094 223.099 228.094 cv
223.113 228.075 mo
223.114 228.075 223.114 228.074 223.115 228.074 cv
223.114 228.074 223.114 228.075 223.113 228.075 cv
223.155 228.022 mo
223.157 228.019 223.16 228.015 223.163 228.012 cv
223.16 228.015 223.157 228.019 223.155 228.022 cv
223.172 228 mo
223.79 227.223 224.495 226.777 225.269 226.776 cv
224.495 226.778 223.79 227.223 223.172 228 cv
227.047 227.482 mo
227.049 227.48 227.051 227.477 227.053 227.475 cv
227.051 227.477 227.049 227.48 227.047 227.482 cv
227.081 227.443 mo
227.626 226.823 228.452 226.478 229.372 226.32 cv
229.372 226.32 li
228.453 226.478 227.626 226.823 227.081 227.443 cv
225.278 226.776 mo
225.276 226.776 225.275 226.776 225.273 226.776 cv
225.273 226.776 li
225.275 226.776 225.276 226.776 225.278 226.776 cv
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 500 ]ct
[17.28 0 0 93.12 219.84 189.92 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 36 
/H 194 
/M[36 0 0 -194 0 194 ]
/BC 8 
/D[0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 36 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 36 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 36 string /rs cvx /pop cvx] cvx
]
/O 2
>>
%%BeginBinary: 1
img
oq(E?m9oTqrF4Rrm[ip>m9oTqrF4Rrh4FXRnR(rsqdJ:oh4F(Bra>M/qdJ:oh4F.CoO%H&r=e-'hOOY<
nQtipqI&S%oFp)P!1raeoj7E#h%T[VjIH:Bnm1oppg;hjkahI=!1rdeoj.;uh%SY9!1s!kqcrf"pKlYh
iLKk;oNUuns'>D*h%Sb;rLNRboj%2rpCl^'iLKk;p0.)moj$Pkq@hhXrLNXcoNUunh%TIOm@=-GpK@,l
oNU,bjI?1>r1*LaoNLlkh%Sk=qOI=_r)rl!o3),uh%Sk=qOI=_oi^rk!a8c3h%Sk=qOI=_oi^li!*et,
m1\QMqOHqTo3))sh@fl&kF2.7m9&s_s'"4ln!a'@pRCVQo2troh%St?pR;.an5o3`rE7qhkF2.7nQ,Ti
pK.5oh%K"@oU>;No2kfkrY"-%lC%:5nl>9^qH)tqo+L>VoU>>No2b]hh%KXRn!Wg:o2P?^pf?2`lBqX@
opYJOoMtZeh%K(AnsT>Qqc!,dpJp#^m$R@3oMbB]pJp#^m$R@3p/:K\p/Lf"jq@$JnsT2Lo2G?^jV%A%
m$R@3pJLN[oi'ZZp6YWBn!NiHo2>6[h%K1CopGWDpJLN[oi'ZZn!EL1pe^odpJLQ\h%K1Cn!NlHo259\
rDMGan!EL1lqm:N!)i4tn.P;Xm$I'8o2,Kch%KaRoTnj1m8*=Ms&%Sbns90>nsA`>o2,Hah%K:Em$IZG
o1nmQrD;;_op+d-mnWdVpeUibh%KCGl'Cj6o1o0Yq\%p%op+d-nP/UMqbQDgp(I%`l'Cm6o1f'Vh%KOK
rKZW5nkAXLqG,iZk*>_,o1S^LpeBQWh3I_-rCccVpeBQWh3IS)oM#9ZqG#cYh3IV)oLnpPob-L%h3IV)
oLnpPiY)/%hNS#*p.=jJp.O3So9AU+!1!7Lo1J^Lh%JY1!gJq7pIOmIoh+$QhNS#*pIP0Qq+:6Oh%JS/
!1!=Lo18OG!(kuZiKO5)pdapHoL\Kamh4TCrKQY=o1/jQh%B^Oifj>*lppY<!(kuZm?@4,rKQ\=o1/gO
h%Je3qNLnJn4*">s%(rYjHBA'mm[1EpI>*Oh%Je3qNLA:o1&[Kr"A!%jHBA'nO2t;qaTf_ob->KqNLG;
o0rOGh%KRHmZI7,nO2t;qaTBSkE5M%njE":qF03PkE5M%pd=pGo0iFDh%Ah4pQG,7oKrUHq*a$NkE5M%
o0W(:pdFffkRm*AoTAc3oKr:>it;/#lB(Y#oKi+9pI!aKoT8g/oTAi4o0N(:h%Aq6plYN;p-A48p-RRI
lB(Y#pHSF<r'9p@h%B"7nrWT1o0Dt7rt4-#m#U_!pce:6oK_aTne(5LnrWW1o0;k4h%BUHn;m.%lot#*
!'o?PmuI=,oT/?&o034?h%B+9muR?/o0)\/s$,<OmuHjtm61A2pce^Bh%B+9muQj!o031=q%;^#muHjt
ml^2)rBB?Up_!(Vm#LNso0*%9h%BC@r/L''nN6>)q`WaInr<7$qMt)-o/un5h%B4;m#La"r]9X4qE3RG
nr<!rniHA(s#g3Ah%B==l&G9poK)b/o+C:#oo/-po/ZG(pcICGrXng^l&G<poJuY,h%B==rJg3(oJlJ'
pH%+Boo/0q!0-\2o/QG(h%AM&!0-\2qDe=2p,Uq@hM_GopGVV%of)p`h@\V'!0-_2o/H>%m1Jk#hM_Go
pbhY$oeuk1h%BXEjGWtqpbhY$oeuk1h%At2pP]!/pbhY$oeuk1h%AV(rJ^Y3nMTqss#8aGiJ[Ynlo"c#
pGW%1h%AV(rJ^,#oel\+q@Vd#jGNelm54JnrANgNpCZJDqMXeuoecP'h%BF>m>CaumkaVnq_d1Ajba%q
qMXl!oJ?>#h%A_*qMY&&r%dn#qD@"?kDAqjnhKemr\OF-h%Ah,pPSMroeQ:uoF^@#kDAqjo.]hlpG1\>
r=S4LpPSProeH1rh%B(3qMFs(oIokkp+bkEo+C8DoSNT$p+Q(mp+bkEo+C8DoSN2nq(Vb$p+bkEo+C8D
oSN8ooIokkr=JE/o+C8DoSN8ooIokklOX%.oF^GFnqd#loIfbhlO`Y"qhO`tnqd#loIfbhlO`Y"m"bOq
p5&Jpoe#bf!&*XLo+C>Enqd)m!%ddpo.C"rlO`Y"m"b.fm4A)cqCV_"lO`Y"mtU:dm4@i\s"=$Woap^,
mtU:dmjmu\r@R=Hq@WQ9mtU:dmjmu\r@R=Ho+CYMqhFQpnLF,\q^h%Eo+CGGoS<@"nLF,\q^h%Eo+CPI
m"Y*\!%ILhqCCkCo+CPIm"Y'[o.'\hr[[:Go+CPIm"Y*[oI9PbnIYR/o+CPIm"Y*[oI9PblO`\#!"ndU
m"Y*[oI9PblO`Y"on<3rmtLB]oI0G_lO`Y"on;R`!%7FeoI0G_lO`Y"on;R`p*TP^r$V1dlO`Y"on;R`
p*TAYp*fnOmL\t%h1YMKo-X,XlO`Y"h1YMKo-X,XlO`Y"r.O'_pa#GWoHrl8o+C5?on<)co-O#UlO`Y"
h1YVMo-EoR!%."Co+Bi3!/0\ar$D+a!%."Co+Bi3!/0_ao-F>^p^m'/o+Bi3!/0_ao-F>^lO`q*q%;J9
!/0ebo-=2ZlO`Y"p4MU^!/0ebo-=2ZlO`Y"j+@;_rIaV`o-4&VlO`Y"iI_#\oHF2Wo-4&VlO`Y"iI_#\
nKIKJs!.IelO`Y"iI_#\nf[NIqBG>=rXeZ5iI_#\nf[NIqBG5:o+D"Rk(3A\o,mTIp`\r7o+C>?q18Bo
o,mTIp`\r7o+C&7qL\Yep`B&LpE8c5o+C&7qL\>\pE0AVpE8c5o+C/9pOW#Yo,dTIq[i9/o+C/9pOW#Y
o,dTIlOa%-p(?J<pOW&Yo,[KFlO`Y"q1.papOW&Yo,[KFh%8b"!.jorp`&fEoGua!l@8GVp_s2QoGmKD
h%8k$oRQ9Iq&K8O!$0l,l@8GVll5O9!$1_Dkn*-0oRQ<Io,I]LiXl#!l@8GVm2GR8ruBi+o7$Obnpg$F
o,I]Lh%8q%omcsjmht^8r>XQ(m!eMTnJV?Eo,@QHh%8q%npg0Ho,7HE!#jZ)m!eMTnJLj8q\no7mh"r9
msagDo,.<Ah%0R7n9sbSne^m7qAJ*#msY4bnUC'FoG@9>h%9%'msb6Op(m9:p__funpKePoG.-:r>,,D
h%9.)m!\L@oG70;r".j!npKePp([*5p(lm(oap\Am!\RAo+gs7h%9F1q0_OWpCm-4obH9oom?:XpO)]K
o+^j4h%97+l$W7=o+Ua1h%97+l$W7=o+V$9q%VWrom>qNp_*03oG%!1kRdE6l$W7=o+Ua1it2)!om>qN
p_*03oG$*mom6[dl?r@>o+Ua1h%97+m<nk[p_*03oG$*mom>qNp_*<7r=ef;h%97+l$W7=o+Ua1rt+'!
om>qNp_*03oG$X'ndtJ@l$W7=o+Ua1h%9O3q0V@Rp_*03oG$*mJ,~>

%%EndBinary
grestore
np
222.867 228.436 mo
222.763 227.295 222.962 226.237 223.616 225.371 cv
224.986 223.553 227.05 221.673 229.146 220.937 cv
229.372 226.32 li
228.452 226.478 227.626 226.823 227.081 227.443 cv
227.072 227.454 227.062 227.464 227.053 227.475 cv
227.051 227.477 227.049 227.48 227.047 227.482 cv
227.042 227.488 227.037 227.494 227.033 227.5 cv
227.033 227.5 li
226.927 227.413 li
226.922 227.41 226.918 227.407 226.913 227.403 cv
226.341 226.975 225.794 226.777 225.278 226.776 cv
225.276 226.776 225.275 226.776 225.273 226.776 cv
225.273 226.776 li
225.273 226.776 li
225.272 226.776 225.27 226.776 225.269 226.776 cv
224.495 226.777 223.79 227.223 223.172 228 cv
223.169 228.004 223.166 228.008 223.163 228.012 cv
223.16 228.015 223.157 228.019 223.155 228.022 cv
223.141 228.039 223.128 228.056 223.115 228.074 cv
223.114 228.074 223.114 228.075 223.113 228.075 cv
223.109 228.082 223.104 228.088 223.099 228.094 cv
223.099 228.094 223.099 228.094 223.099 228.094 cv
223.094 228.101 223.089 228.108 223.084 228.114 cv
223.084 228.114 li
223.005 228.219 222.933 228.322 222.867 228.436 cv
level3{
gsave
clp
[4.20873e-009 -93.7428 93.7428 4.20873e-009 248.063 309.674 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.20873e-009 -93.7428 93.7428 4.20873e-009 248.063 309.674 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
229.904 238.996 mo
229.28 238.898 228.75 238.699 228.362 238.407 cv
227.701 237.909 223.233 232.645 222.867 228.436 cv
222.933 228.322 223.005 228.219 223.084 228.114 cv
223.084 228.114 li
223.089 228.108 223.094 228.101 223.099 228.094 cv
223.099 228.094 223.099 228.094 223.099 228.094 cv
223.104 228.088 223.109 228.082 223.113 228.075 cv
223.114 228.075 223.114 228.074 223.115 228.074 cv
223.128 228.056 223.141 228.039 223.155 228.022 cv
223.157 228.019 223.16 228.015 223.163 228.012 cv
223.166 228.008 223.169 228.004 223.172 228 cv
223.79 227.223 224.495 226.778 225.269 226.776 cv
225.27 226.776 225.272 226.776 225.273 226.776 cv
225.273 226.776 li
225.275 226.776 225.276 226.776 225.278 226.776 cv
225.794 226.777 226.341 226.975 226.913 227.403 cv
226.918 227.407 226.922 227.41 226.927 227.413 cv
227.033 227.5 li
226.956 227.593 li
226.513 228.18 226.284 229.103 226.284 230.123 cv
226.284 231.896 226.977 233.963 228.443 235.068 cv
228.443 235.068 li
228.448 235.072 228.452 235.075 228.456 235.078 cv
228.462 235.082 228.467 235.086 228.473 235.09 cv
228.479 235.095 228.485 235.1 228.492 235.104 cv
228.849 235.362 229.286 235.566 229.766 235.712 cv
229.904 238.996 li
level3{
gsave
clp
[4.20873e-009 -93.7428 93.7428 4.20873e-009 248.063 309.674 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.20873e-009 -93.7428 93.7428 4.20873e-009 248.063 309.674 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
229.766 235.712 mo
229.286 235.566 228.849 235.362 228.492 235.104 cv
228.485 235.1 228.479 235.095 228.473 235.09 cv
228.467 235.086 228.462 235.082 228.456 235.078 cv
228.452 235.075 228.448 235.072 228.443 235.068 cv
228.443 235.068 li
226.977 233.963 226.284 231.896 226.284 230.123 cv
226.284 229.103 226.513 228.18 226.956 227.593 cv
227.033 227.5 li
227.033 227.5 li
227.037 227.494 227.042 227.488 227.047 227.482 cv
227.049 227.48 227.051 227.477 227.053 227.475 cv
227.062 227.464 227.072 227.454 227.081 227.443 cv
227.626 226.823 228.453 226.478 229.372 226.32 cv
229.766 235.712 li
level3{
gsave
clp
[4.20873e-009 -93.7428 93.7428 4.20873e-009 248.063 309.674 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.20873e-009 -93.7428 93.7428 4.20873e-009 248.063 309.674 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
243.228 316.486 mo
237.116 316.486 li
236.553 309.263 li
242.854 309.263 li
243.228 316.486 li
.968627 .909804 .85098 rgb
f
237.853 217.825 mo
229.015 217.825 li
228.856 213.983 li
237.747 213.983 li
237.853 217.825 li
f
242.854 309.263 mo
236.553 309.263 li
232.736 260.281 li
232.646 259.138 232.3 258.032 231.732 257.031 cv
230.573 255.012 li
230.307 248.607 li
229.904 238.996 li
230.206 239.044 230.53 239.068 230.87 239.068 cv
233.197 239.068 236.286 237.937 238.343 235.436 cv
238.407 237.713 li
236.377 237.874 233.33 241.179 233.387 245.229 cv
233.388 245.286 233.416 245.388 233.471 245.534 cv
233.471 245.534 li
233.802 246.362 235.173 248.497 238.752 250.131 cv
238.887 255.012 li
239.655 257.031 li
240.033 258.032 240.262 259.138 240.322 260.281 cv
242.854 309.263 li
234.527 237.501 mo
234.527 237.501 234.526 237.501 234.526 237.501 cv
234.526 237.501 234.527 237.501 234.527 237.501 cv
234.527 237.501 li
234.541 237.501 mo
235.569 237.495 236.924 236.82 238.338 235.24 cv
238.338 235.24 li
236.924 236.82 235.569 237.495 234.541 237.501 cv
233.425 237.163 mo
233.422 237.16 233.419 237.158 233.415 237.155 cv
233.022 236.859 232.706 236.397 232.365 235.936 cv
232.365 235.936 li
232.706 236.397 233.022 236.859 233.415 237.155 cv
233.419 237.158 233.422 237.16 233.425 237.163 cv
231.62 235.979 mo
231.619 235.979 231.617 235.979 231.616 235.979 cv
231.617 235.979 231.619 235.979 231.62 235.979 cv
231.62 235.979 li
231.622 235.979 mo
231.871 235.979 232.12 235.965 232.365 235.936 cv
232.12 235.965 231.871 235.979 231.622 235.979 cv
235.537 232.818 mo
235.535 230.775 233.899 228.703 233.323 226.53 cv
233.307 226.526 233.29 226.522 233.273 226.518 cv
233.29 226.522 233.307 226.526 233.323 226.53 cv
233.899 228.703 235.535 230.775 235.537 232.818 cv
238.042 228.685 mo
237.528 227.323 236.742 225.788 235.564 224.123 cv
234.918 223.091 234.166 222.085 233.262 221.403 cv
232.529 220.851 231.729 220.613 230.903 220.613 cv
230.325 220.613 229.734 220.73 229.146 220.937 cv
229.015 217.825 li
237.853 217.825 li
237.967 221.899 li
237.524 224.075 237.722 226.68 238.042 228.685 cv
233.254 226.513 mo
233.253 226.513 233.252 226.513 233.252 226.513 cv
233.252 226.513 233.253 226.513 233.254 226.513 cv
229.372 226.32 mo
229.372 226.32 li
229.808 226.245 230.264 226.212 230.722 226.212 cv
230.264 226.212 229.808 226.245 229.372 226.32 cv
230.729 226.212 mo
230.728 226.212 230.727 226.212 230.726 226.212 cv
230.726 226.212 li
230.727 226.212 230.728 226.212 230.729 226.212 cv
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 500 ]ct
[14.88 0 0 93.12 228.48 189.92 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 31 
/H 194 
/M[31 0 0 -194 0 194 ]
/BC 8 
/D[0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 31 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 31 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 31 string /rs cvx /pop cvx] cvx
]
/O 2
>>
%%BeginBinary: 1
img
ijo)Hoo&F#rf,o8laZ`#!fDknp5AO$rf,o8laZ`#onr<urJ^VOkYg`Vppp'Tnr*I*i_oQ]oXO\,l&,=q
i_o9To=4INonrU(i_o9To=4RPl\b72nP\kco=4RPl\a\"n@&D-oXO^Qo837"i_o9To=4UPoSER)pkn'/
o=".tqM4ZupPJ-4qGQpnn@/7Lo8*-ti_oBVoXFe.mYCIki_oBVn@.h@p4r^)i_oBVn@/=MkD/%ps0h!s
r.aBii_ndEre:B,onN'ni_ndEre9ruo8!->l;HWMre9ruo7u='p9s@snV-Uis+fT3q6fLro7d3uoS3C$
i_oT[lF,f.reBo?o2>CllF,f.reBE0q6fn(p9sXImY0Xtr3YXpon<$mq1[g*r3YXpp4N!jqM"*0r)*C!
kI(#9oS!'pi_fW\l*^Q!pk&*iq1Ra)r3YXppk&*iq1J`Fj&,f^jg=?*pk.R'rj)U3k-XH+pk.R'rj1^n
qLRm_i_f]]jg=l8l%8Y,lr!bgjg=o8oRZ[ei_f?Sn?W,%qge<ion)1#j0J`mqgeElrdj`oi_eaB!4;ZR
oRQRbmSWXSj0J`mr."?hoRZ"!la-Dn!4;6Fo75gtij8-(q1/?mi_e^As*j*[s+'3.r__[]s*j*[s+'*+
ij86*n:0Fpkd()lo7$1Yr__cSkd()lomQC[rI<g(kd()lrdFQinp^Oei_epFqm6!DoR6RbqbcQSkd()l
p3cL\qL7F$pp'Irpp014q0h7"l`p5jomHI\q0h7"l`p5jl?rDUnknpSl`p5jq0VCSi_f0LrNZ.'q0VCS
i_e^?qKha[pO(stij&?+o6^4Zku%:Sij%otom>[qk-=limX"PQi_e^?r-@LP!.*X%o<@_hr-@IOi_f`[
os!qjrcn$[o6TCno<@_hrcnHgom-.Ti_f<On?N";o6BnQs*FK<l;@8YmBHV7o6BnQs*E[%p93kfo69eN
rd!L#p93kfo69eNrd!L#p93kfk'-cKn58dSp93kfk'-cKi_fNSorn(mk'-cKi_fNSlEBo)olp4Ui_]HR
lEBo)m<@_ir)!3llEBu*o60qRi_]HRm'$GmpiZ1Oq01gpii`*!o6'hO!)V]Pii`*!o6'hOi_]TVk-"&m
pN>Ilii`-"o5s_Li_\X;qfCtCpJC3QriP:bqfCtCi_]WVpTEtfr,VFNoQ9(hriP:br,VLPs)[gSi_]WV
jf\T&o5aMFs)d[*ohabPriZ6?o5aMFs)d6sl`L&driYd2olC%Qi_\a=riYd2pi?@Src@'qjfSNbnT"5B
rc@0tr_V^YriYC'rGpmokcFZ`k&L??i_\j?qlTO1mW&5&j\Y0BqlTO1mW%5_kcFZ`rbqUNol0_Hi_\j?
qlTR1ol0_HqbZKQl`9f^lYlQ;i_]ENoW.bglYlQ;i_\sApoO:/rGV+Bi_\sApoO:/l>Q5inPJPPpoO=/
oksG@i_]*EoW.h*oksG@i_\X8qeYqBrbhIJi_\X8qeYqBoPWniqG?1Pn8.]5i_]6HoW.qkn8.]5i_]6H
n>l%poPFSFi_]6Hn>lP(kA:08i_]ZTor@M^rbL\5s)$alo;_;\s(_OKphTA8i_]?JmAg2$okX&5q,$?Q
p8RGZokO&5rG:Iip8RGZokO&5rG:Iip8RGZp1aM@pM0P?i_]?JmAfkooP45<n5/^Qq5ESXl=p'/i_]HL
or7Yal=p'/i_]HLlDaSmnnIo6i_]HLlDaSml=oEXr)!3flDaVmo4[l4i_\^7s/>d,o4[l4i_\X5qIfD5
pLsV(j&"a6qe#J5ok<>]rM\kWqe#J5ok<>]rhnkVqI]G5oOm/[rhnkVmq23)pJC3QrhnkVrak2'i_]WP
pSdPZrak2'i_]WPjf&2io4@K)i_\[5!iTX?o4@K)mSNRQj/2mUo47H(rat.dl_jQV!3#L"o4@o5i_\[5
!3#*ls()(>i_\[5!3#$jrFP(er_V^RrhoI"m:>3Qjei$Tp1*K#i_\a6rhoO#o4.T,r_V]Qjei$TpgWi)
q./J]jei$TraPb6o4.T,i_\X3q-il(pga1tkYU99q-il(pg`;[pnmASls]Wti_\X3ojRW(pL<,Yl_XBR
qdAVrnkejQl_XBRqdAVri_]*?rMB:dr*T)(oO6`Ul_XBRr*T)(raGP0i_\s;pnn$so3_)sktq4Qn>,ZP
ra,2'o3gQSn>,fTrMB$joO%W+i_]-?o;1t`oNqT+!+=e_n>,ZPj^.pni_]ZNntblRj^.pni_]6An>,tf
qH`Mqi_]6An>,__mU#]cl;7)In>,__mU"mLp7qV^n>,b_oNh<"i_]6An>,b_ra#8(qHi/XihQ9Qo3D)s
n5/^QihQ9Qo3D)si_]$;p7pqXpfufTihPgD!*o>)i_]HFlD+2Zl!*=Ir)!3`lD+2Zl!*.Dq4d5Ns.fHo
oNLoli_]HFlD+5ZoNLol!)V]Pq4d/Lmof9di_]TI!28SMmof9di_]QHkG%rXrE8Afi_]QHkG%rXj]V=S
lqmVRkG%uXo2tQdi_]QHq4d>Ps&\eonlasKrh/AHs&\eonlasKrh/AHo2kNcr`SYcohbX\je;9Io2tup
i_]WIm\0ELoiCWbrE/&Urh/AHoiC]ds&]/$i_\[.!28XXqH)cTr_VXJ!28XXqH)ZQj.HCGpf6W\i_\[.
!290flW4!]j\Xs0q,Hrcpf?BNih69Mr)E8fpf?BNih6-Ho2PHaqbZKQih6-Ho2PHai_]ECl_*ZEoi0pI
kb%aFoi(]coi0pIkb%aFr)2]VnkejQkb%aFr)2]Vi_]*9qOdYXr)2]Vi_\j2qk3jbnPf0\i_\j2qk3jb
k>UVAqG?CJqk3jbk>UA:kb%mJrLj'dk>UA:kb%aFr)2`W!)qlRkb%aFr)2]Vi_]ZIlC[sHr)2]Vi_\j2
qk3jbk>UA:kb%aFr)2]Vq,$?QJ,~>

%%EndBinary
grestore
np
238.165 229.022 mo
238.126 228.911 238.085 228.799 238.042 228.685 cv
237.722 226.68 237.524 224.075 237.967 221.899 cv
238.165 229.022 li
level3{
gsave
clp
[4.20873e-009 -93.7428 93.7428 4.20873e-009 248.063 309.674 ]ct
/4 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.658823 .372549 .333333 ]
/C1 [.658823 .372549 .333333 ]
/N 1 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.658823 .372549 .333333 ]
/C1 [.756863 .596078 .341176 ]
/N 1 
>>
]
/Bounds [.0517977 ]
/Encode [0 1 0 1 ]
>>
>>/Gradient add_res /4 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.20873e-009 -93.7428 93.7428 4.20873e-009 248.063 309.674 ]ct
clp
/4 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~Vl-GjVl-GjVl-GjVl-JlW2QYnW2QYoWMukrWMukrWN)tuWiE)!WiE)"X/i;%X/i;%X/rD(XK8M)XK8P+
Xf\_-Xf\_-Y-+q1Y-+q1Y-+t3YHP.5YHP.6Yct@9Yct@9Yd(I<Z*CR=Z*CR>ZEgdAZEgdAZEpmDZa7!E
Za7$G['[3I['[3I[C*EM[C*EM[C*HO[^NWQ[^NWR\$riU\$riU\%&rX\@B&Y\@B&Z\[f8]\[f8]\[oA`
]"5Ja]"5Mc]=Y\e]=Y\e]Y(ni]Y(ni]Y(qk]tM+m]tM+n^:q=q^:q=q^;%Ft^V@Ou^V@P!^qdb$^qdb$
~>
<~?=$rE?=$rE?=$rE?=$uG?XI2K?smDO@:<SR@U`eV@q0"ZA7T4^AS#FaAnGXeB4kjiBP;'mBk_9qBkhBt
C27U#CM[g'Ci+$+D/F0.DJjB2Df9T6E,]f:EH,u=EcQ2AF)uDEFEDVIF`hhLG'8%PGB\7TG^+IXH$O[\
H$Xd_H@(!cH[L3gI!g?jI=6QnIXZcrIt*!!J:N0$JUrB(JqAT,K7ef0KS5#3KnY57L5(G;LPLY?LkpkC
Ll$tFM2I1JMMmCNMi<URN/WaUNK&sYNfK0]O,oBaOH>QdOcbchP*1ulPEV2pPa%DsQ'IW"QBmi&Q^=&*
~>
<~<)cgr<)cgr<)cgr<)cjt<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!
<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!
<E3%!<E3%"<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%
<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /4 /Gradient get_res exec grestore
}if
np
234.527 237.501 mo
234.527 237.501 234.526 237.501 234.526 237.501 cv
234.094 237.5 233.721 237.382 233.425 237.163 cv
233.422 237.16 233.419 237.158 233.415 237.155 cv
233.022 236.859 232.706 236.397 232.365 235.936 cv
233.444 235.811 234.43 235.399 234.979 234.671 cv
235.096 234.516 235.199 234.344 235.274 234.158 cv
235.459 233.712 235.537 233.266 235.537 232.818 cv
235.535 230.775 233.899 228.703 233.323 226.53 cv
233.307 226.526 233.29 226.522 233.273 226.518 cv
233.267 226.516 233.26 226.515 233.254 226.513 cv
233.253 226.513 233.252 226.513 233.252 226.513 cv
232.506 226.335 231.617 226.212 230.729 226.212 cv
230.728 226.212 230.727 226.212 230.726 226.212 cv
230.726 226.212 li
230.726 226.212 li
230.725 226.212 230.723 226.212 230.722 226.212 cv
230.264 226.212 229.808 226.245 229.372 226.32 cv
229.146 220.937 li
229.734 220.73 230.325 220.613 230.903 220.613 cv
231.729 220.613 232.529 220.851 233.262 221.403 cv
234.166 222.085 234.918 223.091 235.564 224.123 cv
236.742 225.788 237.528 227.323 238.042 228.685 cv
238.085 228.799 238.126 228.911 238.165 229.022 cv
238.338 235.24 li
236.924 236.82 235.569 237.495 234.541 237.501 cv
234.536 237.501 234.532 237.501 234.527 237.501 cv
level3{
gsave
clp
[4.20873e-009 -93.7428 93.7428 4.20873e-009 248.063 309.674 ]ct
/5 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.658823 .368627 .333333 ]
/C1 [.658823 .368627 .333333 ]
/N 1 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.658823 .368627 .333333 ]
/C1 [.756863 .592157 .341176 ]
/N 1 
>>
]
/Bounds [.0517977 ]
/Encode [0 1 0 1 ]
>>
>>/Gradient add_res /5 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.20873e-009 -93.7428 93.7428 4.20873e-009 248.063 309.674 ]ct
clp
/5 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~Vl-GjVl-GjVl-GjVl-JlW2QYnW2QYoWMukrWMukrWN)tuWiE)!WiE)"X/i;%X/i;%X/rD(XK8M)XK8P+
Xf\_-Xf\_-Y-+q1Y-+q1Y-+t3YHP.5YHP.6Yct@9Yct@9Yd(I<Z*CR=Z*CR>ZEgdAZEgdAZEpmDZa7!E
Za7$G['[3I['[3I[C*EM[C*EM[C*HO[^NWQ[^NWR\$riU\$riU\%&rX\@B&Y\@B&Z\[f8]\[f8]\[oA`
]"5Ja]"5Mc]=Y\e]=Y\e]Y(ni]Y(ni]Y(qk]tM+m]tM+n^:q=q^:q=q^;%Ft^V@Ou^V@P!^qdb$^qdb$
~>
<~?!U`A?!U`A?!U`A?!UcC?=$uG?XI2K?smAN@:<SR@U`eV@q0"ZA7T4]AS#FaAnGXeB4kjiBP;'mBPD0p
BkhBtC27U#CM[g'Ci!s*D/F0.DJjB2Df9T6E,]c9EH,u=EcQ2AF)uDEFEDVHF`hhLG'8%PGB\7TG^+IX
G^4R[H$Xd_H@(!cH[C-fI!g?jI=6QnIXZcrIt)ruJ:N0$JUrB(JqAT,K7ef/KS5#3KnY57L5(G;LPLY?
LPUbBLl$tFM2I1JMMmCNMi3OQN/WaUNK&sYNfK0]O,o?`OH>QdOcbchP*1ulPEV2oPa%DsQ'IW"QBmi&
~>
<~<)cgr<)cgr<)cgr<)cjt<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!
<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!
<E3%!<E3%"<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%
<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /5 /Gradient get_res exec grestore
}if
np
230.87 239.068 mo
230.53 239.068 230.206 239.044 229.904 238.996 cv
229.766 235.712 li
230.343 235.887 230.981 235.979 231.616 235.979 cv
231.617 235.979 231.619 235.979 231.62 235.979 cv
231.62 235.979 li
231.62 235.979 li
231.621 235.979 231.621 235.979 231.622 235.979 cv
231.871 235.979 232.12 235.965 232.365 235.936 cv
232.365 235.936 li
232.365 235.936 li
232.706 236.397 233.022 236.859 233.415 237.155 cv
233.419 237.158 233.422 237.16 233.425 237.163 cv
233.721 237.382 234.094 237.5 234.526 237.501 cv
234.526 237.501 234.527 237.501 234.527 237.501 cv
234.527 237.501 li
234.532 237.501 234.536 237.501 234.541 237.501 cv
235.569 237.495 236.924 236.82 238.338 235.24 cv
238.343 235.436 li
236.286 237.937 233.197 239.068 230.87 239.068 cv
level3{
gsave
clp
[4.20873e-009 -93.7428 93.7428 4.20873e-009 248.063 309.674 ]ct
/4 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.20873e-009 -93.7428 93.7428 4.20873e-009 248.063 309.674 ]ct
clp
/4 /Gradient get_res exec grestore
}if
np
231.62 235.979 mo
231.62 235.979 li
231.619 235.979 231.617 235.979 231.616 235.979 cv
230.981 235.979 230.343 235.887 229.766 235.712 cv
229.372 226.32 li
229.808 226.245 230.264 226.212 230.722 226.212 cv
230.723 226.212 230.725 226.212 230.726 226.212 cv
230.726 226.212 li
230.727 226.212 230.728 226.212 230.729 226.212 cv
231.617 226.212 232.506 226.335 233.252 226.513 cv
233.252 226.513 233.253 226.513 233.254 226.513 cv
233.26 226.515 233.267 226.516 233.273 226.518 cv
233.29 226.522 233.307 226.526 233.323 226.53 cv
233.899 228.703 235.535 230.775 235.537 232.818 cv
235.537 233.266 235.459 233.712 235.274 234.158 cv
235.199 234.344 235.096 234.516 234.979 234.671 cv
234.43 235.399 233.444 235.811 232.365 235.936 cv
232.365 235.936 li
232.365 235.936 li
232.365 235.936 li
232.12 235.965 231.871 235.979 231.622 235.979 cv
231.621 235.979 231.621 235.979 231.62 235.979 cv
level3{
gsave
clp
[4.20873e-009 -93.7428 93.7428 4.20873e-009 248.063 309.674 ]ct
/6 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.658823 .360784 .333333 ]
/C1 [.658823 .360784 .333333 ]
/N 1 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.658823 .360784 .333333 ]
/C1 [.756863 .584314 .341176 ]
/N 1 
>>
]
/Bounds [.0517977 ]
/Encode [0 1 0 1 ]
>>
>>/Gradient add_res /6 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.20873e-009 -93.7428 93.7428 4.20873e-009 248.063 309.674 ]ct
clp
/6 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~Vl-GjVl-GjVl-GjVl-JlW2QYnW2QYoWMukrWMukrWN)tuWiE)!WiE)"X/i;%X/i;%X/rD(XK8M)XK8P+
Xf\_-Xf\_-Y-+q1Y-+q1Y-+t3YHP.5YHP.6Yct@9Yct@9Yd(I<Z*CR=Z*CR>ZEgdAZEgdAZEpmDZa7!E
Za7$G['[3I['[3I[C*EM[C*EM[C*HO[^NWQ[^NWR\$riU\$riU\%&rX\@B&Y\@B&Z\[f8]\[f8]\[oA`
]"5Ja]"5Mc]=Y\e]=Y\e]Y(ni]Y(ni]Y(qk]tM+m]tM+n^:q=q^:q=q^;%Ft^V@Ou^V@P!^qdb$^qdb$
~>
<~>?b<9>?b<9>?b<9>?b?;>[1Q??!UcC?=$rF?XI/J?smAN@:<SR@U`eU@q0"YA7T4]AS#FaAnGXeAnPah
B4tslBPD0pBkhBtC2.O"CMRa&Ci!s*D/F0.DJj?1Df9Q5E,]c9EH,u=EcQ2@F)uDDFEDVHF`hhLG'8%P
G'A.SGBe@WG^4R[H$O^^H?spbH[C-fI!g?jI=6NmIXZ`qIt)ruJ:N0$JUrB'JqAT+K7ef/KS5#3KnY57
Knb>:L51P>LPUbBLl$tFM2@+IMMd=MMi3OQN/WaUNK&pXNfK-\O,o?`OH>QdOcbcgP*1ukPEV2oPa%Ds
~>
<~<)cgr<)cgr<)cgr<)cjt<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!
<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!
<E3%!<E3%"<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%
<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /6 /Gradient get_res exec grestore
}if
np
238.752 250.131 mo
235.173 248.497 233.802 246.362 233.471 245.534 cv
233.537 242.62 234.669 241.19 235.798 241.174 cv
235.806 241.174 235.814 241.174 235.822 241.174 cv
235.826 241.174 235.829 241.174 235.832 241.174 cv
236.24 241.177 236.68 241.317 237.136 241.445 cv
236.486 242.082 236.042 242.861 236.042 243.625 cv
236.042 243.634 236.042 243.644 236.042 243.653 cv
236.044 243.817 236.065 243.986 236.111 244.15 cv
236.448 245.382 237.485 246.077 238.657 246.699 cv
238.71 248.607 li
238.752 250.131 li
level3{
gsave
clp
[4.20873e-009 -93.7428 93.7428 4.20873e-009 248.063 309.674 ]ct
/5 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.20873e-009 -93.7428 93.7428 4.20873e-009 248.063 309.674 ]ct
clp
/5 /Gradient get_res exec grestore
}if
np
233.471 245.534 mo
233.416 245.388 233.388 245.286 233.387 245.229 cv
233.33 241.179 236.377 237.874 238.407 237.713 cv
238.484 240.473 li
237.996 240.724 237.53 241.059 237.136 241.445 cv
237.136 241.445 li
236.68 241.317 236.24 241.177 235.832 241.174 cv
235.829 241.174 235.826 241.174 235.822 241.174 cv
235.822 241.174 li
235.814 241.174 235.806 241.174 235.798 241.174 cv
234.669 241.19 233.537 242.62 233.471 245.534 cv
233.471 245.534 li
level3{
gsave
clp
[4.20873e-009 -93.7428 93.7428 4.20873e-009 248.063 309.674 ]ct
/4 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.20873e-009 -93.7428 93.7428 4.20873e-009 248.063 309.674 ]ct
clp
/4 /Gradient get_res exec grestore
}if
np
238.657 246.699 mo
237.485 246.077 236.448 245.382 236.111 244.15 cv
236.065 243.986 236.044 243.817 236.042 243.653 cv
236.042 243.644 236.042 243.634 236.042 243.625 cv
236.042 242.861 236.486 242.082 237.136 241.445 cv
237.53 241.059 237.996 240.724 238.484 240.473 cv
238.657 246.699 li
level3{
gsave
clp
[4.20873e-009 -93.7428 93.7428 4.20873e-009 248.063 309.674 ]ct
/6 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.20873e-009 -93.7428 93.7428 4.20873e-009 248.063 309.674 ]ct
clp
/6 /Gradient get_res exec grestore
}if
np
246.741 22.6746 mo
254.946 18.1515 265.262 21.1379 269.785 29.343 cv
274.308 37.5482 271.326 47.865 263.12 52.3881 cv
246.741 22.6746 li
.811765 .85098 .321569 rgb
f
247.506 24.0624 mo
255.245 20.952 264.256 23.4496 268.037 30.3075 cv
271.817 37.1649 269.103 46.0916 262.341 50.9748 cv
261.346 49.1684 li
267.27 44.8898 269.285 37.2559 266.057 31.3988 cv
262.828 25.5413 255.297 23.1694 248.516 25.8949 cv
247.506 24.0624 li
.87451 .862745 .647059 rgb
f
258.26 39.7279 mo
260.468 41.9105 263.654 42.2284 265.604 41.1791 cv
266.609 40.6387 266.58 38.8786 265.974 37.7787 cv
265.375 36.6916 263.875 36.0797 261.58 37.3448 cv
260.388 38.0015 258.244 39.7116 258.26 39.7279 cv
.870588 .847059 .513726 rgb
f
259.553 42.2602 mo
259.452 44.4033 260.762 46.1873 262.202 46.7042 cv
262.944 46.9705 263.835 46.142 264.12 45.322 cv
264.402 44.5116 264.023 43.4581 262.312 42.8638 cv
261.423 42.5553 259.554 42.2442 259.553 42.2602 cv
f
255.248 33.6602 mo
253.88 30.8326 254.604 27.6999 256.233 26.1989 cv
257.071 25.426 258.739 26.0424 259.592 26.9865 cv
260.434 27.9197 260.534 29.5492 258.589 31.3055 cv
257.579 32.2172 255.258 33.6813 255.248 33.6602 cv
cp
.886275 .878431 .635294 rgb
f
253.198 30.9277 mo
251.242 30.064 250.237 28.12 250.42 26.6238 cv
250.514 25.8533 251.651 25.4379 252.509 25.5518 cv
253.357 25.6645 254.127 26.4658 253.892 28.2341 cv
253.77 29.152 253.212 30.9342 253.198 30.9277 cv
cp
f
256.314 36.2747 mo
259.271 37.3925 262.713 36.144 264.458 34.1228 cv
265.357 33.0821 264.814 31.3174 263.857 30.5047 cv
262.91 29.7014 261.155 29.8221 259.111 32.2313 cv
258.049 33.4819 256.292 36.2663 256.314 36.2747 cv
f
261.255 65.0745 mo
267.909 71.671 267.953 82.41 261.357 89.0635 cv
254.76 95.7173 244.021 95.7658 237.368 89.1694 cv
261.255 65.0745 li
.811765 .85098 .321569 rgb
f
260.139 66.1999 mo
265.306 72.7475 265.452 82.0972 259.938 87.6583 cv
254.425 93.2191 245.096 93.1334 238.504 88.0235 cv
239.956 86.5586 li
245.732 91.0363 253.624 90.8163 258.333 86.0667 cv
263.042 81.3168 263.194 73.423 258.666 67.6859 cv
260.139 66.1999 li
.87451 .862745 .647059 rgb
f
248.143 80.936 mo
246.672 83.6697 247.265 86.8161 248.822 88.3913 cv
249.624 89.2024 251.304 88.6786 252.189 87.7867 cv
253.063 86.9052 253.227 85.2936 251.365 83.4484 cv
250.399 82.4906 248.154 80.9156 248.143 80.936 cv
.870588 .847059 .513726 rgb
f
246.078 82.8902 mo
243.994 83.3981 242.651 85.1577 242.562 86.6857 cv
242.516 87.4725 243.562 88.0939 244.429 88.1358 cv
245.286 88.1773 246.19 87.5164 246.277 85.7072 cv
246.322 84.7682 246.094 82.8864 246.078 82.8902 cv
f
253.115 76.3347 mo
255.442 74.2249 258.652 74.0362 260.551 75.1751 cv
261.529 75.7615 261.408 77.5355 260.743 78.6198 cv
260.085 79.6912 258.55 80.2462 256.316 78.8754 cv
255.157 78.1636 253.097 76.3506 253.115 76.3347 cv
.886275 .878431 .635294 rgb
f
255.158 73.5969 mo
255.435 71.4769 257.017 69.9643 258.504 69.7178 cv
259.27 69.5909 259.989 70.5643 260.121 71.4199 cv
260.253 72.2655 259.701 73.2301 257.938 73.5036 cv
257.023 73.6456 255.156 73.6127 255.158 73.5969 cv
f
250.907 78.095 mo
250.668 81.2464 252.837 84.1969 255.269 85.3011 cv
256.521 85.8697 258.061 84.8518 258.57 83.7039 cv
259.074 82.5694 258.463 80.9196 255.575 79.6374 cv
254.076 78.9717 250.909 78.0715 250.907 78.095 cv
f
245.521 76.2129 mo
236.623 73.2783 231.792 63.6873 234.726 54.7894 cv
237.661 45.8916 247.25 41.0566 256.148 43.9912 cv
245.521 76.2129 li
.811765 .85098 .321569 rgb
f
246.017 74.7079 mo
238.472 71.1536 234.17 62.851 236.623 55.4142 cv
239.075 47.9779 247.463 43.8919 255.642 45.5237 cv
254.996 47.4827 li
247.829 46.0526 240.864 49.7708 238.77 56.1222 cv
236.675 62.4744 240.061 69.6065 246.672 72.7208 cv
246.017 74.7079 li
.87451 .862745 .647059 rgb
f
250.178 56.1676 mo
250.275 53.0645 248.34 50.5135 246.244 49.7984 cv
245.165 49.4302 243.894 50.6488 243.501 51.8416 cv
243.112 53.0205 243.684 54.536 246.173 55.3568 cv
247.465 55.7829 250.177 56.1906 250.178 56.1676 cv
.870588 .847059 .513726 rgb
f
251.154 53.4972 mo
252.793 52.1126 253.209 49.939 252.608 48.5316 cv
252.298 47.8068 251.084 47.7175 250.29 48.0668 cv
249.504 48.4122 248.99 49.4068 249.719 51.0648 cv
250.097 51.9256 251.142 53.5076 251.154 53.4972 cv
f
247.782 62.5036 mo
246.641 65.4301 243.852 67.031 241.644 66.8593 cv
240.507 66.7709 239.824 65.1293 239.936 63.8622 cv
240.046 62.6098 241.173 61.4279 243.783 61.6583 cv
245.138 61.7778 247.79 62.4817 247.782 62.5036 cv
.886275 .878431 .635294 rgb
f
247.175 65.8655 mo
247.873 67.8864 247.132 69.9457 245.911 70.8299 cv
245.283 71.2851 244.205 70.7349 243.704 70.0284 cv
243.209 69.3302 243.273 68.2208 244.728 67.1895 cv
245.484 66.6542 247.169 65.8504 247.175 65.8655 cv
f
248.972 59.9433 mo
247.779 57.0165 244.522 55.3436 241.854 55.4402 cv
240.48 55.4899 239.555 57.0881 239.611 58.3428 cv
239.667 59.5829 240.95 60.7868 244.106 60.6458 cv
245.745 60.5725 248.981 59.9652 248.972 59.9433 cv
f
264.015 122.519 mo
266.588 121.573 li
233.968 32.869 li
231.395 33.8152 li
264.015 122.519 li
1 .788235 .419608 rgb
f
218.325 29.9474 mo
217.725 29.0667 217.251 28.3703 216.652 27.4896 cv
222.914 23.5177 231.243 26.0819 234.186 32.8877 cv
233.195 33.279 232.26 33.4702 231.269 33.8614 cv
229.127 28.9072 222.883 27.0562 218.325 29.9474 cv
cp
.886275 .686275 .392157 rgb
f
198.579 41.9737 mo
218.218 29.7766 li
216.834 27.5474 li
197.195 39.7445 li
198.579 41.9737 li
cp
1 .788235 .419608 rgb
f
230.837 33.1559 mo
233.68 31.3096 li
232.911 30.126 li
230.068 31.9723 li
230.837 33.1559 li
cp
f
229.715 31.4851 mo
231.746 28.7717 li
230.637 27.9415 li
228.606 30.6549 li
229.715 31.4851 li
cp
f
227.839 30.0888 mo
229.545 27.1603 li
228.365 26.4728 li
226.659 29.4013 li
227.839 30.0888 li
cp
f
225.941 29.1709 mo
226.86 25.9086 li
225.369 25.4882 li
224.449 28.7505 li
225.941 29.1709 li
cp
f
223.79 28.7454 mo
223.698 25.3572 li
222.23 25.397 li
222.321 28.7851 li
223.79 28.7454 li
cp
f
220.995 28.9662 mo
220.098 25.6976 li
218.595 26.11 li
219.492 29.3785 li
220.995 28.9662 li
cp
f
256.915 41.1313 mo
243.565 41.1313 li
243.576 36.7776 li
243.577 36.2397 243.484 35.8001 243.368 35.8001 cv
235.766 35.8001 li
235.651 35.8001 235.557 36.2397 235.559 36.7776 cv
235.56 37.1973 li
235.046 35.8001 li
253.976 35.8001 li
256.915 41.1313 li
.960784 .952941 .952941 rgb
f
267.063 41.1313 mo
265.686 41.1313 li
266.607 40.5415 266.563 38.8481 265.974 37.7787 cv
265.612 37.1215 264.92 36.6378 263.922 36.6378 cv
263.27 36.6378 262.487 36.8446 261.58 37.3448 cv
260.388 38.0015 258.244 39.7116 258.26 39.7279 cv
258.877 40.3376 259.57 40.8018 260.291 41.1313 cv
256.915 41.1313 li
253.976 35.8001 li
256.602 35.8001 li
256.418 36.0907 256.309 36.2726 256.314 36.2747 cv
257.079 36.5639 257.877 36.6947 258.669 36.6947 cv
259.938 36.6947 261.195 36.3586 262.282 35.8001 cv
266.99 35.8001 li
267.179 35.8001 267.356 35.8546 267.505 35.9489 cv
267.704 37.6718 267.548 39.4328 267.063 41.1313 cv
.921569 .921569 .811765 rgb
f
267.904 41.1313 mo
267.063 41.1313 li
267.548 39.4328 267.704 37.6718 267.505 35.9489 cv
267.779 36.1221 267.96 36.4292 267.956 36.7776 cv
267.904 41.1313 li
.933333 .92549 .878431 rgb
f
265.686 41.1313 mo
260.291 41.1313 li
259.57 40.8018 258.877 40.3376 258.26 39.7279 cv
258.244 39.7116 260.388 38.0015 261.58 37.3448 cv
262.487 36.8446 263.27 36.6378 263.922 36.6378 cv
264.92 36.6378 265.612 37.1215 265.974 37.7787 cv
266.563 38.8481 266.607 40.5415 265.686 41.1313 cv
.933333 .921569 .85098 rgb
f
258.669 36.6947 mo
257.877 36.6947 257.079 36.5639 256.314 36.2747 cv
256.309 36.2726 256.418 36.0907 256.602 35.8001 cv
262.282 35.8001 li
261.195 36.3586 259.938 36.6947 258.669 36.6947 cv
.937255 .929412 .87451 rgb
f
234.085 41.1313 mo
230.712 41.1313 li
230.66 36.7776 li
230.654 36.2397 231.089 35.8001 231.627 35.8001 cv
232.124 35.8001 li
234.085 41.1313 li
.960784 .952941 .952941 rgb
f
235.57 41.1313 mo
234.085 41.1313 li
232.124 35.8001 li
235.046 35.8001 li
235.56 37.1973 li
235.57 41.1313 li
.960784 .909804 .831372 rgb
f
267.417 83.1309 mo
267.097 110.432 li
231.519 110.432 li
231.199 83.1309 li
267.417 83.1309 li
.176471 .00784314 0 rgb
f
267.097 110.432 mo
266.84 132.564 li
231.776 132.564 li
231.519 110.432 li
267.097 110.432 li
.333333 .113725 .0901961 rgb
f
266.84 132.564 mo
266.725 142.256 li
231.891 142.256 li
231.776 132.564 li
266.84 132.564 li
.980392 .972549 .972549 rgb
f
266.725 142.256 mo
266.693 145.007 li
266.682 145.99 265.882 146.78 264.899 146.78 cv
233.717 146.78 li
232.734 146.78 231.935 145.99 231.923 145.007 cv
231.891 142.256 li
266.725 142.256 li
.662745 .643137 .627451 rgb
f
267.417 83.1309 mo
265.178 83.1309 li
267.475 77.0596 266.163 69.9401 261.255 65.0745 cv
249.99 76.4374 li
247.595 69.9243 li
255.379 46.322 li
255.642 45.5237 li
255.642 45.5237 li
256.148 43.9912 li
254.384 43.4094 252.593 43.133 250.832 43.133 cv
248.286 43.133 245.803 43.7109 243.556 44.7795 cv
243.565 41.1313 li
256.915 41.1313 li
263.12 52.3881 li
264.956 51.376 266.531 50.074 267.818 48.5703 cv
267.417 83.1309 li
243.46 83.0238 mo
243.479 75.3912 li
244.133 75.7045 244.814 75.9798 245.521 76.2129 cv
246.214 74.1123 li
247.859 78.5869 li
243.46 83.0238 li
.854902 .776471 .611765 rgb
f
263.12 52.3881 mo
256.915 41.1313 li
260.291 41.1313 li
261.222 41.5565 262.2 41.7575 263.12 41.7576 cv
264.04 41.7576 264.902 41.557 265.604 41.1791 cv
265.632 41.1641 265.659 41.1481 265.686 41.1313 cv
267.063 41.1313 li
266.186 44.2107 264.228 47.0866 261.346 49.1684 cv
262.341 50.9748 li
264.718 49.2586 266.594 47.043 267.864 44.5934 cv
267.818 48.5703 li
267.818 48.5703 li
266.531 50.074 264.956 51.376 263.12 52.3881 cv
259.556 42.2596 mo
259.554 42.2596 259.553 42.2598 259.553 42.2602 cv
259.452 44.4033 260.762 46.1873 262.202 46.7042 cv
262.299 46.7389 262.398 46.755 262.498 46.755 cv
263.166 46.755 263.872 46.0353 264.12 45.322 cv
264.402 44.5116 264.023 43.4581 262.312 42.8638 cv
261.445 42.563 259.646 42.2596 259.556 42.2596 cv
.819608 .780392 .439216 rgb
f
262.341 50.9748 mo
261.346 49.1684 li
264.228 47.0866 266.186 44.2107 267.063 41.1313 cv
267.904 41.1313 li
267.864 44.5934 li
266.594 47.043 264.718 49.2586 262.341 50.9748 cv
.847059 .784314 .576471 rgb
f
263.12 41.7576 mo
262.2 41.7575 261.222 41.5565 260.291 41.1313 cv
265.686 41.1313 li
265.659 41.1481 265.632 41.1641 265.604 41.1791 cv
264.902 41.557 264.04 41.7576 263.12 41.7576 cv
.843137 .776471 .521569 rgb
f
262.498 46.755 mo
262.398 46.755 262.299 46.7389 262.202 46.7042 cv
260.762 46.1873 259.452 44.4033 259.553 42.2602 cv
259.553 42.2598 259.554 42.2596 259.556 42.2596 cv
259.646 42.2596 261.445 42.563 262.312 42.8638 cv
264.023 43.4581 264.402 44.5116 264.12 45.322 cv
263.872 46.0353 263.166 46.755 262.498 46.755 cv
f
265.178 83.1309 mo
262.922 83.1309 li
265.098 77.804 264.076 71.1886 260.139 66.1999 cv
258.666 67.6859 li
262.353 72.3581 262.937 78.4608 260.483 83.1309 cv
258.721 83.1309 li
258.824 82.0571 258.007 80.717 255.575 79.6374 cv
254.095 78.9803 250.99 78.0946 250.909 78.0946 cv
250.908 78.0946 250.907 78.0947 250.907 78.095 cv
250.887 78.3674 250.884 78.6381 250.898 78.9064 cv
249.99 76.4374 li
261.255 65.0745 li
266.163 69.9401 267.475 77.0596 265.178 83.1309 cv
265.178 83.1309 li
257.828 74.4835 mo
256.258 74.4835 254.524 75.0566 253.115 76.3347 cv
253.097 76.3506 255.157 78.1636 256.316 78.8754 cv
257.256 79.4521 258.072 79.6879 258.751 79.6879 cv
259.686 79.6879 260.362 79.2404 260.743 78.6198 cv
261.408 77.5355 261.529 75.7615 260.551 75.1751 cv
259.802 74.7261 258.85 74.4835 257.828 74.4835 cv
258.64 69.7066 mo
258.595 69.7066 258.549 69.7102 258.504 69.7178 cv
257.017 69.9643 255.435 71.4769 255.158 73.5969 cv
255.157 73.6031 255.44 73.6118 255.839 73.6118 cv
256.466 73.6118 257.38 73.5903 257.938 73.5036 cv
259.701 73.2301 260.253 72.2655 260.121 71.4199 cv
259.997 70.6153 259.353 69.7066 258.64 69.7066 cv
252.563 83.1309 mo
252.451 83.1309 li
252.347 82.8463 li
252.417 82.943 252.489 83.0378 252.563 83.1309 cv
247.393 83.1309 mo
246.114 83.1309 li
246.095 82.9803 246.082 82.8902 246.078 82.8902 cv
246.078 82.8902 246.078 82.8902 246.078 82.8902 cv
245.822 82.9525 245.578 83.0336 245.345 83.1309 cv
243.46 83.1309 li
243.46 83.0238 li
247.859 78.5869 li
248.921 81.4757 li
248.477 81.1535 248.158 80.9358 248.144 80.9358 cv
248.143 80.9358 248.143 80.9359 248.143 80.936 cv
247.758 81.6513 247.514 82.3946 247.393 83.1309 cv
.819608 .780392 .439216 rgb
f
262.922 83.1309 mo
260.483 83.1309 li
262.937 78.4608 262.353 72.3581 258.666 67.6859 cv
260.139 66.1999 li
264.076 71.1886 265.098 77.804 262.922 83.1309 cv
.847059 .784314 .576471 rgb
f
249.53 83.1309 mo
247.393 83.1309 li
247.514 82.3946 247.758 81.6513 248.143 80.936 cv
248.143 80.9359 248.143 80.9358 248.144 80.9358 cv
248.158 80.9358 248.477 81.1535 248.921 81.4757 cv
249.53 83.1309 li
.843137 .776471 .521569 rgb
f
246.114 83.1309 mo
245.345 83.1309 li
245.578 83.0336 245.822 82.9525 246.078 82.8902 cv
246.078 82.8902 246.078 82.8902 246.078 82.8902 cv
246.082 82.8902 246.095 82.9803 246.114 83.1309 cv
f
258.751 79.6879 mo
258.072 79.6879 257.256 79.4521 256.316 78.8754 cv
255.157 78.1636 253.097 76.3506 253.115 76.3347 cv
254.524 75.0566 256.258 74.4835 257.828 74.4835 cv
258.85 74.4835 259.802 74.7261 260.551 75.1751 cv
261.529 75.7615 261.408 77.5355 260.743 78.6198 cv
260.362 79.2404 259.686 79.6879 258.751 79.6879 cv
.85098 .792157 .572549 rgb
f
255.839 73.6118 mo
255.44 73.6118 255.157 73.6031 255.158 73.5969 cv
255.435 71.4769 257.017 69.9643 258.504 69.7178 cv
258.549 69.7102 258.595 69.7066 258.64 69.7066 cv
259.353 69.7066 259.997 70.6153 260.121 71.4199 cv
260.253 72.2655 259.701 73.2301 257.938 73.5036 cv
257.38 73.5903 256.466 73.6118 255.839 73.6118 cv
f
258.721 83.1309 mo
252.563 83.1309 li
252.489 83.0378 252.417 82.943 252.347 82.8463 cv
250.898 78.9064 li
250.884 78.6381 250.887 78.3674 250.907 78.095 cv
250.907 78.0947 250.908 78.0946 250.909 78.0946 cv
250.99 78.0946 254.095 78.9803 255.575 79.6374 cv
258.007 80.717 258.824 82.0571 258.721 83.1309 cv
f
245.521 76.2129 mo
244.814 75.9798 244.133 75.7045 243.479 75.3912 cv
243.485 73.2588 li
244.28 73.8021 245.125 74.288 246.017 74.7079 cv
246.214 74.1123 li
246.214 74.1123 li
245.521 76.2129 li
245.47 72.0902 mo
244.766 71.6815 244.105 71.2246 243.491 70.727 cv
243.494 69.6069 li
243.542 69.7591 243.614 69.9006 243.704 70.0284 cv
244.014 70.4658 244.545 70.8433 245.054 70.9594 cv
245.47 72.0902 li
247.595 69.9243 mo
247.222 68.9095 li
247.511 68.0019 247.542 66.9284 247.175 65.8655 cv
247.175 65.8653 247.174 65.8652 247.174 65.8652 cv
247.157 65.8652 246.757 66.0521 246.264 66.3051 cv
245.877 65.2524 li
246.669 64.5463 247.346 63.6216 247.782 62.5036 cv
247.789 62.4856 245.988 62.004 244.596 61.7684 cv
244.181 60.6421 li
245.841 60.5544 248.981 59.9649 248.972 59.9433 cv
248.021 57.6104 245.759 56.0742 243.529 55.5957 cv
243.534 53.296 li
243.838 54.0858 244.644 54.8524 246.173 55.3568 cv
247.43 55.7714 250.031 56.1685 250.172 56.1685 cv
250.176 56.1685 250.178 56.1682 250.178 56.1676 cv
250.275 53.0645 248.34 50.5135 246.244 49.7984 cv
246.11 49.7528 245.974 49.7316 245.836 49.7316 cv
244.897 49.7316 243.915 50.7252 243.538 51.7348 cv
243.543 49.7668 li
245.898 48.113 248.827 47.1776 251.928 47.1776 cv
252.937 47.1776 253.965 47.2768 254.996 47.4827 cv
255.379 46.322 li
247.595 69.9243 li
251.271 47.8692 mo
250.931 47.8692 250.582 47.9383 250.29 48.0668 cv
249.504 48.4122 248.99 49.4068 249.719 51.0648 cv
250.096 51.9227 251.135 53.4972 251.154 53.4972 cv
251.154 53.4972 251.154 53.4972 251.154 53.4972 cv
252.793 52.1126 253.209 49.939 252.608 48.5316 cv
252.412 48.0734 251.855 47.8692 251.271 47.8692 cv
243.496 68.695 mo
243.501 66.7358 li
243.933 67.91 li
243.713 68.1767 243.572 68.4411 243.496 68.695 cv
243.549 47.299 mo
243.556 44.7795 li
245.803 43.7109 248.286 43.133 250.832 43.133 cv
252.593 43.133 254.384 43.4094 256.148 43.9912 cv
255.642 45.5237 li
254.438 45.2835 253.23 45.1673 252.037 45.1673 cv
249.003 45.1673 246.066 45.9191 243.549 47.299 cv
.819608 .780392 .439216 rgb
f
246.017 74.7079 mo
245.125 74.288 244.28 73.8021 243.485 73.2588 cv
243.491 70.727 li
244.105 71.2246 244.766 71.6815 245.47 72.0902 cv
246.214 74.1123 li
246.017 74.7079 li
243.543 49.7668 mo
243.549 47.299 li
246.066 45.9191 249.003 45.1673 252.037 45.1673 cv
253.23 45.1673 254.438 45.2835 255.642 45.5237 cv
255.642 45.5237 li
255.379 46.322 li
254.996 47.4827 li
253.965 47.2768 252.937 47.1776 251.928 47.1776 cv
248.827 47.1776 245.898 48.113 243.543 49.7668 cv
.847059 .784314 .576471 rgb
f
250.172 56.1685 mo
250.031 56.1685 247.43 55.7714 246.173 55.3568 cv
244.644 54.8524 243.838 54.0858 243.534 53.296 cv
243.538 51.7348 li
243.915 50.7252 244.897 49.7316 245.836 49.7316 cv
245.974 49.7316 246.11 49.7528 246.244 49.7984 cv
248.34 50.5135 250.275 53.0645 250.178 56.1676 cv
250.178 56.1682 250.176 56.1685 250.172 56.1685 cv
.843137 .776471 .521569 rgb
f
251.154 53.4972 mo
251.135 53.4972 250.096 51.9227 249.719 51.0648 cv
248.99 49.4068 249.504 48.4122 250.29 48.0668 cv
250.582 47.9383 250.931 47.8692 251.271 47.8692 cv
251.855 47.8692 252.412 48.0734 252.608 48.5316 cv
253.209 49.939 252.793 52.1126 251.154 53.4972 cv
251.154 53.4972 251.154 53.4972 251.154 53.4972 cv
f
245.877 65.2524 mo
244.596 61.7684 li
245.988 62.004 247.789 62.4856 247.782 62.5036 cv
247.346 63.6216 246.669 64.5463 245.877 65.2524 cv
.85098 .792157 .572549 rgb
f
245.054 70.9594 mo
244.545 70.8433 244.014 70.4658 243.704 70.0284 cv
243.614 69.9006 243.542 69.7591 243.494 69.6069 cv
243.496 68.695 li
243.572 68.4411 243.713 68.1767 243.933 67.91 cv
245.054 70.9594 li
247.222 68.9095 mo
246.264 66.3051 li
246.757 66.0521 247.157 65.8652 247.174 65.8652 cv
247.174 65.8652 247.175 65.8653 247.175 65.8655 cv
247.542 66.9284 247.511 68.0019 247.222 68.9095 cv
f
244.181 60.6421 mo
243.521 58.8453 li
243.529 55.5957 li
245.759 56.0742 248.021 57.6104 248.972 59.9433 cv
248.981 59.9649 245.841 60.5544 244.181 60.6421 cv
f
252.451 83.1309 mo
249.53 83.1309 li
248.921 81.4757 li
247.859 78.5869 li
246.214 74.1123 li
246.214 74.1123 li
245.47 72.0902 li
245.054 70.9594 li
243.933 67.91 li
243.501 66.7358 li
243.521 58.8453 li
244.181 60.6421 li
244.596 61.7684 li
245.877 65.2524 li
246.264 66.3051 li
247.222 68.9095 li
247.595 69.9243 li
249.99 76.4374 li
250.898 78.9064 li
252.347 82.8463 li
252.451 83.1309 li
.898039 .752941 .478431 rgb
f
267.417 83.1309 mo
243.46 83.1309 li
245.345 83.1309 li
246.114 83.1309 li
247.393 83.1309 li
249.53 83.1309 li
252.451 83.1309 li
252.563 83.1309 li
258.721 83.1309 li
260.483 83.1309 li
262.922 83.1309 li
265.178 83.1309 li
267.417 83.1309 li
.545098 .415686 .298039 rgb
f
235.674 83.1309 mo
231.199 83.1309 li
230.712 41.1313 li
234.085 41.1313 li
235.58 45.196 li
235.598 52.6435 li
235.264 53.329 234.972 54.0449 234.726 54.7894 cv
233.272 59.1998 233.725 63.7801 235.636 67.636 cv
235.674 83.1309 li
.854902 .776471 .611765 rgb
f
235.636 67.636 mo
233.725 63.7801 233.272 59.1998 234.726 54.7894 cv
234.972 54.0449 235.264 53.329 235.598 52.6435 cv
235.636 67.636 li
.819608 .780392 .439216 rgb
f
235.58 45.196 mo
234.085 41.1313 li
235.57 41.1313 li
235.58 45.196 li
.898039 .752941 .478431 rgb
f
243.391 110.432 mo
235.743 110.432 li
235.674 83.1309 li
243.46 83.1309 li
243.391 110.432 li
.498039 .392157 .388235 rgb
f
243.336 132.564 mo
235.798 132.564 li
235.743 110.432 li
243.391 110.432 li
243.336 132.564 li
.592157 .458824 .443137 rgb
f
243.565 41.1313 mo
237.006 41.1313 li
235.56 37.1973 li
235.559 36.7776 li
235.557 36.2397 235.651 35.8001 235.766 35.8001 cv
243.368 35.8001 li
243.484 35.8001 243.577 36.2397 243.576 36.7776 cv
243.565 41.1313 li
.976471 .972549 .972549 rgb
f
237.006 41.1313 mo
235.57 41.1313 li
235.56 37.1973 li
237.006 41.1313 li
.976471 .945098 .898039 rgb
f
243.311 142.256 mo
235.823 142.256 li
235.798 132.564 li
243.336 132.564 li
243.311 142.256 li
.988235 .984314 .984314 rgb
f
242.919 146.78 mo
236.216 146.78 li
236.004 146.78 235.832 145.99 235.83 145.007 cv
235.823 142.256 li
243.311 142.256 li
243.304 145.007 li
243.302 145.99 243.13 146.78 242.919 146.78 cv
.792157 .780392 .772549 rgb
f
243.354 83.1309 mo
235.674 83.1309 li
235.636 67.636 li
237.274 70.9416 239.983 73.7147 243.479 75.3912 cv
243.46 83.0238 li
243.354 83.1309 li
235.598 52.6435 mo
235.58 45.196 li
237.299 49.8715 li
236.653 50.7272 236.081 51.6535 235.598 52.6435 cv
239.38 47.5867 mo
237.006 41.1313 li
243.565 41.1313 li
243.556 44.7795 li
242.039 45.5006 240.629 46.4455 239.38 47.5867 cv
.909804 .862745 .760784 rgb
f
243.46 83.1309 mo
243.354 83.1309 li
243.46 83.0238 li
243.46 83.1309 li
.890196 .866667 .658823 rgb
f
243.479 75.3912 mo
239.983 73.7147 237.274 70.9416 235.636 67.636 cv
235.598 52.6435 li
236.081 51.6535 236.653 50.7272 237.299 49.8715 cv
238.162 52.2166 li
237.522 53.1967 237.002 54.2654 236.623 55.4142 cv
234.46 61.9722 237.55 69.204 243.485 73.2588 cv
243.479 75.3912 li
243.491 70.727 mo
239.038 67.1179 237.044 61.3554 238.77 56.1222 cv
238.894 55.7454 239.035 55.3783 239.193 55.0206 cv
239.903 56.9518 li
239.697 57.4017 239.591 57.8942 239.611 58.3428 cv
239.644 59.0701 240.099 59.785 241.106 60.2233 cv
241.698 61.8333 li
240.55 62.2009 240.01 63.0155 239.936 63.8622 cv
239.824 65.1293 240.507 66.7709 241.644 66.8593 cv
241.752 66.8677 241.861 66.8718 241.971 66.8718 cv
242.454 66.8718 242.959 66.7916 243.464 66.6357 cv
243.501 66.7358 li
243.496 68.695 li
243.398 69.0223 243.407 69.3321 243.494 69.6069 cv
243.491 70.727 li
243.529 55.5957 mo
243.104 55.5046 242.681 55.4519 242.268 55.4392 cv
241.029 52.0698 li
241.759 51.1974 242.606 50.4252 243.543 49.7668 cv
243.538 51.7348 li
243.525 51.7704 243.512 51.806 243.501 51.8416 cv
243.351 52.2961 243.344 52.8006 243.534 53.296 cv
243.529 55.5957 li
240.183 49.7703 mo
239.38 47.5867 li
240.629 46.4455 242.039 45.5006 243.556 44.7795 cv
243.549 47.299 li
242.314 47.9764 241.179 48.8049 240.183 49.7703 cv
f
243.485 73.2588 mo
237.55 69.204 234.46 61.9722 236.623 55.4142 cv
237.002 54.2654 237.522 53.1967 238.162 52.2166 cv
239.193 55.0206 li
239.035 55.3783 238.894 55.7454 238.77 56.1222 cv
237.044 61.3554 239.038 67.1179 243.491 70.727 cv
243.485 73.2588 li
241.029 52.0698 mo
240.183 49.7703 li
241.179 48.8049 242.314 47.9764 243.549 47.299 cv
243.543 49.7668 li
242.606 50.4252 241.759 51.1974 241.029 52.0698 cv
.905882 .866667 .741176 rgb
f
243.534 53.296 mo
243.344 52.8006 243.351 52.2961 243.501 51.8416 cv
243.512 51.806 243.525 51.7704 243.538 51.7348 cv
243.534 53.296 li
.905882 .862745 .705882 rgb
f
241.971 66.8718 mo
241.861 66.8718 241.752 66.8677 241.644 66.8593 cv
240.507 66.7709 239.824 65.1293 239.936 63.8622 cv
240.01 63.0155 240.55 62.2009 241.698 61.8333 cv
243.464 66.6357 li
242.959 66.7916 242.454 66.8718 241.971 66.8718 cv
.909804 .87451 .737255 rgb
f
243.494 69.6069 mo
243.407 69.3321 243.398 69.0223 243.496 68.695 cv
243.494 69.6069 li
f
241.106 60.2233 mo
240.099 59.785 239.644 59.0701 239.611 58.3428 cv
239.591 57.8942 239.697 57.4017 239.903 56.9518 cv
241.106 60.2233 li
243.521 58.8453 mo
242.268 55.4392 li
242.681 55.4519 243.104 55.5046 243.529 55.5957 cv
243.521 58.8453 li
f
243.501 66.7358 mo
243.464 66.6357 li
241.698 61.8333 li
241.106 60.2233 li
239.903 56.9518 li
239.193 55.0206 li
238.162 52.2166 li
237.299 49.8715 li
235.58 45.196 li
235.57 41.1313 li
237.006 41.1313 li
239.38 47.5867 li
240.183 49.7703 li
241.029 52.0698 li
242.268 55.4392 li
243.521 58.8453 li
243.501 66.7358 li
.937255 .847059 .682353 rgb
f
243.46 83.1309 mo
235.674 83.1309 li
243.354 83.1309 li
243.46 83.1309 li
.721569 .643137 .568627 rgb
f
289.45 374.427 mo
287.012 375.017 283.757 374.308 282.204 372.203 cv
282.193 372.187 285.073 371.081 286.568 370.708 cv
289.448 369.989 290.815 370.703 291.059 371.681 cv
291.306 372.671 290.706 374.123 289.45 374.427 cv
286.36 381.097 mo
285.432 381.49 284.039 380.827 282.882 378.093 cv
282.282 376.674 281.434 373.708 281.454 373.707 cv
284.069 373.682 286.592 375.858 287.587 378.161 cv
288.099 379.346 287.3 380.699 286.36 381.097 cv
280.301 383.122 mo
279.311 383.369 277.859 382.768 277.555 381.513 cv
276.965 379.075 277.674 375.82 279.779 374.267 cv
279.794 374.255 280.901 377.135 281.274 378.631 cv
281.993 381.511 281.279 382.878 280.301 383.122 cv
273.821 379.65 mo
272.636 380.162 271.283 379.362 270.885 378.423 cv
270.492 377.494 271.155 376.102 273.889 374.945 cv
275.308 374.344 278.274 373.497 278.274 373.516 cv
278.299 376.132 276.124 378.655 273.821 379.65 cv
268.86 372.363 mo
268.613 371.373 269.213 369.921 270.469 369.618 cv
272.907 369.028 276.162 369.736 277.715 371.841 cv
277.726 371.857 274.846 372.963 273.351 373.336 cv
270.471 374.055 269.104 373.342 268.86 372.363 cv
273.559 362.948 mo
274.488 362.554 275.88 363.218 277.037 365.951 cv
277.637 367.37 278.485 370.337 278.465 370.337 cv
275.85 370.362 273.327 368.187 272.332 365.884 cv
271.82 364.698 272.619 363.345 273.559 362.948 cv
279.618 360.923 mo
280.608 360.676 282.06 361.276 282.364 362.531 cv
282.954 364.97 282.245 368.225 280.14 369.777 cv
280.125 369.789 279.018 366.909 278.645 365.414 cv
277.926 362.534 278.64 361.167 279.618 360.923 cv
286.098 364.395 mo
287.284 363.883 288.636 364.682 289.034 365.622 cv
289.427 366.55 288.764 367.942 286.03 369.099 cv
284.611 369.7 281.645 370.548 281.645 370.528 cv
281.62 367.912 283.795 365.389 286.098 364.395 cv
288.884 363.479 mo
287.883 362.433 286.719 361.61 285.453 361.014 cv
284.216 360.361 282.859 359.926 281.421 359.754 cv
279.576 359.535 277.757 359.769 276.069 360.38 cv
274.352 360.907 272.758 361.813 271.416 363.098 cv
270.37 364.099 269.548 365.263 268.951 366.529 cv
268.299 367.766 267.863 369.123 267.692 370.561 cv
267.472 372.406 267.706 374.224 268.318 375.913 cv
268.844 377.629 269.75 379.223 271.035 380.566 cv
272.036 381.611 273.2 382.434 274.466 383.03 cv
275.703 383.683 277.061 384.119 278.498 384.29 cv
280.343 384.51 282.162 384.276 283.85 383.664 cv
285.567 383.138 287.161 382.232 288.503 380.947 cv
289.549 379.945 290.371 378.782 290.968 377.516 cv
291.621 376.278 292.056 374.921 292.227 373.483 cv
292.447 371.638 292.213 369.82 291.602 368.132 cv
291.075 366.415 290.169 364.821 288.884 363.479 cv
.890196 .933333 .67451 rgb
f
292.821 378.441 mo
292.147 379.933 291.199 381.305 289.971 382.481 cv
288.398 383.987 286.52 385.022 284.498 385.604 cv
282.533 386.354 280.41 386.657 278.247 386.399 cv
276.559 386.198 274.977 385.671 273.541 384.884 cv
272.049 384.21 270.677 383.262 269.501 382.034 cv
267.994 380.46 266.959 378.582 266.378 376.561 cv
265.627 374.596 265.325 372.473 265.583 370.31 cv
265.784 368.622 266.311 367.039 267.098 365.603 cv
267.772 364.111 268.72 362.739 269.948 361.564 cv
271.522 360.057 273.4 359.022 275.421 358.44 cv
277.386 357.69 279.509 357.388 281.672 357.646 cv
283.36 357.847 284.942 358.373 286.378 359.16 cv
287.87 359.834 289.242 360.782 290.418 362.01 cv
291.925 363.584 292.96 365.462 293.541 367.483 cv
294.292 369.448 294.594 371.571 294.336 373.735 cv
294.135 375.423 293.609 377.005 292.821 378.441 cv
295.436 366.85 mo
294.72 364.622 293.501 362.518 291.773 360.714 cv
290.433 359.314 288.899 358.211 287.253 357.408 cv
285.621 356.576 283.818 356.012 281.893 355.783 cv
279.413 355.488 276.998 355.778 274.788 356.546 cv
272.56 357.262 270.455 358.481 268.651 360.208 cv
267.251 361.549 266.148 363.083 265.345 364.729 cv
264.513 366.36 263.95 368.164 263.72 370.088 cv
263.425 372.568 263.716 374.983 264.483 377.194 cv
265.199 379.422 266.419 381.526 268.146 383.331 cv
269.486 384.731 271.02 385.833 272.666 386.636 cv
274.298 387.469 276.101 388.032 278.026 388.261 cv
280.506 388.557 282.921 388.266 285.131 387.498 cv
287.359 386.783 289.464 385.563 291.268 383.836 cv
292.668 382.496 293.771 380.961 294.574 379.315 cv
295.406 377.684 295.969 375.881 296.199 373.956 cv
296.494 371.476 296.203 369.061 295.436 366.85 cv
.247059 .494118 .278431 rgb
f
290.968 377.516 mo
290.371 378.782 289.549 379.945 288.503 380.947 cv
287.161 382.232 285.567 383.138 283.85 383.664 cv
282.162 384.276 280.343 384.51 278.498 384.29 cv
277.061 384.119 275.703 383.683 274.466 383.03 cv
273.2 382.434 272.036 381.611 271.035 380.566 cv
269.75 379.223 268.844 377.629 268.318 375.913 cv
267.706 374.224 267.472 372.406 267.692 370.561 cv
267.863 369.123 268.299 367.766 268.951 366.529 cv
269.548 365.263 270.37 364.099 271.416 363.098 cv
272.758 361.813 274.352 360.907 276.069 360.38 cv
277.757 359.769 279.576 359.535 281.421 359.754 cv
282.859 359.926 284.216 360.361 285.453 361.014 cv
286.719 361.61 287.883 362.433 288.884 363.479 cv
290.169 364.821 291.075 366.415 291.602 368.132 cv
292.213 369.82 292.447 371.638 292.227 373.483 cv
292.056 374.921 291.621 376.278 290.968 377.516 cv
290.418 362.01 mo
289.242 360.782 287.87 359.834 286.378 359.16 cv
284.942 358.373 283.36 357.847 281.672 357.646 cv
279.509 357.388 277.386 357.69 275.421 358.44 cv
273.4 359.022 271.522 360.057 269.948 361.564 cv
268.72 362.739 267.772 364.111 267.098 365.603 cv
266.311 367.039 265.784 368.622 265.583 370.31 cv
265.325 372.473 265.627 374.596 266.378 376.561 cv
266.959 378.582 267.994 380.46 269.501 382.034 cv
270.677 383.262 272.049 384.21 273.541 384.884 cv
274.977 385.671 276.559 386.198 278.247 386.399 cv
280.41 386.657 282.533 386.354 284.498 385.604 cv
286.52 385.022 288.398 383.987 289.971 382.481 cv
291.199 381.305 292.147 379.933 292.821 378.441 cv
293.609 377.005 294.135 375.423 294.336 373.735 cv
294.594 371.571 294.292 369.448 293.541 367.483 cv
292.96 365.462 291.925 363.584 290.418 362.01 cv
.780392 .819608 .490196 rgb
f
286.568 370.708 mo
285.073 371.081 282.193 372.187 282.204 372.203 cv
283.757 374.308 287.012 375.017 289.45 374.427 cv
290.706 374.123 291.306 372.671 291.059 371.681 cv
290.815 370.703 289.448 369.989 286.568 370.708 cv
.760784 .803922 .254902 rgb
f
280.14 369.777 mo
282.245 368.225 282.954 364.97 282.364 362.531 cv
282.06 361.276 280.608 360.676 279.618 360.923 cv
278.64 361.167 277.926 362.534 278.645 365.414 cv
279.018 366.909 280.125 369.789 280.14 369.777 cv
cp
f
277.715 371.841 mo
276.162 369.736 272.907 369.028 270.469 369.618 cv
269.213 369.921 268.613 371.373 268.86 372.363 cv
269.104 373.342 270.471 374.055 273.351 373.336 cv
274.846 372.963 277.726 371.857 277.715 371.841 cv
f
279.779 374.267 mo
277.674 375.82 276.965 379.075 277.555 381.513 cv
277.859 382.768 279.311 383.369 280.301 383.122 cv
281.279 382.878 281.993 381.511 281.274 378.631 cv
280.901 377.135 279.794 374.255 279.779 374.267 cv
f
281.454 373.707 mo
281.434 373.708 282.282 376.674 282.882 378.093 cv
284.039 380.827 285.432 381.49 286.36 381.097 cv
287.3 380.699 288.099 379.346 287.587 378.16 cv
286.592 375.858 284.069 373.682 281.454 373.707 cv
cp
f
281.645 370.528 mo
281.645 370.548 284.611 369.7 286.03 369.099 cv
288.764 367.942 289.427 366.55 289.034 365.622 cv
288.636 364.682 287.284 363.883 286.098 364.395 cv
283.795 365.389 281.62 367.912 281.645 370.528 cv
f
278.465 370.337 mo
278.485 370.337 277.637 367.37 277.037 365.951 cv
275.88 363.218 274.488 362.554 273.559 362.948 cv
272.619 363.345 271.82 364.698 272.332 365.884 cv
273.327 368.187 275.85 370.362 278.465 370.337 cv
f
278.274 373.516 mo
278.274 373.497 275.308 374.344 273.889 374.945 cv
271.155 376.102 270.492 377.494 270.885 378.423 cv
271.283 379.362 272.636 380.162 273.821 379.65 cv
276.124 378.655 278.299 376.132 278.274 373.516 cv
f
253.486 400.47 mo
251.913 402.639 li
199.336 364.024 li
200.909 361.855 li
253.486 400.47 li
.12549 .0862745 0 rgb
f
213.374 371.015 mo
211.761 371.015 li
200.346 362.631 li
200.907 361.858 li
213.374 371.015 li
.47451 .45098 .4 rgb
f
199.724 363.488 mo
199.724 363.488 li
199.958 363.165 li
199.724 363.488 li
1 1 1 rgb
f
211.761 371.015 mo
209.972 371.015 li
199.724 363.488 li
199.958 363.165 li
200.346 362.631 li
211.761 371.015 li
.309804 .278431 .211765 rgb
f
248.621 404.991 mo
246.404 406.495 li
210.112 352.289 li
212.329 350.785 li
248.621 404.991 li
.231373 .254902 .403922 rgb
f
211.536 351.323 mo
211.536 351.323 li
212.326 350.787 li
211.536 351.323 li
1 1 1 rgb
f
225.869 371.015 mo
224.72 371.015 li
211.536 351.323 li
212.326 350.787 li
225.869 371.015 li
.537255 .552941 .643137 rgb
f
210.659 351.917 mo
210.659 351.917 li
211.536 351.323 li
210.659 351.917 li
1 1 1 rgb
f
224.72 371.015 mo
223.445 371.015 li
210.659 351.917 li
211.536 351.323 li
224.72 371.015 li
.396078 .411765 .529412 rgb
f
267.858 389.427 mo
265.071 388.523 262.048 388.208 260.473 388.208 cv
257.017 388.208 253.683 389.157 250.247 389.157 cv
249.738 389.157 249.164 389.112 248.527 389.036 cv
247.435 388.899 246.336 388.831 245.237 388.831 cv
244.138 388.831 243.04 388.899 241.95 389.036 cv
241.312 389.112 240.739 389.157 240.226 389.157 cv
239.46 389.157 238.698 389.11 237.94 389.037 cv
233.767 382.805 li
233.78 382.805 233.792 382.805 233.805 382.805 cv
235.202 382.805 236.767 382.455 238.491 382.011 cv
240.703 381.44 242.969 381.154 245.237 381.154 cv
247.504 381.154 249.772 381.44 251.986 382.011 cv
253.71 382.455 255.27 382.805 256.668 382.805 cv
259.549 382.805 261.148 381.253 266.379 381.127 cv
266.893 381.899 267.482 382.637 268.146 383.331 cv
268.962 384.183 269.85 384.926 270.792 385.557 cv
267.858 389.427 li
1 .713725 .733333 rgb
f
273.223 382.35 mo
272.926 382.163 272.636 381.963 272.356 381.748 cv
272.724 381.838 273.089 381.939 273.451 382.049 cv
273.223 382.35 li
.960784 .686274 .615686 rgb
f
270.792 385.557 mo
269.85 384.926 268.962 384.183 268.146 383.331 cv
267.482 382.637 266.893 381.899 266.379 381.127 cv
266.601 381.122 266.829 381.119 267.064 381.119 cv
267.629 381.119 268.192 381.139 268.753 381.181 cv
268.988 381.474 269.237 381.759 269.501 382.034 cv
270.245 382.811 271.067 383.476 271.949 384.03 cv
270.792 385.557 li
.721569 .52549 .470588 rgb
f
271.949 384.03 mo
271.067 383.476 270.245 382.811 269.501 382.034 cv
269.237 381.759 268.988 381.474 268.753 381.181 cv
269.971 381.27 271.178 381.458 272.356 381.748 cv
272.636 381.963 272.926 382.163 273.223 382.35 cv
271.949 384.03 li
.917647 .647059 .54902 rgb
f
237.94 389.037 mo
237.938 389.036 237.936 389.036 237.934 389.036 cv
233.762 382.805 li
233.764 382.805 233.766 382.805 233.767 382.805 cv
237.94 389.037 li
.717647 .439216 .513725 rgb
f
222.619 389.427 mo
217.025 382.049 li
217.344 381.951 217.664 381.862 217.987 381.78 cv
218.184 382.049 li
223.407 389.188 li
223.143 389.263 222.88 389.342 222.619 389.427 cv
1 .713725 .733333 rgb
f
226.169 388.573 mo
221.397 382.049 li
220.823 381.264 li
221.421 381.196 222.025 381.152 222.629 381.132 cv
232.448 388.343 li
231.639 388.262 230.825 388.208 230.004 388.208 cv
229.098 388.208 227.713 388.312 226.169 388.573 cv
231.617 384.409 mo
227.632 381.482 li
228.564 381.656 229.345 381.872 230.056 382.078 cv
231.617 384.409 li
f
233.778 388.499 mo
233.336 388.441 232.893 388.388 232.448 388.343 cv
222.629 381.132 li
222.889 381.123 223.148 381.119 223.408 381.119 cv
223.518 381.119 223.625 381.119 223.732 381.121 cv
233.778 388.499 li
231.623 384.418 mo
227.623 381.48 li
227.626 381.481 227.629 381.481 227.632 381.482 cv
231.617 384.409 li
231.623 384.418 li
.678431 .376471 .364706 rgb
f
233.184 386.749 mo
225.645 381.212 li
226.38 381.276 227.032 381.37 227.623 381.48 cv
231.623 384.418 li
233.184 386.749 li
.807843 .509804 .513725 rgb
f
234.412 388.584 mo
234.201 388.555 233.989 388.526 233.778 388.499 cv
223.732 381.121 li
224.428 381.128 225.063 381.161 225.645 381.212 cv
233.184 386.749 li
234.412 388.584 li
.745098 .447059 .443137 rgb
f
235.29 388.706 mo
234.998 388.665 234.705 388.624 234.412 388.584 cv
233.184 386.749 li
231.623 384.418 li
231.617 384.409 li
230.056 382.078 li
230.398 382.177 230.724 382.274 231.043 382.363 cv
235.29 388.706 li
.717647 .439216 .513725 rgb
f
237.934 389.036 mo
237.52 388.996 237.105 388.948 236.691 388.895 cv
232.547 382.705 li
232.935 382.766 233.335 382.802 233.762 382.805 cv
237.934 389.036 li
.831372 .54902 .603922 rgb
f
236.691 388.895 mo
236.224 388.836 235.757 388.771 235.29 388.706 cv
231.043 382.363 li
231.549 382.504 232.038 382.625 232.547 382.705 cv
236.691 388.895 li
.776471 .494118 .560784 rgb
f
269.343 474.772 mo
269.343 475.991 li
221.13 475.991 li
221.13 474.772 li
221.13 473.872 221.764 473.097 222.645 472.919 cv
225.022 472.44 227.369 471.825 229.67 471.081 cv
231.637 470.447 233.577 469.718 235.48 468.894 cv
254.997 468.894 li
256.899 469.718 258.836 470.447 260.807 471.081 cv
263.108 471.825 265.454 472.44 267.828 472.919 cv
268.268 473.01 268.648 473.245 268.917 473.576 cv
269.183 473.902 269.343 474.324 269.343 474.772 cv
.729412 .737255 .815686 rgb
f
255.943 405.143 mo
256.094 405.258 li
256.936 404.15 li
256.785 404.035 li
256.612 403.956 li
256.575 404.028 li
256.493 404.178 256.264 404.551 255.808 405.01 cv
255.943 405.143 li
256.094 405.258 li
255.943 405.143 li
256.077 405.277 li
256.722 404.628 256.951 404.13 256.958 404.113 cv
257.65 402.583 li
255.791 405.028 li
256.077 405.277 li
255.943 405.143 li
.607843 .478431 .2 rgb
f
254.997 468.894 mo
235.48 468.894 li
235.802 468.757 236.125 468.613 236.444 468.469 cv
237.382 468.043 238.21 467.436 238.889 466.691 cv
239.273 466.266 239.607 465.799 239.88 465.298 cv
250.589 465.298 li
250.866 465.799 251.204 466.266 251.587 466.691 cv
252.263 467.436 253.095 468.043 254.032 468.469 cv
254.351 468.613 254.674 468.757 254.997 468.894 cv
.560784 .584314 .694118 rgb
f
240.15 411.534 mo
239.455 411.276 238.836 410.824 238.377 410.216 cv
234.545 405.159 li
235.833 406.453 238.844 408.379 245.238 408.124 cv
251.633 408.379 254.644 406.453 255.931 405.159 cv
252.1 410.216 li
251.64 410.824 251.021 411.276 250.327 411.534 cv
249.886 411.697 249.419 411.785 248.941 411.785 cv
241.532 411.785 li
241.054 411.785 240.587 411.697 240.15 411.534 cv
.278431 .0862745 .14902 rgb
f
250.589 465.298 mo
239.88 465.298 li
240.078 464.945 240.249 464.576 240.386 464.193 cv
250.087 464.193 li
250.224 464.576 250.391 464.945 250.589 465.298 cv
.0980392 .12549 .168627 rgb
f
250.327 411.534 mo
249.89 412.366 li
249.343 413.398 248.921 414.488 248.621 415.612 cv
241.851 415.612 li
241.555 414.488 241.13 413.398 240.587 412.366 cv
240.15 411.534 li
240.587 411.697 241.054 411.785 241.532 411.785 cv
248.941 411.785 li
249.419 411.785 249.886 411.697 250.327 411.534 cv
.74902 .741176 .87451 rgb
f
250.049 464.087 mo
250.087 464.193 li
240.386 464.193 li
240.423 464.087 li
241.027 462.317 241.509 460.51 241.866 458.679 cv
241.904 458.49 241.939 458.296 241.973 458.106 cv
248.504 458.106 li
248.868 460.134 249.385 462.131 250.049 464.087 cv
.478431 .505882 .619608 rgb
f
241.851 415.612 mo
248.621 415.612 li
248.359 416.615 248.192 417.644 248.132 418.684 cv
247.141 435.912 li
247.068 437.127 247.068 438.342 247.137 439.557 cv
247.911 453.128 li
248.006 454.803 248.204 456.462 248.504 458.106 cv
241.973 458.106 li
242.269 456.462 242.466 454.803 242.561 453.128 cv
243.336 439.557 li
243.404 438.342 243.404 437.127 243.336 435.912 cv
242.341 418.684 li
242.28 417.644 242.117 416.615 241.851 415.612 cv
.843137 .843137 .890196 rgb
f
233.691 404.035 mo
233.54 404.149 li
234.383 405.262 li
234.534 405.147 li
234.669 405.014 li
234.365 404.706 234.162 404.437 234.036 404.248 cv
233.973 404.153 233.929 404.078 233.901 404.028 cv
233.864 403.956 li
233.691 404.035 li
233.54 404.149 li
233.691 404.035 li
233.518 404.113 li
233.526 404.13 233.754 404.628 234.399 405.281 cv
234.685 405.032 li
232.821 402.573 li
233.518 404.113 li
233.691 404.035 li
.607843 .478431 .2 rgb
f
256.668 382.805 mo
255.27 382.805 253.71 382.455 251.986 382.011 cv
249.772 381.44 247.504 381.154 245.237 381.154 cv
242.969 381.154 240.703 381.44 238.491 382.011 cv
236.767 382.455 235.202 382.805 233.805 382.805 cv
233.792 382.805 233.78 382.805 233.767 382.805 cv
225.873 371.015 li
263.637 371.015 li
263.505 373.169 263.812 375.26 264.483 377.194 cv
264.924 378.565 265.555 379.89 266.379 381.127 cv
261.148 381.253 259.549 382.805 256.668 382.805 cv
273.04 379.81 mo
273.04 379.81 li
273.041 379.81 273.042 379.81 273.042 379.81 cv
273.042 379.81 273.041 379.81 273.04 379.81 cv
273.037 379.81 mo
272.121 379.808 271.249 379.196 270.914 378.488 cv
271.249 379.196 272.121 379.808 273.037 379.81 cv
270.901 378.459 mo
270.9 378.457 270.899 378.455 270.898 378.453 cv
270.899 378.455 270.9 378.457 270.901 378.459 cv
270.894 378.445 mo
270.893 378.442 270.892 378.44 270.891 378.437 cv
270.892 378.44 270.893 378.442 270.894 378.445 cv
270.781 377.906 mo
270.781 377.023 271.625 375.903 273.889 374.945 cv
273.908 374.937 273.927 374.929 273.946 374.921 cv
273.927 374.929 273.908 374.937 273.889 374.945 cv
271.625 375.903 270.781 377.023 270.781 377.906 cv
273.967 374.912 mo
275.397 374.321 278.208 373.516 278.273 373.516 cv
278.273 373.516 li
278.209 373.516 275.397 374.321 273.967 374.912 cv
271.256 373.629 mo
271.256 373.629 li
271.257 373.629 271.258 373.629 271.26 373.629 cv
271.258 373.629 271.257 373.629 271.256 373.629 cv
271.253 373.629 mo
269.801 373.628 269.051 373.076 268.866 372.386 cv
269.051 373.076 269.801 373.628 271.253 373.629 cv
278.275 373.562 mo
278.275 373.547 278.274 373.532 278.274 373.516 cv
278.274 373.516 278.274 373.516 278.273 373.516 cv
278.274 373.516 278.274 373.516 278.274 373.516 cv
278.274 373.532 278.275 373.547 278.275 373.562 cv
273.181 373.378 mo
273.182 373.377 273.183 373.377 273.184 373.377 cv
273.183 373.377 273.182 373.377 273.181 373.378 cv
273.207 373.371 mo
273.215 373.37 273.222 373.368 273.23 373.366 cv
273.222 373.368 273.215 373.37 273.207 373.371 cv
273.269 373.357 mo
273.283 373.353 273.297 373.35 273.311 373.346 cv
273.297 373.35 273.283 373.353 273.269 373.357 cv
273.314 373.346 mo
273.326 373.343 273.339 373.339 273.351 373.336 cv
273.339 373.339 273.326 373.343 273.314 373.346 cv
268.864 372.377 mo
268.862 372.373 268.861 372.368 268.86 372.363 cv
268.861 372.368 268.862 372.373 268.864 372.377 cv
277.715 371.842 mo
277.715 371.842 277.715 371.841 277.715 371.841 cv
277.702 371.824 277.689 371.807 277.675 371.789 cv
277.689 371.807 277.702 371.824 277.715 371.841 cv
277.715 371.841 277.715 371.842 277.715 371.842 cv
277.671 371.783 mo
277.456 371.501 277.211 371.245 276.941 371.015 cv
276.941 371.015 li
277.211 371.245 277.456 371.501 277.671 371.783 cv
.933333 .941176 .992157 rgb
f
273.451 382.049 mo
273.089 381.939 272.724 381.838 272.356 381.748 cv
271.891 381.392 271.449 380.998 271.035 380.566 cv
269.75 379.223 268.844 377.629 268.318 375.913 cv
267.857 374.64 267.61 373.293 267.611 371.917 cv
267.611 371.617 267.623 371.316 267.647 371.015 cv
268.974 371.015 li
268.863 371.305 268.805 371.609 268.805 371.897 cv
268.805 372.059 268.823 372.216 268.86 372.363 cv
268.86 372.363 li
268.861 372.368 268.862 372.373 268.864 372.377 cv
268.864 372.38 268.865 372.383 268.866 372.386 cv
269.051 373.076 269.801 373.628 271.253 373.629 cv
271.254 373.629 271.255 373.629 271.256 373.629 cv
271.256 373.629 li
271.256 373.629 li
271.257 373.629 271.258 373.629 271.26 373.629 cv
271.8 373.629 272.438 373.552 273.181 373.378 cv
273.182 373.377 273.183 373.377 273.184 373.377 cv
273.192 373.375 273.199 373.373 273.207 373.371 cv
273.215 373.37 273.222 373.368 273.23 373.366 cv
273.243 373.363 273.256 373.36 273.269 373.357 cv
273.283 373.353 273.297 373.35 273.311 373.346 cv
273.312 373.346 273.313 373.346 273.314 373.346 cv
273.326 373.343 273.339 373.339 273.351 373.336 cv
273.351 373.336 li
274.843 372.964 277.715 371.862 277.715 371.842 cv
277.715 371.842 277.715 371.841 277.715 371.841 cv
277.702 371.824 277.689 371.807 277.675 371.789 cv
277.674 371.787 277.672 371.785 277.671 371.783 cv
277.456 371.501 277.211 371.245 276.941 371.015 cv
281.816 371.015 li
273.451 382.049 li
273.04 379.81 mo
273.04 379.81 li
273.041 379.81 273.042 379.81 273.042 379.81 cv
273.302 379.809 273.566 379.76 273.821 379.65 cv
276.111 378.661 278.274 376.162 278.275 373.562 cv
278.275 373.547 278.274 373.532 278.274 373.516 cv
278.274 373.516 278.274 373.516 278.273 373.516 cv
278.273 373.516 278.273 373.516 278.273 373.516 cv
278.273 373.516 li
278.273 373.516 li
278.208 373.516 275.397 374.321 273.967 374.912 cv
273.96 374.915 273.953 374.918 273.946 374.921 cv
273.927 374.929 273.908 374.937 273.889 374.945 cv
271.625 375.903 270.781 377.023 270.781 377.906 cv
270.781 378.09 270.817 378.263 270.885 378.423 cv
270.887 378.428 270.889 378.432 270.891 378.437 cv
270.892 378.44 270.893 378.442 270.894 378.445 cv
270.896 378.448 270.897 378.45 270.898 378.453 cv
270.899 378.455 270.9 378.457 270.901 378.459 cv
270.905 378.468 270.909 378.478 270.914 378.488 cv
271.249 379.196 272.121 379.808 273.037 379.81 cv
273.038 379.81 273.039 379.81 273.04 379.81 cv
273.04 379.81 li
.929412 .937255 .976471 rgb
f
268.753 381.181 mo
268.192 381.139 267.629 381.119 267.064 381.119 cv
266.829 381.119 266.601 381.122 266.379 381.127 cv
265.555 379.89 264.924 378.565 264.483 377.194 cv
263.812 375.26 263.505 373.169 263.637 371.015 cv
265.519 371.015 li
265.501 371.285 265.493 371.554 265.493 371.823 cv
265.491 373.459 265.803 375.056 266.378 376.561 cv
266.858 378.229 267.646 379.798 268.753 381.181 cv
.898039 .917647 .960784 rgb
f
272.356 381.748 mo
271.178 381.458 269.971 381.27 268.753 381.181 cv
267.646 379.798 266.858 378.229 266.378 376.561 cv
265.803 375.056 265.491 373.459 265.493 371.823 cv
265.493 371.554 265.501 371.285 265.519 371.015 cv
267.647 371.015 li
267.623 371.316 267.611 371.617 267.611 371.917 cv
267.61 373.293 267.857 374.64 268.318 375.913 cv
268.844 377.629 269.75 379.223 271.035 380.566 cv
271.449 380.998 271.891 381.392 272.356 381.748 cv
.921569 .933333 .968627 rgb
f
271.256 373.629 mo
271.255 373.629 271.254 373.629 271.253 373.629 cv
269.801 373.628 269.051 373.076 268.866 372.386 cv
268.865 372.383 268.864 372.38 268.864 372.377 cv
268.862 372.373 268.861 372.368 268.86 372.363 cv
268.86 372.363 li
268.823 372.216 268.805 372.059 268.805 371.897 cv
268.805 371.609 268.863 371.305 268.974 371.015 cv
276.941 371.015 li
277.211 371.245 277.456 371.501 277.671 371.783 cv
277.672 371.785 277.674 371.787 277.675 371.789 cv
277.689 371.807 277.702 371.824 277.715 371.841 cv
277.715 371.841 277.715 371.842 277.715 371.842 cv
277.715 371.862 274.843 372.964 273.351 373.336 cv
273.351 373.336 li
273.339 373.339 273.326 373.343 273.314 373.346 cv
273.313 373.346 273.312 373.346 273.311 373.346 cv
273.297 373.35 273.283 373.353 273.269 373.357 cv
273.256 373.36 273.243 373.363 273.23 373.366 cv
273.222 373.368 273.215 373.37 273.207 373.371 cv
273.199 373.373 273.192 373.375 273.184 373.377 cv
273.183 373.377 273.182 373.377 273.181 373.378 cv
272.438 373.552 271.8 373.629 271.26 373.629 cv
271.258 373.629 271.257 373.629 271.256 373.629 cv
271.256 373.629 li
.921569 .933333 .960784 rgb
f
273.04 379.81 mo
273.039 379.81 273.038 379.81 273.037 379.81 cv
272.121 379.808 271.249 379.196 270.914 378.488 cv
270.909 378.478 270.905 378.468 270.901 378.459 cv
270.9 378.457 270.899 378.455 270.898 378.453 cv
270.897 378.45 270.896 378.448 270.894 378.445 cv
270.893 378.442 270.892 378.44 270.891 378.437 cv
270.889 378.432 270.887 378.428 270.885 378.423 cv
270.817 378.263 270.781 378.09 270.781 377.906 cv
270.781 377.023 271.625 375.903 273.889 374.945 cv
273.908 374.937 273.927 374.929 273.946 374.921 cv
273.953 374.918 273.96 374.915 273.967 374.912 cv
275.397 374.321 278.209 373.516 278.273 373.516 cv
278.273 373.516 li
278.273 373.516 278.273 373.516 278.273 373.516 cv
278.274 373.516 278.274 373.516 278.274 373.516 cv
278.274 373.532 278.275 373.547 278.275 373.562 cv
278.274 376.162 276.111 378.661 273.821 379.65 cv
273.566 379.76 273.302 379.809 273.042 379.81 cv
273.042 379.81 273.041 379.81 273.04 379.81 cv
273.04 379.81 li
f
233.767 382.805 mo
233.766 382.805 233.764 382.805 233.762 382.805 cv
225.869 371.015 li
225.873 371.015 li
233.767 382.805 li
.898039 .905882 .964706 rgb
f
233.762 382.805 mo
233.335 382.802 232.935 382.766 232.547 382.705 cv
224.72 371.015 li
225.869 371.015 li
233.762 382.805 li
.913725 .921569 .976471 rgb
f
230.056 382.078 mo
229.345 381.872 228.564 381.656 227.632 381.482 cv
213.38 371.015 li
222.649 371.015 li
230.056 382.078 li
217.025 382.049 mo
208.66 371.015 li
208.854 371.015 li
211.572 373.01 li
217.987 381.78 li
217.664 381.862 217.344 381.951 217.025 382.049 cv
220.823 381.264 mo
218.516 378.11 li
222.629 381.132 li
222.025 381.152 221.421 381.196 220.823 381.264 cv
.933333 .941176 .992157 rgb
f
227.632 381.482 mo
227.629 381.481 227.626 381.481 227.623 381.48 cv
213.374 371.015 li
213.38 371.015 li
227.632 381.482 li
222.629 381.132 mo
218.516 378.11 li
217.218 376.336 li
223.732 381.121 li
223.625 381.119 223.518 381.119 223.408 381.119 cv
223.148 381.119 222.889 381.123 222.629 381.132 cv
211.572 373.01 mo
208.854 371.015 li
209.972 371.015 li
210.274 371.236 li
211.572 373.01 li
.894118 .898039 .94902 rgb
f
227.623 381.48 mo
227.032 381.37 226.38 381.276 225.645 381.212 cv
215.141 373.497 li
213.325 371.015 li
211.761 371.015 li
213.374 371.015 li
227.623 381.48 li
.909804 .913725 .964706 rgb
f
225.645 381.212 mo
225.063 381.161 224.428 381.128 223.732 381.121 cv
217.218 376.336 li
215.141 373.497 li
225.645 381.212 li
210.274 371.236 mo
209.972 371.015 li
211.761 371.015 li
210.112 371.015 li
210.274 371.236 li
.901961 .905882 .956863 rgb
f
231.043 382.363 mo
230.724 382.274 230.398 382.177 230.056 382.078 cv
222.649 371.015 li
223.445 371.015 li
231.043 382.363 li
.898039 .905882 .964706 rgb
f
232.547 382.705 mo
232.038 382.625 231.549 382.504 231.043 382.363 cv
223.445 371.015 li
224.72 371.015 li
232.547 382.705 li
.905882 .913725 .972549 rgb
f
269.343 474.772 mo
269.343 475.991 li
221.13 475.991 li
221.13 474.772 li
221.13 473.872 221.764 473.097 222.645 472.919 cv
225.022 472.44 227.369 471.825 229.67 471.081 cv
231.637 470.447 233.577 469.718 235.48 468.894 cv
254.997 468.894 li
256.899 469.718 258.836 470.447 260.807 471.081 cv
263.108 471.825 265.454 472.44 267.828 472.919 cv
268.268 473.01 268.648 473.245 268.917 473.576 cv
269.183 473.902 269.343 474.324 269.343 474.772 cv
.729412 .737255 .815686 rgb
f
254.997 468.894 mo
235.48 468.894 li
235.802 468.757 236.125 468.613 236.444 468.469 cv
237.382 468.043 238.21 467.436 238.889 466.691 cv
239.273 466.266 239.607 465.799 239.88 465.298 cv
250.589 465.298 li
250.866 465.799 251.204 466.266 251.587 466.691 cv
252.263 467.436 253.095 468.043 254.032 468.469 cv
254.351 468.613 254.674 468.757 254.997 468.894 cv
.560784 .584314 .694118 rgb
f
240.15 411.534 mo
239.455 411.276 238.836 410.824 238.377 410.216 cv
234.545 405.159 li
235.833 406.453 238.844 408.379 245.238 408.124 cv
251.633 408.379 254.644 406.453 255.931 405.159 cv
252.1 410.216 li
251.64 410.824 251.021 411.276 250.327 411.534 cv
249.886 411.697 249.419 411.785 248.941 411.785 cv
241.532 411.785 li
241.054 411.785 240.587 411.697 240.15 411.534 cv
.278431 .0862745 .14902 rgb
f
250.589 465.298 mo
239.88 465.298 li
240.078 464.945 240.249 464.576 240.386 464.193 cv
250.087 464.193 li
250.224 464.576 250.391 464.945 250.589 465.298 cv
.0980392 .12549 .168627 rgb
f
250.327 411.534 mo
249.89 412.366 li
249.343 413.398 248.921 414.488 248.621 415.612 cv
241.851 415.612 li
241.555 414.488 241.13 413.398 240.587 412.366 cv
240.15 411.534 li
240.587 411.697 241.054 411.785 241.532 411.785 cv
248.941 411.785 li
249.419 411.785 249.886 411.697 250.327 411.534 cv
.74902 .741176 .87451 rgb
f
250.049 464.087 mo
250.087 464.193 li
240.386 464.193 li
240.423 464.087 li
241.027 462.317 241.509 460.51 241.866 458.679 cv
241.904 458.49 241.939 458.296 241.973 458.106 cv
248.504 458.106 li
248.868 460.134 249.385 462.131 250.049 464.087 cv
.478431 .505882 .619608 rgb
f
241.851 415.612 mo
248.621 415.612 li
248.359 416.615 248.192 417.644 248.132 418.684 cv
247.141 435.912 li
247.068 437.127 247.068 438.342 247.137 439.557 cv
247.911 453.128 li
248.006 454.803 248.204 456.462 248.504 458.106 cv
241.973 458.106 li
242.269 456.462 242.466 454.803 242.561 453.128 cv
243.336 439.557 li
243.404 438.342 243.404 437.127 243.336 435.912 cv
242.341 418.684 li
242.28 417.644 242.117 416.615 241.851 415.612 cv
.843137 .843137 .890196 rgb
f
246.367 408.147 mo
246.366 408.147 246.366 408.147 246.366 408.147 cv
246.037 408.147 245.697 408.141 245.347 408.128 cv
245.328 408.128 245.308 408.127 245.288 408.126 cv
245.271 408.125 245.255 408.125 245.238 408.124 cv
245.238 408.124 li
245.222 408.125 245.205 408.125 245.189 408.126 cv
245.169 408.127 245.149 408.128 245.129 408.128 cv
244.78 408.141 244.44 408.147 244.111 408.147 cv
244.11 408.147 244.11 408.147 244.11 408.147 cv
244.109 408.147 244.107 408.147 244.106 408.147 cv
242.629 408.147 241.353 408.025 240.25 407.822 cv
238.303 405.159 li
238.292 405.147 li
237.479 404.035 li
226.794 389.427 li
226.169 388.573 li
227.713 388.312 229.098 388.208 230.004 388.208 cv
230.825 388.208 231.639 388.262 232.448 388.343 cv
235.996 390.949 li
246.404 406.495 li
248.072 405.363 li
248.618 404.993 li
248.621 404.991 li
242.339 395.607 li
251.913 402.639 li
252.412 401.951 li
252.923 401.246 li
252.923 401.246 li
252.923 401.246 li
253.483 400.473 li
253.486 400.47 li
237.96 389.068 li
237.94 389.037 li
238.698 389.11 239.46 389.157 240.226 389.157 cv
240.739 389.157 241.312 389.112 241.95 389.036 cv
243.04 388.899 244.138 388.831 245.237 388.831 cv
246.336 388.831 247.435 388.899 248.527 389.036 cv
249.164 389.112 249.738 389.157 250.247 389.157 cv
253.683 389.157 257.017 388.208 260.473 388.208 cv
262.048 388.208 265.071 388.523 267.858 389.427 cv
257.302 403.353 li
257.65 402.583 li
255.791 405.028 li
255.935 405.154 li
255.931 405.159 li
255.931 405.159 li
255.926 405.163 255.922 405.168 255.917 405.173 cv
254.701 406.388 251.971 408.146 246.37 408.147 cv
246.369 408.147 246.368 408.147 246.367 408.147 cv
.901961 .239216 .270588 rgb
f
251.913 402.639 mo
242.339 395.607 li
241.258 393.992 li
252.301 402.103 li
252.412 401.951 li
251.913 402.639 li
253.483 400.473 mo
237.967 389.077 li
237.96 389.068 li
253.486 400.47 li
253.483 400.473 li
235.996 390.949 mo
232.448 388.343 li
232.893 388.388 233.336 388.441 233.778 388.499 cv
234.914 389.334 li
235.996 390.949 li
.862745 .2 .223529 rgb
f
252.923 401.246 mo
252.923 401.246 li
253.483 400.473 li
253.483 400.473 li
252.923 401.246 li
.901961 .239216 .270588 rgb
f
252.923 401.246 mo
239.527 391.408 li
237.967 389.077 li
253.483 400.473 li
252.923 401.246 li
.878431 .215686 .243137 rgb
f
252.412 401.951 mo
252.923 401.246 li
252.923 401.246 li
252.412 401.951 li
.901961 .239216 .270588 rgb
f
252.301 402.103 mo
241.258 393.992 li
239.527 391.408 li
252.923 401.246 li
252.412 401.951 li
252.301 402.103 li
.870588 .207843 .235294 rgb
f
234.914 389.334 mo
233.778 388.499 li
233.989 388.526 234.201 388.555 234.412 388.584 cv
234.914 389.334 li
f
246.404 406.495 mo
235.996 390.949 li
234.914 389.334 li
234.412 388.584 li
234.705 388.624 234.998 388.665 235.29 388.706 cv
246.952 406.124 li
247.828 405.529 li
236.691 388.895 li
236.691 388.895 li
247.828 405.529 li
248.072 405.363 li
246.404 406.495 li
248.618 404.993 mo
237.934 389.036 li
237.936 389.036 237.938 389.036 237.94 389.037 cv
237.96 389.068 li
237.967 389.077 li
239.527 391.408 li
241.258 393.992 li
242.339 395.607 li
248.621 404.991 li
248.618 404.993 li
.866667 .207843 .243137 rgb
f
248.072 405.363 mo
248.618 404.993 li
248.618 404.993 li
248.072 405.363 li
.901961 .239216 .270588 rgb
f
247.828 405.529 mo
236.691 388.895 li
237.105 388.948 237.52 388.996 237.934 389.036 cv
248.618 404.993 li
248.072 405.363 li
247.828 405.529 li
.882353 .219608 .254902 rgb
f
246.952 406.124 mo
235.29 388.706 li
235.757 388.771 236.224 388.836 236.691 388.895 cv
247.828 405.529 li
246.952 406.124 li
.87451 .211765 .247059 rgb
f
255.935 405.154 mo
255.791 405.028 li
257.65 402.583 li
257.302 403.353 li
256.785 404.035 li
255.943 405.143 li
255.935 405.154 li
.886274 .215686 .235294 rgb
f
246.367 408.147 mo
246.367 408.147 li
246.368 408.147 246.369 408.147 246.37 408.147 cv
246.369 408.147 246.368 408.147 246.367 408.147 cv
244.11 408.147 mo
244.11 408.147 li
244.11 408.147 244.11 408.147 244.111 408.147 cv
244.11 408.147 244.11 408.147 244.11 408.147 cv
246.366 408.147 mo
246.036 408.147 245.697 408.141 245.347 408.128 cv
245.347 408.128 li
245.697 408.141 246.037 408.147 246.366 408.147 cv
246.366 408.147 li
244.106 408.147 mo
242.629 408.147 241.353 408.025 240.25 407.822 cv
240.25 407.822 li
241.353 408.025 242.629 408.147 244.106 408.147 cv
244.106 408.147 li
245.129 408.128 mo
245.129 408.128 li
245.149 408.128 245.169 408.127 245.189 408.126 cv
245.189 408.126 li
245.169 408.127 245.149 408.128 245.129 408.128 cv
245.288 408.126 mo
245.271 408.125 245.255 408.125 245.238 408.124 cv
245.238 408.124 li
245.238 408.124 li
245.238 408.124 li
245.255 408.125 245.271 408.125 245.288 408.126 cv
245.288 408.126 li
255.917 405.173 mo
255.917 405.173 li
255.922 405.168 255.926 405.163 255.931 405.159 cv
255.931 405.159 li
255.926 405.163 255.922 405.168 255.917 405.173 cv
.768627 .180392 .215686 rgb
f
235.85 406.197 mo
235.3 405.846 234.878 405.491 234.56 405.173 cv
234.555 405.168 234.55 405.163 234.545 405.159 cv
234.545 405.159 li
234.545 405.159 li
234.543 405.156 li
234.685 405.032 li
232.821 402.573 li
233.174 403.353 li
222.619 389.427 li
222.88 389.342 223.143 389.263 223.407 389.188 cv
223.581 389.427 li
234.266 404.035 li
235.079 405.147 li
235.09 405.159 li
235.85 406.197 li
.901961 .239216 .270588 rgb
f
234.543 405.156 mo
234.534 405.147 li
233.691 404.035 li
233.174 403.353 li
232.821 402.573 li
234.685 405.032 li
234.543 405.156 li
.886274 .215686 .235294 rgb
f
235.85 406.197 mo
235.3 405.846 234.878 405.491 234.56 405.173 cv
234.878 405.491 235.3 405.846 235.85 406.197 cv
235.85 406.197 li
234.545 405.159 mo
234.545 405.159 li
234.545 405.159 li
234.545 405.159 li
.768627 .180392 .215686 rgb
f
225.358 475.991 mo
222.145 475.991 li
222.145 475.991 li
225.358 475.991 li
225.358 475.991 li
1 1 1 rgb
f
225.358 475.991 mo
222.145 475.991 li
222.145 474.772 li
222.145 473.872 222.757 473.097 223.607 472.919 cv
225.901 472.44 228.165 471.825 230.386 471.081 cv
232.284 470.447 234.156 469.718 235.992 468.894 cv
235.992 468.894 li
239.205 468.894 li
239.205 468.894 li
237.369 469.718 235.497 470.447 233.599 471.081 cv
231.378 471.825 229.114 472.44 226.82 472.919 cv
225.97 473.097 225.358 473.872 225.358 474.772 cv
225.358 475.991 li
.854902 .858823 .901961 rgb
f
239.205 468.894 mo
235.992 468.894 li
236.303 468.757 236.615 468.613 236.923 468.469 cv
237.827 468.043 238.626 467.436 239.282 466.691 cv
239.652 466.266 239.975 465.799 240.239 465.298 cv
240.239 465.298 li
243.451 465.298 li
243.451 465.298 li
243.187 465.799 242.865 466.266 242.495 466.691 cv
241.839 467.436 241.04 468.043 240.135 468.469 cv
239.828 468.613 239.516 468.757 239.205 468.894 cv
.760784 .776471 .835294 rgb
f
243.838 411.785 mo
241.532 411.785 li
241.202 411.785 240.877 411.743 240.564 411.664 cv
240.499 411.534 li
239.828 411.276 239.231 410.824 238.788 410.216 cv
235.85 406.197 li
236.847 406.834 238.266 407.458 240.25 407.822 cv
242 410.216 li
242.444 410.824 243.041 411.276 243.711 411.534 cv
243.838 411.785 li
.607843 .505882 .541176 rgb
f
243.451 465.298 mo
240.239 465.298 li
240.429 464.945 240.594 464.576 240.726 464.193 cv
240.726 464.193 li
243.939 464.193 li
243.807 464.576 243.642 464.945 243.451 465.298 cv
.513725 .52549 .54902 rgb
f
245.353 415.612 mo
242.14 415.612 li
241.855 414.488 241.444 413.398 240.92 412.366 cv
240.564 411.664 li
240.877 411.743 241.202 411.785 241.532 411.785 cv
243.838 411.785 li
244.133 412.366 li
244.657 413.398 245.067 414.488 245.353 415.612 cv
.862745 .858823 .933333 rgb
f
243.939 464.193 mo
240.726 464.193 li
240.763 464.087 li
241.345 462.317 241.81 460.51 242.155 458.679 cv
242.192 458.49 242.225 458.296 242.257 458.106 cv
242.257 458.106 li
245.47 458.106 li
245.47 458.106 li
245.437 458.296 245.404 458.49 245.368 458.679 cv
245.023 460.51 244.558 462.317 243.975 464.087 cv
243.939 464.193 li
.717647 .733333 .796078 rgb
f
245.47 458.106 mo
242.257 458.106 li
242.543 456.462 242.734 454.803 242.825 453.128 cv
243.573 439.557 li
243.639 438.342 243.639 437.127 243.573 435.912 cv
242.613 418.684 li
242.554 417.644 242.397 416.615 242.14 415.612 cv
242.14 415.612 li
245.353 415.612 li
245.353 415.612 li
245.61 416.615 245.767 417.644 245.826 418.684 cv
246.786 435.912 li
246.852 437.127 246.852 438.342 246.786 439.557 cv
246.038 453.128 li
245.947 454.803 245.756 456.462 245.47 458.106 cv
.913725 .913725 .941176 rgb
f
223.407 389.188 mo
218.184 382.049 li
217.987 381.78 li
218.917 381.544 219.865 381.373 220.823 381.264 cv
221.397 382.049 li
226.169 388.573 li
225.281 388.723 224.339 388.925 223.407 389.188 cv
1 .843137 .854902 rgb
f
217.987 381.78 mo
211.572 373.01 li
218.516 378.11 li
220.823 381.264 li
219.865 381.373 218.917 381.544 217.987 381.78 cv
.964706 .968627 .996078 rgb
f
218.516 378.11 mo
211.572 373.01 li
210.274 371.236 li
217.218 376.336 li
218.516 378.11 li
.941176 .945098 .972549 rgb
f
215.141 373.497 mo
211.761 371.015 li
213.325 371.015 li
215.141 373.497 li
.952941 .952941 .980392 rgb
f
217.218 376.336 mo
210.274 371.236 li
210.112 371.015 li
211.761 371.015 li
215.141 373.497 li
217.218 376.336 li
.945098 .94902 .976471 rgb
f
240.25 407.822 mo
238.266 407.458 236.847 406.834 235.85 406.197 cv
235.09 405.159 li
235.079 405.147 li
234.266 404.035 li
223.581 389.427 li
223.407 389.188 li
224.339 388.925 225.281 388.723 226.169 388.573 cv
226.794 389.427 li
237.479 404.035 li
238.292 405.147 li
238.303 405.159 li
240.25 407.822 li
.945098 .588235 .603922 rgb
f
240.25 407.822 mo
238.266 407.458 236.847 406.834 235.85 406.197 cv
235.85 406.197 li
236.847 406.834 238.266 407.458 240.25 407.822 cv
240.25 407.822 li
.87451 .556863 .576471 rgb
f
394.756 408.655 mo
392.515 407.025 li
432.18 346.302 li
434.421 347.932 li
394.756 408.655 li
.792157 .356863 .333333 rgb
f
448.195 347.778 mo
449.02 347.087 449.673 346.541 450.499 345.85 cv
445.507 340.261 436.702 340.456 431.963 346.26 cv
432.818 346.914 433.675 347.358 434.53 348.012 cv
437.98 343.786 444.561 343.71 448.195 347.778 cv
cp
.678431 .301961 .301961 rgb
f
463.059 365.811 mo
448.345 347.642 li
450.306 345.856 li
465.021 364.026 li
463.059 365.811 li
cp
.792157 .356863 .333333 rgb
f
435.145 347.445 mo
432.891 344.866 li
433.965 343.927 li
436.219 346.506 li
435.145 347.445 li
cp
f
436.697 346.13 mo
435.471 342.932 li
436.778 342.431 li
438.004 345.629 li
436.697 346.13 li
cp
f
438.906 345.291 mo
438.055 341.973 li
439.392 341.63 li
440.243 344.948 li
438.906 345.291 li
cp
f
441.005 344.922 mo
441.011 341.496 li
442.577 341.499 li
442.571 344.925 li
441.005 344.922 li
cp
f
443.213 345.102 mo
444.237 341.833 li
445.654 342.277 li
444.63 345.546 li
443.213 345.102 li
cp
f
445.87 346.088 mo
447.644 343.157 li
448.991 343.973 li
447.217 346.903 li
445.87 346.088 li
cp
f
396.141 398.326 mo
393.636 397.141 li
415.366 343.228 li
417.871 344.413 li
396.141 398.326 li
.172549 .345098 .831373 rgb
f
431.376 341.699 mo
432.059 340.866 432.599 340.208 433.281 339.376 cv
427.337 334.813 418.722 336.642 415.145 343.227 cv
416.107 343.711 417.031 343.987 417.993 344.471 cv
420.597 339.677 427.049 338.378 431.376 341.699 cv
cp
.145098 .223529 .317647 rgb
f
449.336 356.652 mo
431.498 341.537 li
433.093 339.418 li
450.931 354.533 li
449.336 356.652 li
cp
.172549 .345098 .831373 rgb
f
418.492 343.799 mo
415.797 341.685 li
416.678 340.563 li
419.372 342.677 li
418.492 343.799 li
cp
f
419.772 342.219 mo
417.973 339.304 li
419.164 338.569 li
420.964 341.483 li
419.772 342.219 li
cp
f
421.787 340.983 mo
420.333 337.881 li
421.583 337.296 li
423.036 340.397 li
421.787 340.983 li
cp
f
423.78 340.23 mo
423.149 336.863 li
424.688 336.575 li
425.319 339.941 li
423.78 340.23 li
cp
f
425.983 339.996 mo
426.381 336.594 li
427.856 336.766 li
427.458 340.168 li
425.983 339.996 li
cp
f
428.777 340.47 mo
429.975 337.261 li
431.45 337.812 li
430.252 341.021 li
428.777 340.47 li
cp
f
433.657 367.614 mo
421.564 367.614 li
430.839 353.415 li
430.949 353.415 li
432.706 353.415 434.126 354.835 434.126 356.592 cv
434.126 363.35 li
434.126 364.807 433.966 366.231 433.657 367.614 cv
418.259 367.614 mo
408.519 367.614 li
414.243 353.415 li
427.534 353.415 li
418.259 367.614 li
.811765 .839216 .862745 rgb
f
421.564 367.614 mo
418.259 367.614 li
427.534 353.415 li
430.839 353.415 li
421.564 367.614 li
.709804 .521569 .529412 rgb
f
405.537 367.614 mo
367.166 367.614 li
366.857 366.231 366.697 364.807 366.697 363.35 cv
366.697 356.592 li
366.697 354.835 368.122 353.415 369.874 353.415 cv
366.204 353.415 li
364.452 353.415 363.027 354.835 363.027 356.592 cv
363.027 363.35 li
363.027 364.807 363.187 366.231 363.496 367.614 cv
362.753 367.614 li
362.444 366.231 362.284 364.807 362.284 363.35 cv
362.284 356.592 li
362.284 354.835 363.709 353.415 365.461 353.415 cv
411.26 353.415 li
405.537 367.614 li
.811765 .839216 .862745 rgb
f
408.519 367.614 mo
405.537 367.614 li
411.26 353.415 li
414.243 353.415 li
408.519 367.614 li
.4 .513725 .776471 rgb
f
422.421 381.336 mo
422.33 381.376 422.239 381.417 422.143 381.458 cv
417.874 383.274 li
416.96 383.661 416.199 384.312 415.676 385.122 cv
380.734 385.122 li
380.211 384.312 379.451 383.661 378.536 383.274 cv
374.267 381.458 li
374.171 381.417 374.08 381.376 373.989 381.336 cv
422.421 381.336 li
.337255 .00392157 0 rgb
f
420.4 472.914 mo
420.4 475.991 li
376.01 475.991 li
376.01 472.914 li
386.313 470.566 li
386.746 470.466 387.169 470.343 387.579 470.188 cv
408.831 470.188 li
409.246 470.343 409.669 470.466 410.101 470.566 cv
420.4 472.914 li
.788235 .960784 .972549 rgb
f
380.734 385.122 mo
415.676 385.122 li
415.253 385.768 414.98 386.519 414.898 387.311 cv
414.898 387.311 414.552 391.957 414.011 396.008 cv
413.423 400.409 409.469 404.996 406.552 407.84 cv
404.385 408.537 401.518 409.16 398.205 409.16 cv
394.892 409.16 392.025 408.537 389.859 407.84 cv
386.941 404.996 382.987 400.409 382.4 396.008 cv
381.858 391.957 381.512 387.311 381.512 387.311 cv
381.43 386.519 381.157 385.768 380.734 385.122 cv
.647059 .0980392 .0627451 rgb
f
408.831 470.188 mo
387.579 470.188 li
389.149 469.615 390.559 468.664 391.693 467.417 cv
392.439 466.588 393.044 465.651 393.486 464.645 cv
393.932 463.639 394.214 462.561 394.323 461.451 cv
394.341 461.241 li
402.073 461.241 li
402.091 461.451 li
402.301 463.671 403.225 465.76 404.722 467.417 cv
405.437 468.204 406.26 468.873 407.166 469.406 cv
407.698 469.715 408.253 469.979 408.831 470.188 cv
.862745 .866667 .866667 rgb
f
406.552 407.84 mo
404.763 409.588 403.361 410.68 403.361 410.68 cv
393.049 410.68 li
393.049 410.68 391.647 409.588 389.859 407.84 cv
392.025 408.537 394.892 409.16 398.205 409.16 cv
401.518 409.16 404.385 408.537 406.552 407.84 cv
.0666667 .0588235 .0784314 rgb
f
403.361 410.68 mo
402.774 416.788 li
393.636 416.788 li
393.049 410.68 li
403.361 410.68 li
.560784 .6 .607843 rgb
f
402.774 416.788 mo
401.764 427.305 li
400.781 437.494 400.776 447.757 401.755 457.951 cv
402.073 461.241 li
394.341 461.241 li
394.655 457.951 li
395.634 447.757 395.629 437.494 394.651 427.305 cv
393.636 416.788 li
402.774 416.788 li
.533333 .576471 .545098 rgb
f
422.421 381.336 mo
422.421 381.336 li
422.421 381.336 li
412.602 381.336 li
421.564 367.614 li
433.657 367.614 li
432.323 373.635 428.205 378.778 422.421 381.336 cv
409.296 381.336 mo
402.989 381.336 li
408.519 367.614 li
418.259 367.614 li
409.296 381.336 li
400.007 381.336 mo
378.402 381.336 li
372.623 378.778 368.499 373.635 367.166 367.614 cv
367.166 367.614 li
405.537 367.614 li
400.007 381.336 li
.615686 .231373 .235294 rgb
f
412.602 381.336 mo
409.296 381.336 li
418.259 367.614 li
421.564 367.614 li
412.602 381.336 li
.568627 .0823529 .0784314 rgb
f
402.989 381.336 mo
400.007 381.336 li
405.537 367.614 li
408.519 367.614 li
402.989 381.336 li
.427451 .0784314 .196078 rgb
f
422.421 381.336 mo
378.402 381.336 li
378.402 381.336 li
400.007 381.336 li
402.989 381.336 li
409.296 381.336 li
412.602 381.336 li
422.421 381.336 li
422.421 381.336 li
.462745 0 .00392157 rgb
f
374.732 381.336 mo
373.989 381.336 li
373.989 381.336 li
368.21 378.778 364.087 373.635 362.753 367.614 cv
363.496 367.614 li
363.496 367.614 li
364.83 373.635 368.953 378.778 374.732 381.336 cv
.615686 .231373 .235294 rgb
f
380.423 475.991 mo
376.753 475.991 li
376.753 472.914 li
387.056 470.566 li
387.489 470.466 387.912 470.343 388.322 470.188 cv
388.322 470.188 li
391.992 470.188 li
391.992 470.188 li
391.582 470.343 391.159 470.466 390.726 470.566 cv
380.423 472.914 li
380.423 475.991 li
.847059 .972549 .980392 rgb
f
391.992 470.188 mo
388.322 470.188 li
389.892 469.615 391.303 468.664 392.436 467.417 cv
393.182 466.588 393.787 465.651 394.229 464.645 cv
394.675 463.639 394.957 462.561 395.066 461.451 cv
395.084 461.241 li
398.754 461.241 li
398.736 461.451 li
398.627 462.561 398.345 463.639 397.899 464.645 cv
397.457 465.651 396.852 466.588 396.106 467.417 cv
394.972 468.664 393.562 469.615 391.992 470.188 cv
.898039 .901961 .901961 rgb
f
385.147 385.122 mo
381.477 385.122 li
380.954 384.312 380.194 383.661 379.279 383.274 cv
375.01 381.458 li
374.915 381.417 374.823 381.376 374.732 381.336 cv
374.732 381.336 li
378.402 381.336 li
378.402 381.336 li
378.493 381.376 378.584 381.417 378.68 381.458 cv
382.949 383.274 li
383.863 383.661 384.624 384.312 385.147 385.122 cv
.517647 .27451 .270588 rgb
f
395.529 409.025 mo
393.819 408.853 392.272 408.533 390.934 408.162 cv
390.825 408.057 390.714 407.95 390.602 407.84 cv
387.685 404.996 383.73 400.409 383.143 396.008 cv
382.601 391.957 382.255 387.311 382.255 387.311 cv
382.173 386.519 381.9 385.768 381.477 385.122 cv
381.477 385.122 li
385.147 385.122 li
385.147 385.122 li
385.57 385.768 385.843 386.519 385.925 387.311 cv
385.925 387.311 386.271 391.957 386.813 396.008 cv
387.4 400.409 391.355 404.996 394.272 407.84 cv
394.72 408.279 395.145 408.676 395.529 409.025 cv
.741176 .341176 .317647 rgb
f
397.462 410.68 mo
393.792 410.68 li
393.792 410.68 li
393.792 410.68 392.561 409.721 390.934 408.162 cv
392.272 408.533 393.819 408.853 395.529 409.025 cv
396.675 410.067 397.462 410.68 397.462 410.68 cv
397.462 410.68 li
.317647 .313725 .329412 rgb
f
398.049 416.788 mo
394.379 416.788 li
393.792 410.68 li
397.462 410.68 li
398.049 416.788 li
.678431 .709804 .713725 rgb
f
398.754 461.241 mo
395.084 461.241 li
395.399 457.951 li
396.377 447.757 396.372 437.494 395.394 427.305 cv
394.379 416.788 li
398.049 416.788 li
399.064 427.305 li
400.042 437.494 400.047 447.757 399.068 457.951 cv
398.754 461.241 li
.658823 .690196 .666667 rgb
f
367.166 367.614 mo
363.496 367.614 li
363.187 366.231 363.027 364.807 363.027 363.35 cv
363.027 356.592 li
363.027 354.835 364.452 353.415 366.204 353.415 cv
369.874 353.415 li
368.122 353.415 366.697 354.835 366.697 356.592 cv
366.697 363.35 li
366.697 364.807 366.857 366.231 367.166 367.614 cv
.862745 .882353 .898039 rgb
f
378.402 381.336 mo
374.732 381.336 li
368.953 378.778 364.83 373.635 363.496 367.614 cv
363.496 367.614 li
367.166 367.614 li
367.166 367.614 li
368.499 373.635 372.623 378.778 378.402 381.336 cv
.721569 .439216 .443137 rgb
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
[/Gradient [/0 /1 /2 /3 /4 /5 /6 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 17.1.0
%%For: (Tom) ()
%%Title: (Cocktails_002.eps)
%%CreationDate: 2/15/2015 1:36 AM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KB3X+]fC8Z_YA=/j;b0FZ,E8L]"G@m6&J>?P82!B`1,ue_-+g]P4MUhXkKKm8MS55.AKAhD*`"f0bt)/DaYeF)Ej]nPC];#4
%;)0)FU1Ebmr;"CUb-UB4h\k1Dcn+kTI\V8<DO12q-f;!_gRYH?rhnAh*-kWTNL+qZf4rRF1:`iT\q)T]JT9XLCVJP>f=c'VB,,12
%/njb?%ZGuGn3+1K(C,(r3qKsh!!;;[F\haQnKec$I&qcZorkBdDVOJXRuPaTYcDi\`RJOLb7e6uA6Tod*indAVVkOg?EGa/bXB/&
%D>-m3Vc_+^\$2\rUGsg#dR0--nO^.*L>]>1ir>t3i&c>410R-`l^XIZE"+-TE$_7un26C3e:@e-AX.d6$D..f<mBt,`%#@I=X16r
%?K*&YcG0PI\=oBpT%W&!P-rMm!M=I9&3edUll'lss&&Ihg<)PL]s?O]b]MRpZg*$jBi6]so4bDj[pM(o?(`+62I#\0W*/h0J7URm
%Xa.k<(m=Mmp,Mg#=+1rRZ!$B9)n%M&\B<!$rQtH+UX5u\OlMbb3,cMS5W>'BA8F?&!qrX3Ri,5RGeba9cr>uA#D5Tf"rn`/Ca*pq
%5RNS,eZ3FpCI9sU&I_*#k^L-INW`;b18mh?K(EWWf[C>%&miAfg[uKd!\1h'+2u0(aW@"pFj@1;oui(k7HuUcSecpD"/0WI]WML(
%0prL;q)af;g%@GrV#pZR%KCI/Ir-/)k4:m>VW"SQiO>81heJVTeob]:(reRZiuC:'Nnl\8DOe=V0WAo!+5=e![S>2&Dm5^J@lJdj
%J$E3AO59AP*1G462u,T0EF&LnFZHAYY)=<*<t#^,$]kN[@SQAE%Lp/(1`26+fF@Af^Xs"c$Et9&+]A(Oq]Jf3QZ*JV+U0/tp_Q.<
%;YV'+'#YD],?"<'E5soiN-O<]Ju/SNm"VIt?gQgafG8F_J/=FcZkT=Q^LF.W?6CB+(XS$3$2B$N5o9&%]-340(T.n)'UXgI,ieA'
%G!d5O:(,L+_2'?8`D;;_O9>D2J]B,8Mqnq7r%"-``'k5=5_*VSZ9Z21Oqb,qJ1,)lh$!6Lg'I$K!X-.99roo.%bN,>"TP\:+rJBL
%,"TTTk2L0p&cZ<!+mXrZTSjYGJ$BM.#f?`n%l?k>:TP]b4V6dABEG^hi.]5XTa6l.i2rZdJ5=NuX=T/t^^#f)n.X_i[pXV=]pM'4
%0E+Q$Kq\pr(;(Fd&lZ=4:Pa%erF-0D&%":DZ[c/?*XG=JF<H`7)BMIKT_T2/"'S4M5aVUnddW&<!Or0O_9-4r0iV-fqM29&<3#L2
%A)aQQ<W(<gnMtn1s'Rh]"8WhIMLVKP5"Dg9T4Nl*Q5-Q?aa]<q^5?79^KaN]NaB[h(g\VHVW_%X.i-+ekZ.OZ_LL"Z,7j=Ji32nq
%HkNW=,Lc7qi>,[oWr1%>f6&Wh>;1WJ%_O:\a5JB;@lhuiF\J^kTG,:>H4IPS-Y*fFFaUCTYT#]@m%M3;a35>?%`:97W59\?S\3tu
%OHVMP$%j4d_LsPG-4I@l+AaY.b@rq1@ldktN\d*YjGjQ\!F?7ZZuDaEc?:33HIt&O;,!(\`%):pfat@hF>FL97l<<D`7tWq>TTcJ
%Be&NXUb''f@Sh\%kii)U83!,;XQrso),@!l!iDKM=&%ao1n.SN#NA-l!^SM=O:pK'#P?:BA.AW9^u5E>:(P/k;HK&Q`o3W,H[H0h
%k@sLW_e;$T7p=q@YPF\2+AP=s_^@Q'!'CeL\YPV"#4[p[A0WPB5g++O9=K#LJ:AU8=hLI__/KM\k(<oc2P4XW=1mZ5TYb[`6qnk7
%dSiTQ`,Js-`tceU$<K%d+'aNooX&]W?4`h6eA8,*d1_8P.OpS(,rC:>"_a8k.T\5FT8',g;B08>jsL4%"E7rtHF5>6)bhq%M4?i1
%,F+Bu=U6Q&JFauuL2EU=U%)V8-iqumMCh(".iOFU48iRI@#"`;a_\,a,#7MrK^oT[D$4nK7'1&U?j3C;TJkL*9/g[!)(7DEL_!"Y
%,q0CW.G:Xk'-\^?((ADcFA.:BX!*"pBK1a+jM^IGO=#dG&td!<#eZ^q;ir2;@QMa>VTS3YZiGp@"H%Fm^=1iLUp;8>.nNj-Yj$rs
%.MkDX&/dL8MW>-93@0!_!`)6e+1#@RL8sG+WTVKW1mC`h&[#FOfXV+1?m;J`":WMR`>!^0<\TZcGJo_2asUUh_P?:]BlYqZpe,d:
%bX?b1E-"Lc,:UQ)K:,t7@g2Jn,Y0a$]]M2Y.=f?uY?Z#J@=dA;%M-?`MTHOmd/mF5:e67=Z8P6R+q855!#,W7KnjFW2+V\RoPmE`
%?tcp]UkR425-9`0"kXLX5Qh<7J1":Bc\*g<E[[hoNq`fMAekqeL1((rJE@X\CKf[YNl]T\fImJl#;0I3q2V&B8CGamoBSAd#[.dQ
%6rOKGB_?%VnI4Oi-75o@-T7=o@Z516QQU(]a>l?@go)uG_9bQI6ppJb6D9SZ'I0E?JVWUq5ga+S!?VARFCO=:`)N`R/qXi%RE-\:
%M6b@"Tn0A/ad5@O#mjA#ioHgSEH`[97<D#XX.>2mLArRTX[;(iao04cM.hPk))AE\\>jG&D^i+$4%9;l@B+!-(h@@%<*^;NFfaM$
%KYEIW%2.!@pjo.Ka$Oi@CT2@6@$0@rJ4JON-'J@uS3%go't>ZWm(FkXW^9Gf?5,*$A7'IL`c=iH$jQ<tm@$'!X4qge7$W<>:=4u;
%#Df%b,%'YD`'_FNQta?C!sb9LGiE[iX-8GW?ooR@$R)_ZTcf/deUscMJu5dY#+)E=hMikfae]QJK@iX.lN8+20+,Ma'qPIV&Z?IQ
%9(KcC$C4gILhTAB.KD5MihSsQKTIDC!eqpR@o:Nd]5IY5!`Xi:(BM>`:;T-o'u!L3:h_Zi-`)X10Ck;]5C$@W0S7*Wf-#5Z3Z,\:
%!U0;(!h1s>-AoAXAL$FMec@Y:i>]Cr=)BI8\m\hkDuueGKJYX'I-S9VXctd9gi`uj'.,L+$B`WR02uW%=&[*J2PD;FEQ)]er^)jR
%`)2Io$t[c%\S3?9cfp"Q\QBN:Q<8l4#P0b+Jmb*fU/r\`kAhA?5u`(@d%ON9'Z">`j`,0CM:5Xc>Ut&;Ku'HWLtE=hGbl$CYS%M/
%0]OdgJ8:i("=jLC!e`mNE-3sk="stX+dR7ec"8siERAQ83Y[,X=^&a94A"gkck:mL0e&HJ$=Ao'P'"-u/"g/\c^Z1c""=K.)aK4n
%ErqU]8R9P(k0RlT4m"_u+ssei_(.s>JM)WbEe>a56E<Z&R!i55ea]aMLg^`pKj3?L^\@peLVYa$mh(OeH<q##=GJ.2!ObjI#NRFT
%N>>9_leE+K'O#aTOG"f]NcN-r'0<2qcQIicSH'A`>`cbU7Hm5aod/O56pT@@7n1r-BKtF+_WD,CQ*cKlO2+a_e^/#6Kj_.kSe)V>
%IO)G%Z:&\t*XY$J3u.s8kbM0^15TI2ROeK:d'"El!<FF_>T;Q.(FddM)7P=\dg;UT!,aIk(*Oq[W,]XXP%-*k,$4h-U$Vn-I)[:K
%jlusYiM.68;GWec6Xg@a-MWQ$>Qg0\;.`(=LGD5dntd<1]Fa#_JnQcq\Hj70."I)k#/q4]A<D+(l>9pG69]I!L`"*3_/u[c:+1"a
%kcZ2&Q7+NL0t4X.k%HHRAioYM3,TRp'<*MpWs-g70_uanq)UY\U*E$72]bi=JfrH#*lm@rcZD!t\L*-B#o#1/'1"@2Nc"!7K-9/!
%-HH3W[)+9W&Da'o+Z"6fQI4X@KZOLDW]5SL[L=BnJne,@V24UT.%lBbR;)kun0%3YXsX9VJADgP/l%.S&sGV;N"rApV;ITX5^PAV
%%]F+R2e.5j%t$6mJ/6)W5YO&6mEf;l.^E(\=3#e7$s%m(Q=f8.q(5doK#C/j+lE0'0tMlm7$T=%N?JU:p,l)a0JU,3abjL=6HFag
%:aq8WWB@;U&GUO,S-A\&^je)4!#D]!5QO5_721q;%I9&HaC?rel;=QP_,5@8:J`#7jW<bBfE04UJ?l&jcAjVlfIMMh$"#'M'EY/a
%S5Ra"X3hnS1*eh3-m$$A#pE=bR>`W#Hh9-\>B.0I,Ii<sPPRn`'GDG\+t%o)Y82Zp'HdrE0g3C-M'9PNU6$DTNlhU<SdY*iOF:+O
%Q,g1fBe_=4`!9.<%?*3!7cJ9H3Tga6,Kjf:kNTFH/(jJ8Jd.d'5ent!LceE:U4>7MR%eP[g^:@O4:ISPV+)10"(D?$7T?i/DhY`B
%OIMqf`M]q`3?G%i.R9Zc""1q%Md[>K?77'B5geLu*CHVN$"G1M3+5lbjm3u49OP[M.3QJME0$HXc6B1.Jp^5\h%DN%VF2a[l\Mto
%E4$$r:n4gFTYiP!&R\/L:_-1DTqR_,-+dXcQ"h*\WhD9\X4'i1M2#1rX`-&:Yg$XEr^57A1pk&baL[cabDuNsC#pB"@1BMQ"ih'E
%5,+5h1ZJ;a/#Js/n/s,o!'!94+^-s056cna2U):A)6?t\=[GldAd5;m]a:s4/:`P^K\2ceNe1M'n<=F:%T%76/tkQAL9#;Fl$Xfu
%&ihL7"KI-3)3,BJ',ZT`>cqRoC+Yj0!C@.K[0S9[R@t@INJ/W5"B@9A%MpWlJJHX\b$3tC&8qa$K*-t-=![35m8dm*6Es*UqnT];
%-I9lWbu!]PRn:F*(^#WtWL6>O\h:jB;)8KSNgs(b?ibDfMAYCbNZ(\l0TX::!WTtPBinMqQ+Wi3>$ckn@=89NZ(\Vq^,QGYDMS$"
%4f.l]i]B*;ho6i7%#0tcaVZ3l/eVh%dtpY4Z$A*,X^[/E<%GpW):+8_\+sVVO8.Xq&TOE'Utr+0YN31?#Q!l4n+Kq7MSh4!E:L4?
%"0)em[.<B%0?&.d`C[0:?gbCm^",KEder]t<N"WboJ:F`;Rb>^rl6[)N\A/`LI[b43p)\fDgNdt"$VKgZ<js3BYoF?c"m1onL]]r
%O76>hf/2LqI\k`#7h^^0@cN5NCUR[cLFli-S9aG.>A5EKWHerVSY7^R\IY`*i#<1t(<mo.V4,tRG?R6W)FT#MQ5J'op=4hm3o+,o
%5BBV,n&)B9Q<+,s=)0\gODi]be["'r/%)FEWMk4(Fg!U3RboN;66O7f4rT6s1fL"EXC!l$eP88t0]!GV:C1=YD`<[q!mGhkF.G=0
%2JWmf70iWg,V/8b(c*t+KUmlM!+4%>jEV8HlDj6ZY,eC-o+1X\>\M(.<)Q[>WXi;gq,OrWi.r7RL\19,M9sk`eM?XYXR"D@_5CLO
%.nO3T>QmJW_ShE#F7tsP/R=".]52i]W]reC;+<%c#$@,6=g-QP,GmEc/Ne]V3P4ugfShuL=O1YeirY`Ng_jsFr:u,:aYi)'C;9/$
%X5N<P197St%Bg7JkXmaE(l*s&2J86_bN-fqrpfO)5Bd&(6SH5"0-@`e&$Z_6iW1iqq`Yf[UITds6bik$Jh\?1s86An+Enu<TP,J:
%k2:fAK'caE$0e,AlE98)(\3MoYuiF:Mn,Q\[#5\FnjZJ0C.20&?uWAI.-(bt_A0-RKO=si0H^a)@EN&nOO$5:D,E=ATNVhY-b1Gg
%B0/+8BB%KX:<Tm^,lLIM1A%*s?l0%*TC-A&F4<GSY[+kSkO"dVgQp(jEg;0Q;iCoC1jC]8_4_]7H2n?XVLf:!'7bjopolRR_`^6h
%%g=%9i'N+>!KdM;/:-5DN^9YKVDEIq\tU\ni2m$/)F1DbPUg4?MBEb):5;PDHn_35K;a_D)3r:1_e`oiA>`r>YfD>ID.s&G9c"n;
%!Y6"e$u7?&a[ZjD*ge1@nA'N34YUct_#r>*jfJSIJ3OfgcrT(u_Lp5<!JNqrVSaGD0^4.Pi'/bU"#n.&NX_Mc!HK<o/%2!&f+0!*
%nPgJ1"Ei6k\S;2E2LM&oo.":HWll*R1<)-nR)(a<!=]uecN+I^5RUXlJ3"+;U]\<?"p+ltg-Eb"d'Ta^5[tOBX\f[^!s^@WgE?SN
%!2!NSQjTA4J2%7IdfdP?^uLrI#EBT0QRa0p.S,33F^R/K@lFI0V(hO=]Z%dJ5@?s)oE4<ArZV:BFVFc\E]paLO_^/W;6k;r=3i9t
%_m2+i/d9=r\-:%6%0t%E)S?)"[2FTUFQD$V;e:b0kV*Yk+2@TS-d$QW1aY$JoK#O-C=+<<U07o;0eH[0Be0?L_Dd3Y>@J'eX+L8;
%8V$f`\IbWC+gV#sAY5?YW/CB@m*.^^ZX(50@5E;'fn*#gNXfDSb<ETm<(hJlJ_0l]iN)@ilJM8<"2<Oj`s@\@Hng;cld4$n\%Vc)
%V<_luh"D]:K4QqO^sdsDih,X7oQTfd.WAeW;.fD.->d!648nY`4k]-So^F*:Tgtka!.aFF51@SXqphb5D@133Nmg<B%5NF2^uOn:
%7c@te'RidfKdINI@TTU)`i)5h:=gnj^b*r\>$*fj(J_)Tm9QZSdArR3@"k0&dm6*32R2"P?hS5`UZ>4JKbu\0)WBaU6YJ5)D84Q#
%V6PqEa/KpkE7pH&\b%qsg\/DVJ<=P>9OIg6+ibp>f'(YF93q"AT>nI\4&66^7e<]cKoCF8C)uSpQ]S)\/^ZYVYo/7H3Y$ea(>h?K
%A2IbGO6=D[=EN-\[7gM5W,e_R!KAogTJ>aZYM'hiDFltCoFMm3knk>`QJ_DIc#sG!U97GG(Fm.AW#V-j?%*G$'R<CW@'ecm1>BuO
%DW[$`VK0"s_D7CGV,U2sVK.s1#Jk?GA[C)n-?DP:R=6oXU>dl)\QfIF>ip(M>],tQ/T\I60"9'diouN<8@_tTAEG5*gL(DNc)!d:
%`q)43FE7?k^NOefQ(*7T\#piMY4Y9;^j/T`6mP.QliP*[.FNcB[p8EP<9ZT?WIj8WpF/T5qd-JTWHsQZBGm?-\@GbAFStPDnE3Z&
%dTM5ld%,1qDcNCrE^2WZfMMQolFMF<W\ToE?Gkt=:N2Za%aTW1O3UrBLA>I69l3`#S!Jlh`AbiN;2eZ3YGn4XikS0af<0?Es/b:X
%PI*aPWTA:Pn,f$Ee\$(>g$!Ok7N.s>*&9DLPk54ss)'\5riH`jL<OAKJ[b#B6)%N.L?XH+F.Wt]Y]ORV-NtFgR<jg3d]>@<LZs[_
%lb<sh1T@C012`K&TP*fSK%(X^Ht[KB,0+_j@nQIYG.Sa#AcZYs0&6P9JP<kRm;q.$Us6OanClF\FkuM`@E^qn#1GT91)Z^R;+XV)
%'C7R!3/f=f-#h4D3q9l1dbpeC2@aFXrIunaF.C8rpbj&r\+)f6AE]05^@IDL$Qe[d-9lr0'['E=^WQPVb>UU"YaP>:+!UqIZX23V
%`KD)lCAr!$g;l4B[9VJ\s-$nREm`2fWS&!;6/t[BH>,>YFIZMi]Pp<+76-N2Y2\mg03F&T%:ajlrV17"B!^=)``pBYE)JKZL+JW.
%>GTHfQH!]0NE;Q!I?qn=J&7$VjiP'\pJ_rjc+(Kc@E<;-@nJcGY<Buh9a.0L;m6XS@Jj]*=DMg@<>o/8Fb?Nd$%M.1gAVckHC*7W
%9AKBIm@RPQ0JARMSDU!tEn&,,dSeDsEm4N^UGRQ[o+?!M*'.f;&Xi(++f?c4d.5dpUZ'hMr#5Md;jn0'JK`LZcUkCPG'j,kLJ6CU
%'WR^)bq&Vb4'kE`CG&mfh1OriC`UekVNW3ZSfe!#`b*Q0s89k1g7(jKQ3eV#J[]CRm:9blD496&kW!,mQcG#8O2`&ofsYgc.Itm^
%0aVR$C"?!FRO_nJbI`2HXJ@HEnWZYg@lbA$7E[M8OD<6SBVX6OJVmMYp$04F)ieokigm"0bsluNGjWnn8nCM'^DSpUQ$0L*7ae6i
%[.%c+PXhM\[W8p9^EK(9eAAB;_CC7&lo*>R'[>n$:ocL%0?)HL-*L?1C8O"E*pYj=UqGDghTlm:!5b;0f1m2#M4W0_.7M/d=/00n
%Q\<7e>tXg_RR3k/=ZO_i`^I#0Aen^J>#469f7+S>$ZKUadde[+CumQh(c(^ENX]cL&nM93HN?p:PSWL/8h+,=Fb@*K58fjN*bEO$
%-ka"W3/`s>5V16Ur,5]B87td8_H*R4NnHXTP")Zf5"89Z+tq9:/C1%Ac_C>Qc_?X>kq#FVRm$BBF!8l(W6;Lqo4$TLMf]^\Pr?mu
%8QaKK-tsrD?Lm;e\P"`>B51?7neR*@9jZ->c1=i(n60jArpEZ=5E,B>:eVOSKt;c-F)Y!LH]VM1i`aqrqQD_ujE\;bc_B5urHI-J
%B<$^ZG'B?Wg9o\f286G5.7g\MCJ2:JZtj_kf8=EY=b^_8E,CocRZBeHZt`77Fuub5%+^`\g<uuQXkKLO[J5d/`@p)tT1@q-Jcu,@
%0'6DU!%ugcp1e+jeL1S-Q>3d+UP-khCOUs"V#%Q-4/mKi0,ELZ7mkB8.1XE*ih*)/,8]Z-VtR=]f:+"'/MV0&Dc&=U2H)B2!Ip@C
%4La94]PbV'RGW'BEd<k;j\9KEWmr<MgniK:>GFk]C3a<Rl/!7gOpdcZ]:u6<CrPdZM_Z#0Wf=;kWA[6G<-1G,>JA]@Ud?Q^GH)P%
%D=70SCSB-eWh6MeS$W!Moim.MK=lVeL$miCN.3nOn=0)OZNK@c\<l4<e*"^dUm//f2ZgJF'V"paj@>A\cM,9JJKE(L'j.9DYMIL8
%c&"GO*T>5T1%<oImWI@SVQjuZos:MEWj"FWoIQ"/G+)t^7d\SME6tMM7Amq0eBu&7%bbaZO@I];f]"m4H/+4cV2nngl*n=RDn5oF
%5MQ5:`OG&8mf1Ri/2,NP06%hQJ=3^6P2"/ChrUHuEmJt*@i-F@3QjSCjdtp]cZcq_4-p--jdtp]cZcq_HV8OHX-H:1c-L=PN>Yi[
%mG??ORJBb!:VTqGr\YRU>4q0l$QV,tGSejD8G*L\>-+#6;A7j02]E;g2q"YP^k`lJ:8n(nb1j`[H;CYhP/=p+g(d.ue"W,oT$f::
%RQFWM$CNS1gK/7LDet&1n@'P[WEqHkIoMmp^Ur=qbM1:Mf,2&&YUl=s94uGrfs5_.8>WXl;:Yfuc[PggaY)mlbPG@n2a#'FRpUeD
%.17u;^/IrL.g8])J#`0JGLZ*Q-&b.:F38'_6C!_46aV8?4e#=\=l#c._K.1"SX*W7BX#1_8mhkH7Zc(MEi%lIOL@r!].X=s;X\L#
%6lI%#e!uWK(B88<&pl,3UERgtbOc/qZHOL"0<tpPop97KAQa7\(1*;\QY#,e=a4'b?C$;3s$i7h?tXji5["qbD@+CP9R)j<Um\8+
%h$U3N0-i.'p#XAd:!B=XW)^GW??KeXB-,=5UA]=&qLaU1DZgjL-51*2%'[Cd`,+?clSk5&K>YIk-50=#Nf.uqVXt@JjrNJ6j8Gfq
%S7R>]FH3[>Us-Dk>i(%rT2BrqII$Il9?Xq#9hS1[20WCg]CsCl^OGiOn'%P<>$dIY__HXu>D)mTIR.i%Pc%Z`FSmbChtG5BKl1d-
%BgIb-Vt`!mEf+4fV,"@U_^Jl_^u=a]lhiK:beGk;pa='j0p@/kj32Gs6^o0p/2OYYaO!ml=d^h7IoX[kc9'-sdrK6(Q3Nam5M\&m
%YiE+;fhdYBkbRatJ'U.gB`b.\`_6??3lWheL%IJs=3EYE%-M#G=iZoo!-hYeR!g!\(8-\M#)?b1A&^\!ZApZ?Apdb%=Oo4hUlP!6
%aj@V*WZuD>StB$:?E*8@?8eiu%ekm$'Bp*(58BDT.FRXpM3:NHph8)tN\+jAh"TpYlhGAPs5*>dV)/3o?iOj!QKFc%NF)Q#[-U;_
%4.*rJ:CF-ko;l0`Q:BE)'D2CmG@%DJ_Ca/^QL2SaS,J&PdEnWEF!lstXL+Ji1^p*re&#WMDn2WR;uA[L\!\RLC/,:tjc+oTj2OB!
%_P?qADp\'`5ng&5rb`\I]*^dc^%Q$@#21c'7DVr#kc?.TbM.Z.`FVe_&$daNVFgY$l+g@MAEN$i<uPU]r4#fH'UFNfAn*>7$:HL9
%?+9_bW[r9?Kk9kaSU^ttd"[.8<>N%\TAh!:Z5,*5l`\9'1HqB$>V;S(=CuWtCi5Zc/[N"@5\?G/bn^Z0Ci8C@\J0&SU1\NTGW]g$
%o!oHY+dg`#/d5k1FDdMl/^q7A3k%fGQK_Y=!?$f[cD<j>DUQ')FTE,dF@[r]]%KX=hDUkbX1"A7Ik5n0[ue(/=I``$8WiN?[l7ib
%@Bo^[b4iLL[cMo`B%\L^aF,A'j)/Ds&!^a-D;*4k+Cf\lcWMr+Po9dGieN`,/o+eXAih6+ROt^BmJbm5<=A29J(E%IWF`hYM-S3\
%LRoHkS._H>M#giq]XcOdKm*H0V//?.s(u]:o<0e*:'I=$h<6T.=LN(\IkNJJ09shB;-T-@-N-`]c?`+Sf6+)D4)=E=ff-orV)V6K
%"/^cZML3W>B',SB:=gH\6]R#YVglVn@ja,4XQ65#'GA*WKiO#J8tB;#ig'GKBI19goLZCO%7m=EnI8j&F0FF7pDNO;n0qpW37`:g
%MQ!?_>44]+H8!f4D:ipPiDZFB#4=2$L@"d*"GA>oU%BgU)9q"&kB3+'h(fJ/1S6_/&Q#-E[g;I-LJ//l'YZ>Q[eP'Ig$ip6?o2Dc
%K;)pN[#Bk@I50-;eDXt81ikt1Xg"8ifP#R,H4`q[c^H-cI_^D`beTsDkt>CWSp_jA[B&-L\tA95q/`s)QQdZc):^*p$$MaQ%Om"g
%Ro/?Y&if*]NPh]a/1#8^AfHL^RXW/?c>i(gs!^Prmh]m[mOs"K/DIM-Dk)e(A_)9>)BA`n^2Y2EaNGYESH#6p1&:?DTpSK0=MT:Y
%9YA3_4N@)Qp"SJaI%/gNDn[fA9Jd1oeNK9P`GHOU_M7Nskg#Q*1\5:sDr[0rhL_dG76ZI>$X4rf8oN1GMP0"Z1V6hsI5F^NB%p!1
%kd>hs'd*AbDY5_Y*LckPA/m8nA[9(SE&4'>EMZ2`B)Whb)p=^Eb_"\]=VoWKI'IQ&I#DZbk10F&R-$E]5[9nbRrs(>i]=re0aP7p
%F#._Je20CU^'ps<X@Ve0IbV!5(THKeRiL`VD@1U$b;<asMs;S2Uo<es_Jdk'[h?BPCe`\kUNAP`An7$W/8Jj^bbC$Kr_gt;/S=;-
%)me=!%u3u=K9l_5\%P8/P3/)FAl.V%$W1GAYScbNU$'Y_3k)giC0CC8Q9P9K=6R_p;lfj<9/)DEc>>/onqcDr3F_fR+LpNo+K[U.
%WcCsQPf"S1U,E+C/m^FT-SPqa`b%THkPVAq,Q>r[J%TUrj"\";c=qLKn5e'[&<mujk$JSoK[R1&&HMJhh`_-;0*-M7VR($N<V++'
%9'-uj"NNUnn]o%<;tuP6%>@+?R,t3i/WJU8N'VKS[2"tmEnEGY#6\[,hYkAgcf*\=B_s<T.[d'Ua3RATr$Ql;MHk`jaoDbh<(9L"
%8STJ!@Rs4jcA>Wo]3Sd:EH7Hgma[Ar0YZ"Q;i)$`KLicQ%oP%U`LhXMPi.sfTF'5_*KptAdKF%a;&3I:ThKu!d[+T2l^,j7:A+YH
%En],+C'=ocTip[2+fHu;?''l-Mp7mqjT[prXR=5bP1_tj]io#*=7cC]TjR&u$'bn0`sh['_5#6sF:Jc<s(\!0[)sdY[;n"Qc`CBQ
%5%o$jIX(8*p-^81SahVp8QuHp-i%cM8Te0Qi"&pa5)9DkJYZq-pEe34"hEXKJ#*_VF(?5OAu7l$eh#YP'CXgHO9Aj=V,7*aKGa$t
%="_qk\r'LF<18r(]2NAAm>]!6O7[#bqp'qX,G(`<Vq\<!JGK)E,.c=p0H*:h$\g"AV#E%>k%sSpT)UZ1Ml"Reb$QqIhfE2I41/g;
%EQkqdKRr\bN)T[5/\r"s3ph<&QL9NC$&I50eP73qad>dbRjhC1&UZLb0Pf[9=T[OEN1^<.-J*'o_rn>YKqJK'e)PWEC3"HWJ/K=`
%1[tPb7T#8Chsm7s!!<)P9YaO"]3Z@!X'YjcrEfYJY:PSZWFRX44$a;<^s72lmUaj_QS[%FZ,-&fSQR1!AQ\)pm18CmG3n4KA]nlL
%'t)Df>0_5is7+R`H5U/4%7;p@pJl.^2\,5ncL!<4<<<PYrE<ONDZ_oj?7e4TQNF'u3gFKH(3U.e?[8jF_s<g]<)TJk<AejGp,da#
%LS$U$s6aKVj_EDZXOaE-^e1bY4S$\G?9NApGFGq2X?;4m6$%^52McX*Xc*VnFSuDO6^)^MZ&43LKOu4/3V#8`R8^<<p"S$s&DFC3
%j:G$W$p!`u>J9I#6)kt=@M$=BYAr+aY5HL8ZdigpKFSdNY;IuHg8WupeN2*2a_Kd[ZP>,/-GM[^32#a+(rZS_a]&:QYNph:q,@t6
%XDu!&1'7\.\#S,3-p1V;jcp)3WU=nHqV/Yd[F=$aBf-!X%Hmt)eW(?u3QO1nDDS*^"H74:c-f<"\9$2<L4n)edOR`g7H[[s6SZb(
%qEOo3&CFH4Pu*KKb$)43B0+jlo-SK^"/0b`O.H*SB3lC!&'Ok;K0k@-*q&X:^5'sr=$qO5oT&Z*a6X;&%Q$R2ZYDCIAECfkE-nur
%+E_W#2@:(E4+qoBL8NSd<\luUDh(\0kg9R)NOf>bc7[CmYMuk7AiV].<[adl!)UiDgAUO8_1Z-&YYb80)qj\U4Qe,eL^WjB\OcK/
%PDs$d/$M.\++ChU-2dg\1U<X0&T*]JN?>AEQp+>EO"O]Z]1T&'D1Sh-ZGk^//$FI8;9B2)Pa_!F?QLCfRE_)CDY!Zi%hA[N8(upS
%_D#[D1,r[gAe]]2IVW8%0<<p?LU?8$?phN7Y3It!94UW#;T\Vn5"HN1.)75f$3R'g?MgUPUI9@Zcf`]V,l39X6(,4]jlW%Ifl(aL
%28NYpEM!f7%*V;f-b@6e^_#9^h-.6<-7;sc"(`?606W]\@\Ll1^9)DrFJ78V%n3N]EE5s0Mg>lnEN@WUrPigm3luLH'silN)p05c
%)UG-0?-V*SW1JjAF?$n+=1&Op0O"W8OKN6*fnt?[N.b.%DT>"-BW^6&)YQsa*(V':\oQs(B;X#[/(5O_BfJ;rh4Y[MqM@/Bf4;aT
%aatTuT/9i'^B"q>DA:rfl%B89m!#I2NHgE'7e@r0\WiN5fK#pDZVmq$Bf^P\@C4&>#PLp`@h@a*4'Rb.e>P!rAcp]B`F*6s*nW>l
%-1liEj#XZmfk.i'?7J^k;*?Gf7'<$Hs$WR?cu*rMC.QE*\F<LA]EHAP_%qg+N9j"MF+gkom.b&lVO^Vc<r+hr;Me/F7VAeR6`2PI
%&Re?p)G=I?c"j-uL[6u1!V0KWRY(,LCQYl+oR#ht"IQb,b8jN?0mu@I]@Cep6<RoZoWMZh0nS_t7>%7VZ5C2=FO1mYV9lL+?[3KC
%9puP+]eQZgV:!P2HC#e-[G_eL@W?aP\0H#3UXh!J>4"p<M?6^M)YYf#KN1]-_8IHK.T4scVI+VCY=o'rj,p7RmFV`:n\AI30ub3j
%#@%^m^^ZBp_(<14n$Q6jg\t=(>0dE#HF%r=L1Wg?6e&MCru%3^@3,c%@f079'8=u^l$b7+:s="2k'VemePSUYXqCD/,63QTIeZ=u
%Ek@MDcGoMJ)NA?&fEQ%]]n4J'1QJ'$B<P1$e0etS-IcMaU]55NSaS9'6]Y!G7Abcf(iQL36K_s]gmcfg1JZ8p8#\M_#H#;$!Csk6
%(iuAu-?^&KaLHeY#3-QP&o=&QZtRH]g.h7A@9p&@1-3k!@9qUi?-Qdi#4tTd]H_8"fq%cdWBDt)89@Xr^>TW"EUqOnO/&W:fUcmt
%>EBOu)jN[/[_p66*liAScC%d+Al:6F9OOUY[T3cnXIZUs!Cm8U+`>&`'K`e?A%"H__D+6b,u=U+pnX*=T!1-8iEg`VA=]3)$R4cR
%btq;&DdFIb)rcO2(T<:kb^*1cgTR1Cm>>7C-q[=T<E[=%aR$CL1.L1>Y>LUNi3B[s1$T;X?VXgaU8%<gnMd_=ROOhuh0q(5/Bqq=
%/i>",n@2.5X&O@IV)h=MWRU_0f_;nj>a?og@`]DOLecBU-9L0KPBmhKO(G0X4>M2GG6DU?\6XW0JPRC7$I"uX6tn;5WjHDO)U53e
%R&N!BZmW%[)46lN(cQN)bmf>D*%oA61Pa=N*C\Sd6q(>IK7/:#K9A$2U?$W1"Dj7+>lAnDX7[l!"Tl]hkbkTX%JP7+_F_SW3,1@?
%V<`<2mMD=A28fg-5p[I6!Q,5^NY!!%)r2/>(ZOF%c!#7+.N8@!Ck9RP`-j>T/ap*cDHPF2W(m$2FGi3Q84:b7?tI-AN:Y!hd,C\k
%nal%u2^f?#nIYd-kA@EQRadN$T`'RLjPn3W30`G;I0F*1`jk;.d+8Ff^\'8;<;jQ5NBY)]AnJ]aT7KBV,AX:scroFB-hGrthoKoP
%+"4X*,D.Os,]XDEh^CW*YCg1CjlRj+mXcBqE+Li/4#A\im>,b=M17F1R20a'dqiQB+[Q<dR.SN'HW=p=ELE3$X_2&#E.S;PTBS7R
%U6;.JP*PVo2,B2.M;)g],EQcIp"ASpXqBTE7Y(o!d:?]t\K8gh&"mf@,(Q\a9WrGgfAL10BQG:20QX4!D,%$I-!5CQ+ZGJC8CTT6
%aemuUR'%[X_,GuKS%.@<k^G]R*"=J(Gk?V:+s#;.]NqY[+WaZYM3A".Rb3*37ln;N94Thc<#adfJ?]=QXEP!Ii&2P1;\YoJ7l:!o
%V=:A7B8Je0O_+aGKOVsm^*;KK9btb?4Ee@^%0=i26<JS`h5am@]P9$!3uX#L4t<SOa>O+88R&Q3*"-U[+oBS!kIsF6NJqVDZ:op'
%iPL=MV*YP_gC#WY;:))QRdHT3CDa80o$Xe80.1V3`Jag72D<%@hN/<UN5i%Ggc?"AS1(CuW2fRWgY;N&NBT0lNs?ei)BI`WP]POU
%0`eW%#nC$&@t_*YGNe-(V4KjcK'u-i)Iq&PFc[e+9HT!*2hkP/Zk6Nb^%klh`^(JiF1"mTe*>\e8pX9uUm+!X'%fu<+u1-)X8s3f
%-]"[VO%4.<7;2"Og<E9oHg(G#gLKR8,Dd*p`pnlYBuC"KBc&oCb,;HuZM-Y["CY<FTh-Dc_iGXoOT,W"EQ5UgU/7I8]cAa=1!QKo
%@AL]!fFbX4)7s*"Ff?rcT*u/[]U`2ZDSjQX_h9g:B62TGQ$(CC#7$PlJ984n=-KiO:QHTF>haQ$jPdQADZ.->i-6KUfA<]<Dd>6g
%4Ep7qY<L03]kljqJ,QIimqqI*hVUKET5GZuH?cgKmZgJTaH!>:<S-[g8uM0\E4)k(hqS-nID!%qhWjHM?Ed.+AoIS9:-7\4]UQNZ
%p?HU88,(@#eL.u*68n`1C1+0]np=Kc/@[37k(inQiS3OcraB<mWAb>LcG<ZXH>T#+la[2trnH5;g;CD(9VJ1C^Do;hIFG?dDdIki
%jIGD>DapoKn$ht8Ds,.=]XQG5f%18p.m8*!^Kc>$LgKLN:sMDho34"PgT/$BWoU=pq.oSSR\7aR#DJ=epjI)Dl,0u>+oo3<s)Re/
%$1Ap_0-$2emc6:-Dtfg/NI)*8`&k0XK4XCfX)"P@a`t4^^Xb'HGFTE8_-69gqU`-gr57-(hX<VaIImBnold=qh;Gp1>-W*m/XBG&
%:![WWmsj/nIX,8FeQ/8*gh<m>l8aW4&&'7iO7p#S?YckShgY0BcY8Ubf%6K5D/Ym9:J\!f\_3rq::kV@Y2*oniKU1Uo?J;JSGCMj
%heGc/X.%r<JB@*(PLYY85?BX:l2lb8LF[`IK:R@-MsIg&[fIlsI,t$Fc$]-+g<Q2Ya";I[mk`5#gK4K@G5:0FaHhnb/Uu;9;XNUa
%*q9[gTPqu.MYd/*;.7r.H/RO^qp<>o3.CCOAt^i]N,j4<5c5-.]C(],\+@''6M/U-(Vbj\fR%cA')YL-gYFHaZbk1l-ZYrj:Nj1i
%hd1aTDMA_?I)e5l=9a*5SqeG9N^-EBT:B@D?`,gB:9JP%jG'&jWQm`tD^FSZn85:(fmN>'k]m^-kP40)=$+_8(V@ugFfF\sgb0[.
%k=e5TE6QYsn%k[fLZ5qL:O=7MK^^=aoug&dRoRY?T*7o8h^haPMIdt\bj.DqgV()p<cA@XL1Q5YlIq_trpI>/f5=s1f!g[r4s_ga
%7^^KlK9+X9E_ZF(5;eY'a%7A78h_'ZJn;CBT(H(>6;>]Rc]'OOZ`d?I7(`B&\[R"D^$D1Qn+HsbfuM>Skl^@gCYut:F0oZ=ZW3oq
%<4u5bG?5ln*p'U$l%e8pZLbTa\(g5+J+@,3KLAW^,felXF7EK]RG6EilCuG8a;,9"R@^beJudJUp\G9\pe1%rbu^K@MYc><m,lLa
%pLHjNn6nO_j%nN$POn5$P7P3:kP(S?!<L@D*<'qds(96*[9i6nZ-efYf%]=0]`%e$n8>qOhn"/KgM>R?b<DA2+*<s:I'lo7A3)Y5
%T!1`Z%\?+6D>RNJlCcV(O&3oXet,#(n2shGl4_f,%DH+.I(\@M.+b#rYKmTGeL.E#R%X$>)0aAeRTFiSc4<%HBYA]sbNu;Z`D7XG
%>/g0s9BJFr>OR+44hFh-q>ML=JJ=sC#rDP<j246gPtrG^VmY+9Ge[>:1GFLnFn>8%ERoF*ri?.D`%65]iF;92HuPT?r-kdq>fbq1
%Ko5Kk9>W!F]'dP444f,k(uU,ZWb#H/I2dtBG.:+gT%NPQi)]TA`V&iN'-QA:\"MaLm]Z"Ai>R.1S?;6;o%!$+1*UoI]:9[D]QgmD
%mM(XNoIXKmosc1AT-*I&jD*#+/Fr+:Uo:0`[/*n^HZQ`3Sif(q<A2,"G-hKumMFQOqd8pZIf=9shsH#kX%sH0EpK^9^7'Ni[dCpe
%a[)XO[Gf.G>0&gcUlYH?OM/MLT@!(HKflg*`)P%-L2.\HKi<0bTiK#`4(t=m5IM9C[;spcAMfNO"rBtYYnr#,)iiRJ/dT`/_*gO2
%2DC7<J3cj4c3P0ukT&?cBsq[mR\QKI#kY?$l!lt8SFS4&:`?^#h\%,/,AN+]#b<)Kj(eHk8;&cCBt2A^*1Mb:]4:Z+RMgODJ7\SE
%+U0+'U<*]R,#sdM:C+/f,>An*]cR7Ub9Rt:4&#.`Z:+afmm=\*WmO<cBg]iaKkt/[_[s"B?MYsL@Pa0R:B[hr5ljEG6s*s^j'd&s
%;d!3L,ib(P9LH+%-0KNA"=G:NV/Q63%<rO8?qbGNXPJkhQT??GS09Ag*J/MKRLp^C&f[0N8b8f*G79;46:4^B&O9NSPOB!fL4ig1
%UULn+ie\r7::L?kH-.`3d4r<J/-p5Qq3u1(bkX1l3^VS832`%B(D(Q"B_D03kPWS_L:a@`2mCO*b5MR+`E;6,Lo'i\A]MLJSj2)d
%<_i(a(#QZN(AP=tqlpt_(+JmR;=T)`d$QbJTE`("=tFqtD+J>HjS2)u#p4R8R;SGI*tDRH]=Is3Z@jJqCQq#u104"W@MUoR.sg0n
%e*hU1RG<MbS2SZ!4(mB%H?&=kF#Ec1c/#^->!^GRqC"t^`!Q_kcbDQ^q:l9F2DXQt-YNTr.Rn&B>[nA%\QsN0lBn38T,+$-++G:h
%JR^h>I,MY^q[-hH$/=d2S,LX;hj-"U+jY]is-*skMsU5g@XMKJ+\.Vti,#:dqQp3r:jLSOgT6uoKTNe?4YMD,NSXOm5$Jqn.`!n1
%Cafur6r##en!mmsnEoU3^A<h-DHH*R<tP3l<e2g6?VU.!gdL?aU9I3Y\7`4qd8VO@EjiqZ4S[s@E3NQVg3E6hXRJj:r<`S\n\b:t
%gACe[Fna"DjB%LDM,`R@Ud+07feV9g3$1ne&IVuHm2f:G%Ya7B)3$p;.d)&\/&XU!K9Kq*9K]'A+IO1e5dbP.(O89F]]O[VfX2+a
%n')2Mm7!nVIJp*ohH+nBIHo!aUne`XKtk>O<*lcqK@P,Qlqt;A<0>U3F:#B0@UF:"gl0Z7e,Ak5nNFA6k^@"mG23Kn?t]H;k"!TG
%*Bqf_3nXUOhUc,W69t#<MY$,pfc.EiW#U0saaE]2@c$`0:R&a5Q`V["mOq>>%l_S!r:QsL>ALkJ(DhXMIEhm5ZS->X7r&\2T2[#r
%h8629QeW$sE[U]-//Td>ja'WeTCNU$rZS;"?rAspoj>D>%%pqHQ+3*-[J'6PpH;X;gt^Y5nbt/:R+HPFP92l!qrMb3RjW']p\KnE
%Hlsau=m[pc"g:7"TM9cZh<>NLm8m\)@@8bib]2Jg?F85*^$XD^Za$5C1MV-C/%q-bcM;8E4fkkf;qt/q)M%Eq,IH#"V%0T)e_FbJ
%Ph`3GfCM7ej0PR]@kCQ2*3[Hkj3E:oV='sM<9"f@W5_med-dZmg9t3>5-VHNpR`N<:77gp&=`DJVT-0aMeaLcnn+4QmhN.+jc-sU
%Qeu[IT68HJ\rFA(-@uM@[(\K"L!=hrHN?\[qO?+9Q`is.NeD;bn3i_o[ndG)r%(o6hF4o>#Y/4d\`9:T!Q]]C.BYhrQ'_r;U^mWd
%hnSpAg=prN]t.KpG'UL)p!/Om-1&*3na/uN6_bIT=b"bidH!$30"WU6ONr&C^r$];"i#2-821=`GGsE:2HG'BIWRMPhgA?a49s4,
%oR?<sBm_O4c3m_s0!7-oHB,8nHn:RYC6/4c-s=g->.F\"C>Um1RkNYYkD+D_O7pR9pcGO'm1$\jS=FJGhPu%0._t_dO-)B+W(6W\
%-^u5;LQ<Tpq=NCSfY65/?^:#-Y61]+md,@O>4SFAOC(/k\nkY`eRrgOAK.ikj0\FTh`'?@VZ!I^48&16J44O4/f0(f\WNrCPmRfA
%bm1tpFo6],]4J$qaN8nL)sD$?YF:MBp7a0DjmqO-_(Hff$B"f@TptfPNH8Fqe6L80B.7ZqHZa8mpf3<@(,n,RZ:);D:J1(>K(9V9
%SC@)Cmt1[^YEQ.R3U5sJ\LS_Nb2;UL?fp6.%DtXVp`":P>5D>\.%QsjoXCn`_#5q\mXR)j?Fd,_T,u_45.Or:+A5196/5f9m2,Mf
%9&]'lBAM?XAb-HY<?F_0M/X#=X8#DR]oP79m]TlgOREl:2a=[4@C^p53e),Kbe:O\i!_;Eqc*LaX]qO*jWI.h]>_tKj&K2nlY'#i
%ka\80\<@JlV[)1nLU*j)A`HUSjP]'r&Q82dSsspf6gV=,JCQrpY^UJCAOZ^(IH)$f*Rd3cZLtE33hVm>7Wq)4i*e82BVVh]*enNn
%Vk(SJHF()egVRg%>cj\^(c$l=]6W%WT$uTSIJrNS-iII'>\3i"Qt8/PM3b\4GR<V+Yo-V.^=PdQp`'[;J?Ya'K+-al*R1jc>'F;a
%O5?LNSJUbFEbs8R04'qPjgr-sf^Sso<l*uAhcrV$=IA13f4uV.ZJjYq0Y_BVS)4Pfqg#;_q7+"F++A(q\5'/GQYNII6A$J4)hM9I
%o:)?Z04+!]MAVAe3nnV3C1YrOE_c'->^a3kNo5;K5B37M*+*CtK`eNe115uS-]`d=T23k=Ad^7%mUDlj:QotQHRJ:<4f*K+N,Mt4
%G93rgOQX?t5rJfSd_:;s5.+kkC6)F<M$2<j2noLM?[F;O>Bl;@g[=>mh6F.J]tEMD:6*WTQ'Mo'k,j-@Vr^,+O]'?c#i8!i(Ms:9
%k1RG\"4(V,3ucjC_jA2G&,*9Lr!@Za[6\B9GN7nf\_"gNcK/]G.;D)\Pg9+1@KL64`r"0,S/pbEUWWDZ3Rii1bEuDHE15D!O5m4i
%30bfS&!Ol8$4teU5LL#Cnr"6qZi*\s/,Pqj&=T(pXE4-_r<smSGG!k.g?PINRdV73ZH(QY1#^sMlV7-DUNI'oOhLmb`a4Yu/@U&>
%oLA9/n`R+9\Ai;!:RSi.IQ,F@#:1tib$3tb]D?!oNcUXWp=6'fpdNFf]51J86HT#YX'GV+odpqEm6,65&(NK,2mge5D9"HA?QGau
%B>)o5d(pRd_Eklh!C)mN",Ji&IQ^l>7n3a'><>sNarclZmg\H*&850hF0eiYCd-U@d-pnKgWr=WlbVC^II0>EB8;WcMb0MSHjB#@
%`m+VWbna6n!F4$g<%`]`cQ7RkE;\X*kbQ=fIVV/qk<A+;r1)We5q3!DGq=*90(i3Pb\=LfbC082Z<'"6^ZlT+YHGIHT6_W'St)6N
%Vhh>)I;j-Q=Sb$qY7?D)%u1=t1;[nc/#2a=40K]4JBodse[TUJhWlWr+8:!Ue0;[4_NrXGf#o_54nn7Y<_#a1_S,aUEIiGqk@39J
%2-s*g7Ci4"^>ds`U%4k!O*=rQT=>]Flt1:+lBh/oi(3%9\b0P$%!RreqK\i!C1n/(kanP6I+YgV[kBW[CVS?;EsN?@*I.&H3fi.R
%/\H?-q0Ts8q/SE'R`GcKlJT*$/[-Lm2YkqcnUn3dENBW&f<],X7JHD.]D'Z::[[FddMHV6K"U%F]_1.$[06r@n*bb1c9E$sc^hP!
%/)rq'c]WuO/?iKTit`t7ZDC+Y^s`h(Q'oDd\F\O!:A.jq8"EsB=\[uT]5!rR8pTm&n@6&413^+"?i3_\.#'$Bl>d*?J**K/nf2Ei
%HP`_0qddMGd7ulmk?jiu\qQ_CgRGAh%!f?[E#[(7Ggu=T\XVuW%2lVH9mHo^m]:V=NXg[Ib:"`dFZ3qqEq,YoZ+O)HMO@5miV]:C
%Zm=OEkHoO0Q1'0OF;%HOOj(@k4,:fJcac+kQIVan0$t'>nY[iLD>3qfkCq*'r[Ff%m^)ld(TjlO0LI]962cm2ZEj6.bk[!?O1/IZ
%HO9f$;_ZiW^?5d!Yb]EJX`dRAG51Beng:=%lZID??%qYAe`hD=q43BUa$FfbWVk$8MF/H%>raaNqBc_7USPF25$TrPQ0.6e.PqSd
%HqVYTZ`pHW^>I,B^,Rc04L-.C^`s!nMl#:d0@oYLmG-:DT5V=XlYj6.YmDd=0/i]4H#fX_q5\<*+mu%.$)#0B>(#4AId_+4Oce\@
%kN_qkM666f'Por,hAes080lrn+>uE(+7?>Bcg"rq"<#_Dqq8jX[<kAjl!!h1Z#mN_VIKpNfi-R/^\\#AIt<1+:815Wg"b?]ZI*a=
%oB$3eVI`<:2`Ejsl1f-!SX;iMFgh%Q5JPL3NIu;[nG2?*_n*WdD/V4t%8=f6)&0?e"#q[&e=uhJs0*4YFirQd@)([uH1d&eDnQ+c
%MK^t!S(EY*GMg,\gBM&XiLRW%C;,#Wj$V=c[E#-4"m,_QK3Z-1-i[;&PbEOBP(D5OqcI`A;76GYrA2(jPi:/bR:Ef2Um!7SD(:`N
%Re>PDm&UfU+N?8*q!H09;oK54Y!s5_LpMMS7uaD0f7/?[I#9'p7.Cguhj'Q\Y7]Wpih,#,X4k(_Fh67(ZPQrf'O2]+d(%3Uc]jBu
%1A8rhi?.`-h.j"Q4+10GD\#u6p;8Y6^M1!*^P[Wqr#,BC'fshpI\oT"^M8CN9fo+*/&Mbt4rDpuGkpMEX405+50=j'L_9^7YWGUp
%4t$DB7.1NI/PoG"T_n'EQ=gKe"oaMkrLhHJ^CU[K2<IDT;ZGkhhX-YIq-1n"o^5OLGppB8hZVh:7Ujj(Yj,5t[Xd@CYAoj&d7e@@
%"S"Xep0.IHehaL,Y5.J[cY3e]FjTpBeZ.`F8]&TY[dq[d_f+Sc+'Vs,S0iD0j1aAgA%.)Y4SL;]fa5A(Za9XHS;'@NlBSE`cIS<X
%%p)VG[0ledWs$cQ(JFFD5%mpc/eP:5*aX%TE9i+\+=X9UMR2`C,,3m#2Qbl6p@lSa55D5thIY_j32C24I$?NdBV,aI;d*NU8*F,a
%2Z$J@`+s_mcA8Zf`hl9+Q)quIgYh]3=c=6nj&r6g1)&PY\uo6Q][:Rhd;4'&Ens^!1P=#4OYtQE2/CsnDhBQCbN'X[NNPPhc;eQ-
%ZauiM1bG/)_0[$-_5s`8_.)%&UJsmqTi'.)L..)SF,mS#X(k[8'h*uZhIS>&Pec@P2A>g2$OuKr8QE'd`N1OUTU>o`bGn$^'nQVf
%#V:m&n2!eScS\'tC1duN8F`dU77\`&*/i;NK9<0B/%<;DbLFWn!2d17D-GLE'eNgPALYDHAcd`elW<%a>K4>To+*phqC(t'XcQ<:
%"bFAp8;?WV=]I1u'?-3h\ggf?kS/.S@#"G1ZXKk:9@GFY>rAoA`e6gSX_HH+Cp=D>)Dp",e6qQ8FFeS99O<\,%+>oSkm!.M?8G$W
%0S9RETL"<%/W'l;9/mKsKk3/9i/Fhu3/!b-YRGDGK?an9*etSbL+-9E19m/Mg'Cl8/^1#YFFZX(`CpWEbQO^u>pV`N)j&S^#XDb%
%[>_7j=drR*k_9IRMkXq8^ptZ0R0]*QN<TVg@uIKnS6C#eM\];K`(V)%YN.sn-Fbo-en!,:-u,K(!R@!Ki]s(m'P;m:=?p)XW[%ga
%!8n&O\:C8D.pLIrC,&Fg(IU.i*6<\%TQYV&=I9^>9uIH3#kOND[b/r9g6k7hkJo%jd+5KZVP[D$/C9:?Tg7=>"4/HjEAZ$9.`+7+
%)q+k3OI7)M/<WP3-O_66l6,0g3s-`BK?.kDbT+I`T`Qqs1dbiT:BCc3FJpGq$N-Pp%+1VQ96Te2VPH8'M9Z1ZQo_c0"jE*_Cf$L2
%J1M)&X'$!YNSG)$L+.r(5et1-@3`6Pp&J[$=X8@*!Ch'^lj\d7TGS3+p-GMl<1KZY"^nBi':T`V;5&QL(?mK^C^ub5=1#'3Bf`Ap
%imK,-:ud<"^U@*KOAentT,ENT)5L!kQa5q"MR3ZG*>C,*Ftk0qMLMf1Z9u:N:2l\n,JST]/126-G`G`e6V!J[@?^gKXJ+mWMal!/
%M]-^JW?8Pc\gBi$YgBI<$d`1dE8)^G6(=`B[=Mn^'1eC"$!-:;9a%OQFA=EFWX7Wl.]Nq&rYZXJ!mXuH7L"hq6a=VG,SXHV"1V,V
%$0KN4L$!u67\L"WYM)lG'h,RXHKak.J.pYPA4a`D!sQAG@7+N+A(:cl<'a]tW<t(Q_1^3$n.JtBNM&K?FYb]o`"iHM4D`E\2@?*R
%!,3P]-I!(Z.k4.GFQ48D9qYh$0HLu4@$XVT0PkK[,4IpTW!6Z[;GcCO;_849#:pk91O;$"#[ir-_$g$=<G\@_>d:4HQW=T4Eb:F+
%PDkb5To?g;YE.l`.hYA!=0=@=+VGLN`=Sm`lkigsO^&rlKg'c".TSp4Da6RCMXd@H%k,Ahf)/^7hqC;V3$BX4$?YJb%0/q`+hWA@
%$,CCH[7FO[*PLTSW>cDo5li#ZkJPeX:h>Ap(;t!s+`+orOUG3,<C3?6&ITJlA-i:0=qV1AkgTmp7"H0sH*#XlZuB6S14uBjj;r3Z
%X]r:?m?bEindn%e88qEK+M_R\###6=17s/DJne1eXPlBkKArY[fcl[`_fS8TZWoq=cn#_5>m,?U.^p"*`"p?X?a']5$5`sLKsk^2
%B1!8;?Y@/:TY-:Y"n#bVAcW]A83%?C-J2Z/`@DcW)^0]l/V5Q8Xrd^s/XE6Q>4TRm&@if`0;`]KK`L$a;i+D63J^oRi`Go1cIG7M
%=]@sH0KC2;Q"_A"*$[+:a"R_7.\Mu;,F)-3_q)_9/(bpYkcNMTWhNQmFo5,q=VRcBPD1]jKOYl&D5`7?&B7,5!'qM=/S('*1pA.!
%1/Yi>Q9:27AV_-Z@a_=8\kJ)%.1.kF.-+G:QnjW;$r'002=R/kDFF#aDMhKQ$DlKfdOg(^[Sf@,c#>(iOc;7I[M7f_9LVea_1As6
%Eq(D)&/34U5E:U*#(jo2%#qLp=D0,)-HV=]'Ek)4X\id<Us24bVHK4aOD$>3)5nq@kg7-q=?I/6+p4l9/CYZt7SG(X6Af1i,&OS%
%$[a!\@7H5E#mP&^,'2:.98#`=VmqE_B]uJ3YZYB0T`lYS#`>Id!s-uP&\teBpgI$X"]MBEP0m+bZ,K2Q+Tid>d;2'!At*=*+o&LF
%`Prl!>>1&kQN`2>[cN,e$T'2H4;<c/Yt8FC6&Y!=67EUNHVBe\3TgSmi\C3OV6DA-$a>;+Jl0W@Ur36J"-0?-3,%B6arlUToS0-2
%&gpYJ'D!d6'(HEVb@(R>I['+A),DH+-lWWV'/Y=0@tI1g-YTb!1jea.:h2.Km5<E`\O5hc"Oj=ebA7'Y!"Pkb_>(`&\I-?UQt/XI
%oOAK]8[gN3?AblK,##3T94riO+MK>6=_QH0P2Upb6f>#+`W]R(fkOt=+^:@/M@+ZGlEZ!B)&Xn\!s=:#=c0pf14C-0l"6#"in%AH
%<DnG'4?4D!5i"s^Jrl1M%A:h(U:6eXD9F[g"Bmja2\p[19W`h5#.XbVS44c',0g7?1mPkPGXNh:%-nP2[aDO'\/g9(>:38-1SD<u
%>O?>467@S]'A9O];%8<d`]#,G67U_lOVoEaO:3GgE@>$CNQ$ZOPKi*F@$>G@0jsQ>BbV-8A0tq7PIb=er2F(\<G=r(0ABCsM"G,3
%U*W-j^7Z[SZWn)B#h*/^"!G+?D-Z5.3rX@F[?uhf8_E5(0M?j31obk</@JBs,b1K11bFA)59el#()Ktg'hPF?2NmD[=$lu0'FYD$
%;7]Is:ba[3Vhe5q_0BW2`CUb-@*p?DbfCh/_aQ'kG8uJGKp%WJNj5k?Rtu2<;5WObMSR>QXHUYu-O;P.KdU?2W$ucd(]e?<Kd9!l
%GcMgE9b9D)(VqH>>Pb#/#R[l)(t@2IX*Q<`)^L<Fel^*NCthY'%,a/UKr]3k#k=uE@YE\@^gpBZ&.];UIYjOTTbg`QHrN\#"&B@X
%#+#"ZhdBn91fCCl\JHfE@e!7(TY?`5d=E8V`/0.g@+h>5%N8%tBsoa/@sXbe#ID<X`^h:cRWcO`@>iDE[Kr?:en9o&FCr:%"q!0A
%*9q;sOnEm2RT\"[<)r5lAuRb)=GaO*10@(5j':30V(XIAq7'j9$!!X38[/qK3@G+Gb6A?QkdU]G&I.C]+\f-65u#'hO=Z,0nW8!W
%BZ6\gn+S6_C++7W_UrBEfRPQ^f$>t1"l2^1D$(=p^.-nuN*ijdS[O)Q3?V05-h[^8;4EeHBJ9lY0#\%_h:d:oDW'q9O6Zq9BGIKg
%l&>mg)L^=n8n'04&9-23K2>E"1?OC<gmq9:Wl7(*[YWj$n/U)T>B6C1g*272BN^OU18]mheo]r/1,O"ZoiEE]9Os?O5(nbJA<NsM
%e[JYT$oni[!,Z6t;:[:[/h<&p6OQB9Z2(YcX]^KsT/'?Neo=cH-4\j=J6:IDosj0Q6YODP1gh6nJWEd/.$chP"L$oOs55VU2VaE)
%WM%0?-tQCL#O)YJ_O8XsMUlWEP=Yr]'+4S!$f$JNOPcgXAMD4[J_1aXlPsJ6U]"r_e?G(S=F*mtZ6KQAGf4b2+<_,fSS?lAVc]Rj
%\1^DL4>>[Fc"am9.T_nW)]Z2.&k[pM>dp#STpCJ-k3F^cY(OWB4<i%$.+6DuI4?_caWTC:U4Z/EDWVdLUWC`b^s7`uMX1o_m#b"+
%_LO$<'0IsQR_m-^p!5P\8<APfFRj^GfeZL8QYJ0JeC$aE0i?)@Rj]irg%2/6^X>LrO805>8DMM=7Lm@1$AVFcD3'ND_oVO:\u,H6
%F#:o<'1Dh'oQ/2KCUCH<bCJh!=sJ#T(D;!f_^nT=bfl<,?GM6@cEInF55"F;9=-X>9EA.IA%71@\0=]9e?RE@j"uiVlaYs["''>i
%%e<lB_Tbn%K*+gU>I]ECbGf5BNJ\oT5:BX:<turq#Nm6=#YCtKl#_@ac`<G%(oYUm3UY&TA/qS2p7Ka"g:Ell(1"tO@B9kd-8]E*
%%9cS&!u#0`0c?;1Ym?AfV[Z`/N$`GU(gq\"^_0OWgWn5b!n^sfZ#rapZ'.HYBN,X@Y\BMoB]N,Va"8L!>;-l29e/lDk^YY$#`N^)
%df=tm+B4=MBGMXYj8s<7bKC<%jYX36pu9L&`P;gjPhMV(D2C&j;+]NX,E/#D1YhU7LEm'q;&:ME,M4]=-:q"?_"n*"Vf@NDjeW(3
%B]FA:_\Q;`:]j]j%GXi8%+0YQ'A^gbGgr]<LDa&76A?Fk7a-ls4?=N'e8/kS'mYVP<\tR#e83o-du`"dRB`kFDVo2.iQg(&3_bej
%Dm418!5+r-LOt4Ojpr,e+`\hgJQ4$l-W7IJj!FjWRhBO3.cOnH_#c17RpnJ412K=^!)LI?&_=8X#b4K7aD$E%_,?MdYuT9rPVEp!
%GF0Y9(.8HieKS!l*!nj*7RfmQ<'4&hMc,M5iI:H-UT)ZcZ/HZu'iS[$=9ueWi/1)P<!eRNgBJ8&d)"4O+"4oS57H)[OC/htACHeq
%3]Ca(N/fTbaHFbfh"6m8lP#VrC`=(gI^r*D-ZU7eq<1-Q(#F`hbXU6(V[Gto\FU44`98bEJ]E]M-Q<jkg^FY$<!+!n'\$%`$j,E:
%AKTD>X+iU!*]4i?UII[R/:pRWGj#Ym'':Cp,,KA]mhkS:Rk(kLX!ji_8`I#5X:L3tq'b5K=$,ba1iOPc`p4C.ad.h.2FaR$*]5&T
%<*7A'FV==?C)jZ.FE12j8#l9U"W4TZ$2j?;OdMjlMV+RZp##t@V:.G_i(QRA#t8#,+B'XG-]pTg[KL"C8N2g)6eFRN)@6]g+_h4!
%H=1/ChF>QANJ-pi)[O)FCN;Nh!s;OE7gL$Kbnq,I8t4ZK]qC+Q60"iA&X@Lo]V6urh#KN,\h-^#RY'<cgd.\<e@!@-T`)^UgmTVq
%>8WNZNAqDX?m6!)#Ld92UQ&*&>&9I\D&KJp6spZT7MMhkB'?&HGf>E:RR'_]KT14+"WImQQ:SG4H=)SjDD@b#B]<'PM;8Ra0LDfY
%@Na,K(^Q5GO"e=9%5lNNb;)IO9bk'_%Ep+=),c!i\i@eXO*'pMC^3J4(Y"I9To4mH/;U!*kI,3E/R1D@Y0i7R[-0R'5RsZP]V)8D
%#R#"(i[$\km<Is,7n2Mq;p;&r&J/Vaiq,!C3ZD>f0AqdNE4!Tc.f]]/J4nA0et@o4;?2nql+rCU(^6@FCU-O<!'FpL`5t'q@\?#a
%DTW0<(J:DL6rtTCf#bp!C=FiSMM=G"(Ye>njNqA(@d?4.!1bV,,_]W0[&%3M:pC!83qa+Tf[B:XRO'lQ5pn5d46qJn('o'&ijeMj
%#Z>]U[KqY.4Pjb.7N2lV=9+jD\\R\i&do5YLi\mp?gp#Z;sbG!/;b#P/FF;W)7&2>K*lH+_&#"t7&D]V[,aMW\N:M$"sus.W4`ZR
%>09m/-&9u`S$]V9i+B*OWhFHk2L'@ad$h,<d1"Es0L68_$;T\>&.^":R7"Xq[WN<8d+<qSO"p]fVBT[^[c(peZ9"Mpf!OXm$9\]a
%V20X]_SF"p`9AJ&jWK8/")S6e)mYpD#4Wn*:Rc@K'Lt$'"gqGC@R_S%6"GdM>bgq;OQf+8A#T=`M%oSGfP'<"WeHa6BKF2/oGJUC
%]V#9J(86eL(SjkPSm`DhHFAB-VJLp^+S+YC;D^O]Iu:"q(3#u*T4ta<d6O3*dgU?'Uk1rQKAjpA\I+*(F>[k?#m>T[f;oh)B[nfr
%VNWS4C)Hi"1K8HP+omB!VD+-q7RKo2THtUfD+CNKWL$)DYTS)rk<UYX0co"sES>hOnh:W$Mg4%nf6O#<J^=])!K_,M[eqk+1%7e$
%)T4oD7</cQ\h9FN0S_KG"U&>p3_fj>%fj9X)l4""MT=!c6W=N%r3=n!=E$#HL`)#L79a-g4V44Za7(Aef.1MEOF_)M@2^8c]K2!M
%nqNa!Xu;HqacO_G9KSt84G/o`U=<#$:==0E$XqOFA>;bXTD7Gk>X8&n.>i6tn62LiEt*Z<l[r.oO@+tTn3S?HoZKLp@S'o52F`")
%L)'r0Xt<%)E6VKhl1<,41(8/W$UPE+14X<FQ"2.0(E)6J$Zs0>8.AG?Z+NB*=>fR^*<?K\iHfa7(%2Y%"-@'W[;^FS2Pd9"1pdE&
%Ar@YT1MTBI5QH[O;G@rO8MWYc7H]7K,HtE@fZ$=Fj"<E+$(1r86U)@./2Vm8cpO5?X*jF+:J>;m8[XXR1%E1k'OB6,Ml6*j$$>--
%&5R?ur`M>jQ"dibhN0*:1::XPN?p>$CGIU?:j=Nfa%O:s>f8Au"/QpT+s-F3-n9O0M#^>*Y$))B<r04k:9sAB1)MF$dR")J!,]rC
%L\]&,Qrqp;@qLGDacQ]N%1%D>Pjtt9JG+L5U+@ADot,H..8e7g5o&aG(F)VdNa*B0BjnZ4(C/ku>TgV"T*u&MFE'3"MBQ,'(J!c;
%C?'nR`^E?&qP9iY`]Gc."+,$[!99kFN*M-P-J_>E&im4q1$5\/E\Eslrm8ZP'8n^PX5N(\\fQW;^iJMVT<oVZ5j5I4&Bco;-jlN3
%;D^EpDk`[uk[uY5BT1W74;#cT62Mgl+5eG)S8)XI.!+.)B0I2Z(2VOkdVMjR,/jm-1uXuqn.Zm#WRPIQ#hm)q<*RDaO.k'mF9sj3
%eUrU;J^CIU.-^6$7;)30Lmj<KLHH%SUMt8rS=bMH6t^WkDJ'10O+>V4>]=%,*?DiD`A(U2YNM_9C>_Q&W%UR'+=L?,@)uR]K(.P5
%Ub?tn'J([^i][fr9b^%ed&Q&%!9e+Te7^iZg'^^gBJNBe%,$:MMVu&]T&QX75&(75BUH-Qh$:0@*1gaDFYtXNU>9?(jM8sX9Uk;u
%!0)ihWSnjEYkUjF"&(a4@;XVZR-EhdE*^]>kX6=e_6bd6933#d5q<T`$QKbSk?*[.MLn<TK6DM4/tED@l8-'_)4OU*(EhHT^Tp9A
%>l]r`V)ss,`)p$7l8GJ"J0m/l.Zk7)-HMu?>$&+f7j(*t.8k)97O&t*ZtYu/$(-Qq)BNd,GRY\2Me[2h%5hKtGctQLXeM'^[mV#C
%6:V+[Gsk`Ogf;7sa>MI$7MT9UEY/reL#c%b4pQ@iE^17t.0\eiK"Y]J7$F:LKp=?Ob=50,1bacV.<7=##o]@Qe4%&EUYA&$d/cX6
%_SVF$+HQpN74!aE:r?4sORu2Y31aHAB?G2oO[(]Z?0D;8PXm3nd7$b3\gu!]ROKB?*4'.s4V_D*#H]6^3iB$)%Rm.MQYKHo@b^Ir
%86B&lnHNlkKpPGq'N%qD$%n&9#2W:2f$_Aq"K`50O@Z(h"OdDTMQeZ\rQG[SPL,1Jb2_+%j<79?+b4IXe_M"]/I]:[&m+.*=0NP(
%TpX]Yq^QS_:.;dMa8%U*%gT1dq3]-R9*$jVLDV&IQ]q^G@L3&o`MG':K[*+j3aq3MNl_HJ2VmF`_=S:3'+DMWa%T`CpS^_Ha"TW>
%=$u81fVq,E-5!QQCbKp!1W/F6!M.(6e7P(K#c*ISg0mnH\OAk/W'ZtBp-Cu56o1_HD4qn3)+J#r'VTt`>AU)DSY]nK"k!DcC$%rS
%aHp']0QWaB#">T<aNW>-!5t?BTiFNUdr;@H<m\B'boB#!!OP.1ksAO</oeZR'mBm[S\]5:b^eJ"d!N>a$aa@aa#,U`<5KnYE>>\$
%0^2J]9+]T<KqWWD2%X<<^fd*s&0Y8F3K6Z>"G)@YboDU38W6Y,1+lPA@A9N7':g:#f?s0I\uMGp1M:.=9'`L%Oc:\U%8\edAj[;V
%%KeuC"iQ@@@D9O"iK\hu0).!FLoDg4L%n=YH4@ND:*;n4-kmas$l0#fb,KVJfFl2X&X=r\-OG&=0L6[3D^"OH)1e6\E$<JrB(;N+
%"W+6[&5!jBL!f!8<)&M+Mb\N[jYaj])1McY"nJAGZ`-EI&;,Znams.N;[$L-/ae(?,-Dhn/=p<039buHG4mc*.g"H#6-YDD3D;&Z
%'I&_QjLR%<)QlE,W1qY&9sk(Wj]EoD9nC\(l+C]9Utl-Z8A,l#P4)An_aT8<a,Gr\PebED;h[@mnQ[oFXm6!G$k%n[*6'8LU^SP8
%78nM%6^2?-W@3^`-6Tik9X+a.=Lp93nCTkU5Y\U@]ZCcV;cUe=>`KYYN$isI9tD+=[:*i:.pcA8El;f<7p*fC6JcN_OkaHXW<[1_
%FFa\Q8c^6'F)ha5d4/K#J`844*QgN7HmIcTA_!X?Z:*J8p-j_+$u:7C`.SE]QoRfU;>Vq_$hLIX22*4g$?VOcKFpq9)(9VA10J.0
%E3fbn!&dsaR5G*8aF[86mAPnu':0G23e;)R];sD[%)S!&`<bjmNKk>9CRdt37ESF>K[OC5Ml5u#>Ju.0h6PA2,.]9+$ciPZ+(?j+
%>Km_]2EGC0)2.cYfM8.P0ioYZ;No3)XiBZ1A1Q>GR+[XdR>,RAPUSN$2?ZFqH(`ZQY"N!#C5,;d7TX.@DHi"FBkc]<\s\rp>u1e@
%)0%DDp6Ym:1"b*fE,L)-Rh,IGkj,398_4LmS;os%^qk<R/g.f)p!jUX=6/];H4VZaEbrpbYn,^:72Tg01+6$i9j.N9G76=Fb//L%
%OdVkE-EpId=R12>+'Ts(38FlF(XXpGTH$?5QGO3FqN<%QJ<X.Fld95QWFh/;`AGY8i.ZM)'>6ZHV7WYcc<SSl"#n3</lY:ajD^$*
%#em,AkFG>'kgJ?Q&EShuGlj"1Jt+5pJt.)G0@U8d-Kmu$l8@fBDN(N)]4mm>Uh\8TCI*WW)jmO*R.##AN"4Z]#0#A\-:brm6'd0^
%=Ghp#%<7RQCgqr/'pf0a3@+\VmWOJ,NKf1cd"(i/Zj^@TF^:,WiO772"J3AsN#M-7":g3FCYDYUR8>g430q(\LoD<(N'["%#&%ij
%D.@'/$>Y7_Li.!`S6+*'@?\tG):+[po,1/lW0E/pD..B2XY=8G,I*8[mXen%]U](k6Ohio)D>"u&jmEi!_H%,a)ZsPCneNk<#Un:
%P9!$[rUk3Q7?.Pekuc33#>Ruq0AP^>KJ5-O`!OWPPb^Z#A^Z88(g)YO=`eqr*g@GM9n&:L&\,'5.[I>:baB>N7l*tA\p@'hH-IZh
%CuLYWdUlZ"LuD0/Duq86-!1q^@nQp'E@rN!@s(OSL,T5TK']\<-Jil@Of"1Samq>FMG8cPZ#HUt(e.qE2Gm/Pb)PgTUMC<mf*k=p
%,eSjYdBueVZ(GaOi*F6I<T%])a>=@;T:ZkTCW7,0j*6)AV#]#rKnhMS5!.2b;-7Pj0g%&KKOHY#>YM/k+DQd)l4>g?Ucs4Zrd&Ub
%,$r8'_Qnargp@2,GjVi2PF.a.]HCO5DV<GgbG`gM"WnimZNskgQ#L$=01ulhq>YC%h0*U-Y3WlI!rRh$&RZP;eT&A!ND-k`!GTVg
%1_'=RTFZsfJ4ch-Wb(h[GDn7gXM*1kZ1CkYk>WIJ$\FU#cX+)jba@!:@#G2XLEo<G&<'nPa=FBs7+@oD^QZPED^EN`/C&*UXuRaJ
%?mj@W@@(@/i58GHHRg:^If@oZf:4]Gdse:A_*m0@N=s/X!Zeq.d`eYNBL&hQ=^$72XS&GXLk.I&a$aJ-#XtlON:ikjL$)F@b[^#-
%&>hUWRuTLFB=L&5Ar=e'LJIQ5&mBO]o5-S*Z4D+nVNdl&Wt[*KNLTt?[3%W'?%.*oNm_SfS=j0BVBE9t[uIPXeXOa("f0TYId>aE
%1rgD%PdXR4@7hBa3X07M#?YjjPjgfO=<V5Kig>jC^T44ALH!l\f[S>]VpFQHroQ\$Qfi2K`^t&S?;&]4jho,flsTgKp0I_l1dZ^'
%PEVi,hkB2>qBJI5ReSj^.rZ`i%-*J/`-ENl&J]g+#1\XNl7-h!glnE[V"8-WSZ/Oi:V](SoT-J0V*cPa;LA?H4&g17kC2kr\Tb!"
%>9,0s+oZ_e[HabZ,pVUPo=+?)ie_?mj(Lp(NR3f\CP&on'&`$(9;uiUab0ub/#I$8-#"iFESD;;e^3Nt;li-3KB`ePgYoQse^[r2
%rN3(MUd9`0rjCL-D^Zu`0sRA\VGr*#q4o];LlA,6O9PFWESBXr[\^b@EO-DNY+4q&l.]97?ceT8ML&Zu^@s27lFj[/V66dHB3DtQ
%^ah0)2&K')s)][,6SW?>7%uVWKk<dhT-,'eqp]&W;W"/gVAgQ'l*c)B.dZR5hGr36KmbOs&/eCN(`V*DJsB`;EK]#_b,2_Rkp>F)
%cnO[2R3A],._(!A`\d5_Y&8T1#OgsCY-,K5FnN)OK59RJd+28Em3l._;LtH5Fd<@ZZ27D@ko2OWmbZl-2uSa%VQXQ'=ctHaoGOm\
%4%<5e7<%WJ8QYuiMa&QFapnW./-YFV&B#Q0;_i[s?9n8t]f4aSrsN$(T2aKMICDNaB9@GG?P*oZs3le44E\cig\r=0AhjsdFV^pL
%j4<re9,t5U6sT0sa_/:_$p@jK5NpXMlKh1M#m!LJ%p45:eg9buSc`l$mRUi2J68fUZ*]Kp5Hm5>7u7'Q89_CL"U.g\n/"V]7O`"[
%FXhphX:jtI+=$;AS^J?coV)T9Dn0$>q-aMBriS)Tc$+A>jf4beG#-R)`:Ia<B'[QCcLZ?Rr:-PKj8&;=D\(BE=@(?2.B$o>e(]Mu
%W1h?eH?=fV[AQt>DO"ud3X]'h[_'GZ@9l[FHFeV1i>"V<BF0'l('kQ!"B;]4[Ar9+aJS\\3p,ET;Bfj@)VY\Xo^<]E6\cAX>#sJj
%A;gfj"i/fd\;:&OS)htio3&!%8Y8E-'Jm2O-7&[:X7`nK?p#H$9=@oIe0mC:D=([L;Y@9_5EQqXNX[nYiE.a_l_I<"U6<Q$nB2qO
%/fV1j2lrh*;fBn(C(am$_-@<ia6!bAA$W_Zi5)QY^WQ/M_7I$H(9bFN_ML_.88U7l0T'9Lc"a>F(3@je"eKYWm&aj1HJ.tH9n]q<
%*4a:>pT[MI2*Y*G]9#7JhdaCVEAd<Dk@M8-guhu4W+s!*L3Z[:e8\\E[bc:j52I3Voq;<S-h5o\8-_sZfJfY'E\<RkZJo"W6'tr+
%[C@ac%]Qqg-9FDhe>WIj*oq/N@r;N3dU]WL,h<lCjmjbZJuRt!fa/gAdI.TdG#/<AS(a?6UMOYH?GAA`VrI@c&fPRF(f.0:/u6ZM
%.!r<\ZMWa&0Q\(,?QU)DS6"VF%YnJBH?VH[30e9ul-(p$_CRsPCfdAiR2g69G^>jr=b1spBH+XMj;eChkOVOh!V71^;-(MK_D=-0
%])b_?SLL1MZGpW%@c6E:#pZqlfrKtdl]Ot/>T%WeYrc`b4;%]@#1p&-`fpNNn;bmse^@cu$QTah$IR<qX:QBDP)MEf0J@e-8KN_4
%k!WZ9Kdcb7qSoI9,'[/p_[33EJ;*_g3$<0iI0)?4#L(1o;"IL^HU7AmlDfg'K0LjLMZ3gfQ3urB`JGQO*rl?X%HGTVZq+%R<\pD'
%I,KqO,U!^1Db=tW7[nGRs/]F+1[&!\=sd&U9^ZK1<.!mDHELq15feTZh^o+pWpNn1(+X%OcQU\,,aD'bip:>j-BMBRTrX'uE/lj;
%,D5#</ZOY5G[,VTQK\.((9`2d^@a0j@,t;o1JIek1'.l%[9KmI*>2_$7KE+HoZj7tKEL05aB*39a3k+)$u/M;]gF2k@5B#B')2G_
%%"PtT28r`Ck1!]o[`F+rgk5\uMX/3B,p5iIP94NO3q.]V/i"`F$1&?E!<fm(Trf<-!0dn?%Z)F?#:)KkUUrmG5s`AQMQ#H%,:"a)
%5J\]Q:kRrqgmkHSrtC,rSFAkHbs'VDg:(R1b9R=RL+"[:PPTM>WmI#s3GY@c_E,I'q7B\"O6tI'QT0G[!Q9o6`H/iq4E)kE)sZIZ
%A^6`XXg$)smB$2&W5u:l?"huV;V"Olh?[";9FjXS%IfY)YVeAZ_i9aV309XZ<j$KK27*V8b!9S?.==&tEB&OQ"i*gT?+&=4k7)ak
%a1si!Bt]44>Un*cT"W^o[o>8S*D#GW$P<Ym-GV!Rc2@'$";b/3;E9Oq$mnKe9u;Kh_%)^d(tZ<,mg8l8-[7K36LNdfY7`Pe-um&8
%K-UZ5P;>6L>'=ts*0=:M_]AQ(gZ4menFM";*^?/Or2813#^>?-Fd.hj)\'p9H#:>$]%I3W/OBAE06^gPTJ'FM!LC8Nl%C\kh?/'C
%+:Qm&"LlTX&eC-hoI8OE-bt9q&gS-`>`uo<J0=V9kn:N%'/h9)1/m(4.,tbk^pdpji_'JkoS&qGX/6I,",d2^fONS:c-=`Ug/)R2
%a:XAM;+e&.Tof<k!O1o)jt]C_PK2B&&V./S'"-5E`#FS#%S!Xl,(,NH5kB4<d^ph-V2Xldpi*4%->+#/HD(8i1r/_#cUsUg!0A>q
%BB:T4kV@K1L0ZFGBi<WJ%3R6ss3\M"C)Z:K!7Vo+!3ZrMAB+HPG*%;=]+!4Vgc9>hqI)7OQck;h+BW@Y"b1;8aA4UXc:_&Nq0M.o
%=82!\:>`c&T%+qf+GY1>$Jftm0[cQ.Ta050JdP$i]Wbhko^k[8\XoVu!@p)=*5_JA;:@lZb#]\i#4/&C7+2C:13R&h*YE/t^0[me
%TLX2F3`+50anHbcgjiQApK.F0i>>^Jcm6,u4P,4/Dq./m%VIG+"5N3)`Skm4Etu<N6OX_5<.#>OQC8NCm?jY=:(Nab'7gS3pEM4V
%!#TT98kq2;_9;/bRp"?X92"SS\"33L;GF;Xr+^%K,7)@M4YS1uJ/&9:nA#`lqQnaY-P^jRJh'iHeu&n8]@>#:m=!FO=(f=(cLR#S
%d/Y.Plo".dL)/uc!o([`lYp[=!eq&t1j\P'U-Y(aHhtDJ:YOc2KmY5aiDE`2o_DDPY>0lE$*l[,!g+/S#ui_t%nVDm-#[4j\d[&g
%S$ANbFBo(U.45bF!g(T5fOg?J/.q&QQp5T8:=@G5=^(`:IR\rFGr*Q"*m2BG*^3O8]\Qa!+)@uQG#ICJ$?eQ,9+kB#(s-nAIPK@$
%(9%EB(dS4%WaOYc"ra*iQO(D?l\*_$g`3n#/%A]QGTPt&`@I/Ud64#gq+=?b&dn("iVhlg<8>Yqmkki0o/.7Vp\k$OWPFLm8=_-f
%[:[fj,X>+l0Gl)k8aGEd8Lis+Z5rI4g%TD2oB0>lW2RL!l@Gl&%;MniAa3Q"rJbTm#QX.n6'Zi!9O6s1jtk86)D4nDE5]@k:rB@-
%+/P@=@12@,Q$V%TJ)bk>CKXIU?BpCAWfN#_!D.c]=_;U^"GM16?[5O)2+8/"JYNHd$'YMBMq<T"^_p?`0SY2_iXAY.b.I"4g?aM*
%YefRK4n-XBNlNLJiKBF+]6==ZO]N+:hYrAM.5`jl$:q1em+GN]p$l)kW`&qe>[_:TiL!drFgQ&q>S)_*9R?Ta)/qjOD#f[u#jW?F
%!@BOaC`lFqd+TglA9':PJ2;mT9HX*DpHinoY]O=1*thI;>i+L<bVcNaX&m;[B-NB'^CIUo&Zg9TEELGoNZIR#G[V%_#<@cR0>@12
%R6rZIPBn!GF@dB[HB;Ya9i92Nfj*=9G%NfUa<J4Paa6En(m_uN.B4IW+`]2:6K#"$K=JN7f]I>N+GgpngKl7Y+UCHB]e\!O9A`;^
%QQJ>*_T#deos@06E,GeaT!h_<m_Z-,ifc]OU^'fK<kNf.#<IA'ZZ]543nn,APCj\K/*FJ._dt?;E0%l#;EJ4"*6%T$lRPotN#r4!
%;IOrbACPZBg8p!m+)o_Inf".WHW))qbjF-,Abj<UqW_sl;VQ/aB)=$E=Lb:CEW<EYJ^[o.AAg;d?;22*GP*(n&73%sV<%]\k<d-I
%_Z^dK<$CWAC(sQIoqW,V?Uj^d'b2#:_):Qjre4mg#@Do3oA%6B?uceP3d8#6km7)@KS;^Zi-:EIE:IoCC:)RPb"kASL4!arMi\,e
%*GV=Dm0Hj$GEG=a523q]]]\n9<Xe+g>;c:)KSKH&@9"F'%2_#=9>4M8pn#uu6PWLef"FI#NC(;19rRgeCDAcG'f_1q]0"M)JXO!6
%GdIPr?bPoC[+Fp?a,M.[Dd3T5Y.1iLUKlRa^h4=8bF7L\*l:J=MS1J^O[+oH9i#r'I&0XI$663*.bp<7ile<!$aKb\Y:@R+,3p0@
%.M]aO":a.%<,e`:;"Pq7M4+^CkP]s!l<*nh4$g*)fh\o'?gt/jCNVP4/]SKb@t5G8nMjX8q('(O327MO>9F(ue9GQ?J1-,EVL'Ia
%C*Xn9])6=BSi1EPhsCJP_/q)Jko[of1X,lj!`jkp5Q%9M6UKR<Tae+>Pn=!sj3]]RUulNppV,5CaLgEd%hAAqhG50B`JcULd+r$4
%k70N-*"SbPgfcooQQhk9PT'XU'!j7T<$\5)HjKuen[`rjV/!AbGZHQh'PcHaH_fK*8GE`CF5@r\l&i48]@Y[A;7nl3G\6q!kQ@h$
%4]g0`ZDq+(1s_1''I&]QX8ru^5<N&#AEVYlO3:sZg<0(j#jB6H50b>n`=kk7g3)GL`GI+#R7U;@o/7Ob("iaq6Ob$X@oEs$*5!4N
%)50"g)k$LSOuC1fmpr<UlM`hP05%^Dc$L\@6)qii*?LPc[XI'n7!KQCC:mSqVb<!S9^>GB)G+S_M;/",\``-k6V#&Q+*J,4"/uYr
%r.IZo]m-B-8-o4WjrcK%/gN-Mdpe'VkM*BYV.GiPKf:]"p0sr*#B>U$")biti_po-_mZ<OO8.puS2m93SeeCLYV][SCug:$d'I&b
%ZX%1%*Uo9Y<as@g#Aa[)!8h".iP9N<P(`&9Y,krb?D@P.YI0/4;3cJB6>Bo_]JP/tDD1Kboo0b*^uQ0P$S!Y/q-)]u!)ZHaD>3ab
%/0a]@^!RLMSU8#3fJ4M%kE!CEW#3Ub4&/Z"`b<2"&jMSGLm50N6Gm.?>OqarK3.f:$bTXNb@Q=T<a?d<qPVk<\+^j]Jl@PbHCWfQ
%>K+[j$iHj@%V;U_(uIRlh<"2.b?$.^iGu\</QlJD#@X)@$PH@l\.@;\+IYR,$l78l1cdObh[,oS8I@9JEc&98JF3'.0A).j>m</(
%3IrZ\Zi^#6Cf%!ie[503G')G/VfT[Dj`lC@rHRf7^uLKPgl%%d!"ojZm^WWJ7NndjH]t/SAo,g(72QH83h_l;4;a,'i&hL=liFDO
%MFt^EJHt4Ho,BH(GrU<!*27HF<0jZ^0a;Yl`tHO(iRh8l)i2_u`A(rds0REMDsXm&&BIi24[>@PO@3&nE(%rF8CiBX;66]_Uk\Jm
%NE&-Bf*o1g4^JN^GPc0`^Zem,T!3QKH].J34DqiK0f5-`A"Qfoc5p"["kE=L]9pJjbB!am`/XY&]PQ-W52;')o#]<IV*>hsp-N-n
%P"9(hrj99"jsU]EJN=c=a"/)I$Rb3slf:ei$_F^0F+p/m*VF[*mj($R$:72X0IjkihUn&0@9W_Wq`O;UAr)-!S_$>)!\&&/;M1Nq
%j*hT5M\,4_.bpN!"q-V`]M?+g*V?/1M(+eIA+T(0DiEk"jNep_NTX+mY+!<Dd)\b#3TCcjY(+q''i"JFe1nqV[ts1W03gCLecC[<
%^.MBIFN;:tdY]G>^b#k0A1\a_;"pVTW<,iKg-#N4=W.U_]<j>L*3e,BX6/rlqEb?+$a9m^#L6&J)ERtRZf%mYa>T;s=E,dh%;#=F
%6X;R_"ej$G@,?a`Nd?+Ml,(VPD;k3b;IE'JL\!lEDg*AccgeeJfL+APfkIh&Xh*M5/pfcp:f09'ZtRh%fVfkbHKl]ML1hu0c&C.W
%oG"r_oRlKF(".)4R6'OWZo,7sgBM=K->V5g#+K#0%<aM]#3]#pqo?,S)X-VA`4jt1%@!n5UA]sn.Z?Mc4+_bW0^\Np&baFO#PY)K
%jZ)QKPc5tqAfYHN%/APX-S1p!Of.6@,>aQRik1b'#"eNPNg9jXh^AJnW2*O_Zi6@VYp`,>4+X6KQIY4oPTmi9Md<F-6rl=mB5g\"
%al6c>(R.5J8\?p?Gn@U<FCg`BkG91n+]&OBFu4n&RNAKDfI@VI]9?lok"MV#Sr=FZbUT]shB1ui5V0i@Qq'3sCMe!KI-/Ua7SYkf
%Q(LcOOm0Fmd,&iQm9J86cs50(G0cV#Xt/KA/-apWYM_hZr4qR2,%ff2KPkKI79_gaYHT>]9p2(A$;TBlT(D>QCsR`\%,ITPhS4g,
%3d,F''uor5Rpc!Di4n4$g.!Gb*oq/@nT0#nqgkn(i;7CQ.O(s>2e*$,"+9$E?;ZNJlJ@sUds3N,@l^<,.Nb`p]L*2!A9o&%,Wb].
%7I7TIIhH6CI#r3Ej2:Is3s7NHm:t+34!sFjQH/cbrUp=@0\tgg-B6TTGM1/R\7kl7jM;%rZfZ;l@1OhkYWMIaC*;/u4k0tiVe(>X
%iT,mhlC=lQ;!,(?'\dk&);:SJ/*\'9*g[UEK52D8jD0.&SbW85M8YCa1K#]$R<q;58hT8OP\i<U!HIbJCkAG2j-@^ib5:Ibeh41%
%(oQ6Fe&A<ZI@b!dai2uQ^*c;2hW"e0\u]uKeLV+^4N]S6HP;crr`Mm4b36c25W[*5c_mT5@uLCdXoRrD7R3YBm<L9%%k%(/m_>*)
%DfHB7GAYugAcFb<PMkueSc*X9G%O3O0*Qb[&(4_eQEV`aOrK1hSB>mS>'fIE&p?_&k<PX+?mK=b2E\F=@t5NbAGhn3D56\T"1!H;
%+dg>B4fB)l"@<.#f@mZUYt<mZduU&D0Ic7YG)lt1\"g@>]he\LHLAC(a4%rQ$8&-UY70btah&.1>)q'nrq:gaYOV(1pZFd@rqZFU
%4T+Fs^]229J,e\]*FJ^4G8?eL5Q:+is7GVaNHZ;l3Oth*5(SP*!NH#bZYog#=AOX9%f,)8T>nJ60^.NapV6[NSqC'2]tQFolt?cF
%^V,'arJ0h/9V_9i^YRI;!(S+uR:EG1M<Rncf6'uSmi4cORZ:Cq#_WO'ZbKU0V9&c=b@n_=+Ke*9*C-ef*3+!d&+p\iCsf9r<02E?
%_D1QeNNrSDm\(Ra\cYkGSm]KR;tR$O')Z>@6fc_lr;g'(Ta7lm]?Y:\-n;BT+')0Q$<XO:dVug[C&&4#6dt7*<7"sY4a0N)GeJar
%8/'Ojk9@q&%,X:9;W`&,e+X'6anR$JVT=K-d(:6947FKdn3m!U-qnk;""!jX*+!+mJnM;EEQOt3Bq0;Wjjrh0_93ao<&t%XQrFb[
%\oi?sb&JffV8-`CnaO-nc:f/n!"A3?3.S$cp`L%89INg.$IAo)9+m-\-l!>PPIX>nRFDLP[ucBWdX2SHOcJ,LMenJ>j4]F@U[8/%
%SAE+fgrq`5@69!<Z&,?$MEYg;LJQUt5@eYdO\+JVJH'Di&N88C5JCG1JEkY0!pcm_giXsB%XSV2+N`CL@*k)I^W96&3Ng3H.8#=_
%FLJ_R]c?r\mAB*Rl/fpM\,?m(7,46p;hGg.He9.`Z^AWH-[RJ'`QD>dYiSJ^Xk36_et.D?1p/f15`'ZGbbKA0XQZ%l.0mX2OX@rP
%kEmKqbcO&t2Sc:3Uc]fGAd2Z>[.Jt,3@Un\)I)O>ZXR1<c^T5]][C1S6DN"LeHM13S/1*J1taI1P8`JD3\b7#FhaBkhp!t:4?eZh
%>`\T(>0_3`aqV$[_JZc_<n4Ta?"i+7C3lT"(Ku<:4=ng@eS4X7Z*^'/Mc9%#4eLU<f8r09Y$k3Fef7hML2`ebV]VoGdH!%+crDnH
%R6&DF/tQ%W`hf#S#e(O77\;8u*iafCI--!O@tlXU\etEgkQUEdR_u;;)7mViT9f5"HElW;/#E(`^VSXt+S*p,D>V#TrL9g(mg3Ps
%[jor>[I&d4PqPqJ;ZX!dVH$t2TkK2X*N@Wf:a*af%S2QaVTpb8*0j'i3WgOO$s'r,E;4';9C<SKF;7;+3K*^F@AuSY0tJ):YsoU"
%:aVOF1*e#-H"=GDCZ7<ep-TJbb1Rm"=-mN8GoA:=%#[iK&R;b,>s+gV.&qGk78oe#?3lq#BMhXBlbZ4&b%Wr`9#?A&VnNFen-KXp
%@o2'6JFF5uQH8W>k4-N.)s1BnQ7-5q)WhaS75L0"%Y!ugMM,=r`K2#_,SFG@osKE`S3u>fhr;HbOf>;RPN@8!Hs7s+OrNXd\)6.P
%617SDi[5+$[UE@B^c$\6k,bj\85@)aNSGSDQ&Kn5cTauG]>@6#Id9u!ID5*LWbC2WRoDfVD="aq@.'KIY).V$R`H_jF)0T<Bqg>3
%m4YW!!6;61^GW,Ub>N0?pp2f%2"cHtE9:VbKbopkOH:gq9'm)l<MK<DkPMujMeX1(e[NW6G1T0,?1`"!U=f#g%<JA(1@Q$nZnA@,
%3G0oJ$5[00>ACIMP1pQNf2)?CK03Cj^KH^:SYaX(Q:$ttBmJUfFO;e"S@dNEG?o=B7:/b*!@7V<\gW:1'm*;<fooD?QDQ!SkSMk$
%CrgEiRUnL9235HR:t>t`:gDP''f>X@/gWX#qnB.i!%%'I:$0L.0"UACDc7H`<5$";(\nu`3%6Fgros]#Lq9TVLa@W]>XRgfkenj6
%alSJ%&kH.Y95-\]]/<0HjNM[,h=id4Pl,J0^Vu`,>o2=>dC6*5&rL8XTSjH*hS2&*(KetGFaO>.E'I!!=W@OGj81B/7e*]n0k@VU
%)Gims'9NjlBmJ=^1f;@LAUi<"G>3226sn+eb-s@5Y7sh7eC,477)-?OX-aIjD_I%[U__$UQ!Yk/(b3Ks<8A\>3t$pR!QEC#2`PdW
%OMH`1p!85G\d<0YX]K6mN!Z=)rW2t$.BtN^Z4jf3YcfR`8M\^Ke<N;?:iCg`C.m^XZC3J&BREFK-rn9r5Vdmm40K[NBIkVRdY:d6
%1kch>$Ub8miS@s;-;)WNo8OEq%jOXbpq,hAP(ll!ROMu_5(I<G]G/94<=bOG_k<Y2[\R'UfFp]a2QO\ge`n[$/=kFf*<99^!<nQ#
%1R]`1m&4Ji_3ibTY1^F8/]asE9`Z[S+X'JC@>,!.<>8H6oSbZ.,W+K8:mYJn!CVD;DF3Qe(%8ZS\6Ee9eCU1C+qdsJMcXU>b&PGD
%Jg`]\=qaV)f1$s*6'U`@6eFMf"e$r,\dPOeENgCf6B3el9i>FLc4I7`jg3Nl2.E;RWH&T0,;p9P<CoIL`<'m*fX2.rn$CSh9PbR?
%TW66bT#EV52H#'_=_r[+8LYL<aKE/sOLPjg]YBt#Ta<#Iq0N=_"04]7)Qjg6IQf;`+R)>ghLb\HoT>ZX(9L?G7I^FFRXDHlmgs[D
%Ldq"&TLGh:\jgU5hdW#jMd`l*(<^L$#a^Hl\Yp<;J%\?MS'm8'7o:o4&9:NCUbO#qZB^iAm`8Vi:Q!p>5Y2@;etG/Wf#W"p.*74T
%m*E8M2>sb[*u<2lX;iHZ=DBd;fM^BS<8p5e/l_1?&$P[!n=3FbIZ3?u%6M-?m"_*]`G0e&ZL+2ejF,SSk5ft]P[=sn@Q'P$[[c4?
%2/m'1XB3qtmB%/g6K9`EL%PJP4DCsZU\1n"4Q"G>i9IOOS>qLRpG>)VX&7b\jrZgZQ198<(6A_hpl1j[&7mt>]u;%pPD$^R>_6u(
%Z,I($.MO@hJ$=cF/R!**S4r:]"LMSEd,PG?[oK/oWS4VH`CF58US=0;!1dTn4]FYE`h>l%ee(KsW^Mu&;gA0\eSNGkVJ+<`c1A.V
%cP:s=HM9]H#>o."[1n[9R0Y2@dnbLPK>9!s&CI;;,"83Za%l>2^6>$V=TMtPrn49hCQ+g^C'0**+R0p1WN?%E!kYfXR$2$`$i7\q
%JeRLgfO^ec3:n87&SL'ShQ>f`Pr]re8P/Mt$!S,g2;,6O8ZbIlF40NM8h_!Ipc(^-7jSGHXLj3Mes[UMKbK"a25hF:g1Uf^eV=KD
%0C%-Y(.G20@4f=PGT=S'Q`<:\D\B)l>=cfW"sY8_I+B6\_/I-gJU%8*l<C\1g,5IP&SJ\_,:4ct0$]^t@fV]0PV-!e!/0i)S=\1N
%GZc%Ho#%ofUT?]!^k,:umRf$!m"oAW;_^a^40i9,4l7OXUnn5WDbc#_JmhTOf8RV'#S=?7fS$VH!cU')JIuuF>O(A;SS!/P(=nCU
%Z+A4RE4o6&C\hf)Y;aOa\nI)*3U4I>s-q%E,\C^k<26q54fW=G["OHdn;"oWCXRTmeb^2R'FbbpTj`p*]P5V6Xj%VrcTEh8VXPH%
%>M<kdjqc*YXYgp[FeOK?g:G,ub*$p5O\eH/@XVM3[E$8]Z?c-2%Iu^Sl9'[R)s<o$9ZW3]>>4R-+fn_gH"EN^hg19RPl9T0\8cUA
%cBuRBZokUZ-em29[lu&RVs33b4\a5B.atl]<r(peXU8,e0nHQr]%U:Bi,:TM?m\6^/qO0k:=K!sn/;s'RNQN!d6UA\.UuLDHrPV<
%6.FHJ'B(F_O`H/V%:P6$_fV];N_JeXJjj4EZ$SP[>*^Qq[D.o^?:u:,7gO5UL>]Um-p$<-_%3`/U+-k^7*<P4YAJk69K8AsY2ruf
%#fdfL*'UVPG=[H0ZqH/Ubhdl91>#(:-ilr4:gCnp!S]+9#.ai?^rWI"K5j^,2fM%7*phS3A"SL5fh`+?SLS-Z?[Z7L88(e5L2d6V
%5a*@K6%/+;@gXP<%X9f\&,hm&qD2c)Lk\LLC`<GoQ*1f7'*5J#?&F@`H+M)$YT"L?kKR9""FX%-1J'.3c_gt)\)Vr0LeAG..Ej!O
%[R!_^[65O81DBp*":%"L;YOp=*lh%'Gd</E^fuD%768"/lif'll,U_;Zc%&D-PC;6Wq[?6i+6bUg7,@bhF"mO@q&O9QK5)(0:24r
%>.J=/K67NIXmAc-G*!PN#7UndBi$<PKKa1"B-@:pW1.`KKTcV<f!fg<es<YS=9FJhZ<1%`Q+((obI+udn]S$HH^I]==:.#1c>16D
%6r=G;&e?M;PfQZA^=`Rh$!m9jn0`PdIEFtE!8*nWo@ClC_k\l$@Du3AW-Y]bl+l)hXh(ZXgd2\2:mktH]$S3-71D)_B^749W-j8n
%iIR97=Q+]H^2-WZHX"//TK3V>Z_Z2?]U4K9HnFLR4T"GUEaq8'=5@V:/lhi"3Nt\#<X6h-pfX4fkOWM8kcIY$`A+q`Cp3!aA$tOT
%D6!/JgJgGMBu2<u!lQkd#u@:@N7fn'PO`K]#Z`ncN!&4(D7LCd^LOQ^!"p]+d(s+sYAFIK/,+9T$A%5uQLhIP[;1X(Ulsu6i[AVH
%QK,@RUeC3t,lJ0J^#r[kdR'JAiQ-=RU&3i2kZLbY-f0^$QeK<O4sl3+`K^#45e(ED3#mR0O7mJS;SbqA;;(.J`PW9^e09QA_fQ0)
%'Co+AcCDc:bg")/DWW1'V-dqr'd9\KXCG>2dYlI:"$l;``%D^`c4H%IAjDSmTE2PEPdG2!mf`#e+>L-=/jCZqkXNf76BtVqD(#EP
%P!O-C-5TQe/:E`p5S%CQY86Cp35ZnsV+c]:DW,@nUi:?o7lYE`*3j=i2@R;bQ\:48jRLBIV:3"7@%d_j_ZSYRlO6Yp?<Pb,?cDXa
%@ckKBXTp6ShJN`o0`qlX7Z/kf9<bD8fEq0TNi94$:eTNR%&h*Dm+o3i6O%c9Y'_TDJ:M.K/*mLnZ#U(j\=)Fh37U!^d*:3#2eHtg
%c&9QF=uD6"F^B^d[CTVlkCp\-+XO`YY7:1mV%SW3RO%E@51Nrc`,[FF2(3u:_LZ,DAr*iLQTB<(&'7#9"#T&E9H8Ng<?QTX>nUbR
%YCl$&[LPAJ]7ij^lct3I?)ZbZap.@(Ed]VQ>j(RqZEV<74S+K/p%Yjs=Q^8Q^Z.0#M[<P3ggZ.B$Xp_XQ7HaUr"eU?WUd7=L%Y7]
%5%k_Pd>`3_H,)"l_:<hA3*;Nfn'qjF>W,X[\SWm"b)oQ`0kJY/D&>Uae<\1a2p6!E_Ggm5ZZ'Rp&Zg(A)$<ELk2rtCV$#tu.47+1
%-8Ud4B;rss6>pH[Hb`QaMJ[$VZ`ZH>/nb@+1(nU%E4ZH,')NDX0(%@<<4`:m2dSLf=-0(TP:2@jAF!(SFY7OXmCk'alBI5EU>A_H
%K/bZ$7\FUGZEPra+uKF3.48G[,c[sD!a=p,)O&gZ!UCqoCY!1Fa[1Ut_jQ=Z)0D^=gPBOF7:V'XdcMJB2SbDt.;`G0p-TgEd+J=A
%C1U&I/*@#6.uJeO`/U"c\%GsQ6PrF'@Pn+=dU6!SGr.j`K,-Xk$;tW\Bh1AOo]fI#5i+nVG9DQGJrf>:2Oqp&R]:BbmPWb0KpjR3
%Q,(<B'a@93E@5:kDlU0_*;!0?8;B0N`59O2.dE"D7ZAr2d/"M^i+6a*#gfh<_O!t'U,(EcObQc:g6P8@Ln"IID`IW=/nW<!e]=T0
%)E,bDYn5^58jXdu-7ha@UDU:CA=0)p,P[b7\";a$@T]h&lfGNVK^71">h4hP^YU6]IMU:H,Dib"%+q^2Z2]Jd[*)^^G\DgY;IHl$
%]@h7%.8LMX4@F$F^a-WbTUPE!;n\+Q#mWFG-FZt+8]ND>iEBeFFR)6qhbqu/DOl$T>7RZ5$fZnQjVu7:pp,&8md9PiK]$PIT-ZW0
%ok?V@o<t+Go.!ipQ,S&1Xh!QA4R)\5@B_dK(2(hU"M/_T/^C`RagXAU:C$.7=aQU&O4BqB\#AT<D,Da48$mbbE-+=FAV7<f`t)+3
%c>iK8fTXChl"oWoA7E-SDWRX!X>a6MMG9jh`S$3CC6/*bh:?Cd(N[)#\uq8!HQ/ih.L-W<!Mtj`**g$hEF.Be2^uM*)9^%R:;jnq
%0MtoM)_.Y:H#41`*Na8O/+]WRWh3_3&iL68(q5Tnb(j@]1dmC%9\AK(A\`sTl7.seKY?`r@fanY2JHhjN`,.gkA_Cu051$KRdCuJ
%2#_U!D4%S.%"l77)l"h&h&1CS7231dEbn[S+I24'WCg!'"%gbG[BcV=.#^&%WEIeng=[&Ddu%G<*%X'4*1/]q(KjSr1mSQ_^;kM*
%eqq`.;mnWa:.[H<]=.g;Q\8ugD$AQK#YL,%I[[!sbSL_-<NA]<o2`k+pG>CFF=]>d0>OH:p53qJ46Fg\Fhu(8g'pI>>l#oW=(d%7
%cJD\'%2!o0bqq"hq]XE8aRM(pns>`ec08HYo3sR.=3YH!?*1m710q'G`N$\X4`Zq<&FJ1f=lGB(-AaZu0SXPY;RIr5(SRY/.)o`&
%j.`a_6_Mj`h%Fl5S?(><2,8@lg2obO!,h&)Kq_eM_mS>`ldph'^87s$N,"#i:d:e!-hW1@qnlkdri@HsH2O83iI3Z2kLit_g1#A0
%Mr</q=feUo_HX1iPGV]W#Kqa0EPeg&U%NuE4P:M5hi39ZI%m4Xh9uN*>h2pT=R-;>i6;Lh>U*_Gk^L)gWn+^_LOVnPjs"p1aUjlD
%R%&iQB%%L]gE;Q&a]!;6djT`>/B$?bSsK+N1\?:#C!naVM4JUL'a)sR-gFARKdCblHjZEX%qLZ@=>knG;oP>_WYFIoK@Es`mmoH-
%A$fp37R?J/;h:a%l<qZ$88aD`O.9PODT=&M/Nm$6]eE.'S"SF_KmkUZnmC4#i;)Q^2fB^eB%HO\'Fe`&3d;<m`ZDrVAmb^4e/@#V
%L,b$!jpYW7"%$<$3ULGE#2RjeRZ#TMLY%.BlV%WYG\d*RGiq9fHJE/*&:d<u<dgLT#Vh&i&_d$#3#(3D_QfPg&e4f7H3&EmYUUiB
%d+h"[SO(Q*r,E[r/'QR6Xtg6>liuVGoo6d`1sGpU^>[(FEU=U^"UEb5_7(G`cA%$XEo-6omRt2s\_\:(?WXC$dpWnPL-%2q\Xs?7
%3>2qD^"PqGS_1(T;KbrC:FNPRp%1'G7/q`7Ah\U7IBqJ0OVFU*Y6ronOkWW<T^4n/.qVsS::Q`&.L;UI3E2&;R!#K.g1r$g[>Nj+
%#na@3X5`\2VpU!a/2adM,:;-AMGs5(?iR.MA,:V<MZ64>qQZN),,KQu4M3JKl#j5JWX549lj.d.F:nP&44ieL+qG\F#[B)ZmgY!a
%&a?RN)ZopATS*YGPQMq[Y^+Vu0s?%0h,5/28":5(k"Fbj5^"&(A*p8]m6r*,>Y<B_N&cId]:emcUg)MWlsAf)L*l16,5;9fg?af@
%9Z0YMSLVXn.W;YGNep5J7B@KL;C"nP&2=pJ'q^5ob=HIn44tGO'Mlq*i2]rSiO)?lXL5g\e'N@8(ro$/:npLcXX?n^=1@e?62gjA
%#YNr^[@?bb8\I4ZShSYS6u^;)5D+Kf-act$DMIlQ`pnbKV,,gXWi:PT6c*VTWff3#9!Q92kbu6$d2],l;9;lk!0:SU7S-E]L:SI2
%-%QecAGJZkTtlL-/SPrd&W\k/Bd't@D9*+F#i(LiN)47QLpq6F:mji_MXLXNg1]6Da5U[_STiE1363=jARKYeHNhV5*RT>\ddWLj
%O%lsu>%cLFMJBT)7`j9cW7S$b2,n2)PoADUH`%$L:f@2t=h[.!ZAc(ngM.B/@>roZ50'TV7`(m6GW<?!&/,V'!n'8I4YbM&73eF9
%?)nPS)3aJgYhl5[aGd,mVeL`l5`8%:X;!M8\A&,_3^8Gf/GL>P-&59D[4's=_[l.))$e%:JFDT&_Sj=D`8W(CE`ZuX31pO0WT5-B
%0_R9=o<u_$KD,Wp&:FRH_)s%sA6nqg@_h#oClETIn"*MB5uTn]b"'g8F_KDO`)C%p,MEEd!%1X2EK]O4:aEi@/fo96_UmSmEGi8^
%3c<GY!=pJT826<_lcqK0E#,-cY\ll^K9^9.56])$g58JBVLp1Ojp61qcdB%NL::iKegjG7hQ75U]j'PFmPBCYPYVA_WYSB1N/&:8
%Uqu88WJ1F_<I`XU.V'DeORLb)&fL=/h0E(cMaDI2.7dIn"#KiRL(uG%(NDa$T146*Rp+tDM6AL=:qZPpp&uF%SR+<[4]E;<)&:FV
%?t"L#Tq;Gk=A[2ZruV28UZK*#Cc/J]6Gl<W:.]eDoYJ2p)8""l,sqgS\&guU'q!73cHfVQb]Ue`c!iAD_M8,8;Y'FrWbV'ti3Nd)
%"6d;k/VI(_IGN)ALRR^@ft=k^NR`pi3'h9q.a,98c59S7,Q*1#)q;%NB0I38,PsmUrdf=S<.kC?6lf=7,I6;&>W(BLJ;+Bcpd$I+
%RVKah;?bj4=!s'T=csQAi7J'O>I;tU8D%WJVQRlq(7B"JElR-lf[=g:`7GbIm"+`i"o,\eal/;ge^T.+`iq.USu6#MGr/O)DFdB-
%3&a*?W(2UjIR>2K[%p4o[q$\$FS/YqN%Q4Z$OPE2B"5XPDm1sBSm(gV$85Ur&HV(cp&Y'TeeqX@#YJ9nr-I8!E?&d2"J"Cr6'<)-
%D+Fn5*<jB)s3s;ugYs3M`6[i'IGJ+Z**uNuc&UhFpcd&[_eXBNf?VT&L(5e.L>@er.pJ?qa#Zm[d2<aJkGO>sVZ`O%d+o/QNFH)l
%kl>CuL7M5DJI^3eT5):fa6O)U#XK'Xo%"@p*/g0.ZZf3r:GL0l2i<S"ijr6(_.fn2,F-\WZSQ2CEAX-,)Oe)s#!7"_l%nSf_6.q6
%*NYKGcn,\IjNS;sCb0@%[61<sLY8\Al>C?>;Be%:^el*X_RsTejK0^ISMB]jJ?i]'?hV4oH[l`KrIM-i(@N2gV@cqV0OCDp1CfLI
%A]2=-6mkSqG\iAcn[TR(%Xmg9a^_$o=](@87+kDV+!u6&[mf,Jb*WiXCPTj'Cs0uZ6d,=oY>q5USorZ0ZG!?"XZ5fR^(bdbp*0]p
%IYP:F9(S)K<IGJ=#Np#QGmp\"C3g-S`D856Qo?(];*f:ecUL/i@%UJ!h2niZq'Q;PL;Y7"6L+qhKb]k^PMV\/WK`MfLScTeSLZbn
%Z^?Lu0rc^b_g:-`b$fGC%bJSa0N?A+c%T[7g.8-D2MEhLlSUgE\qeWKVPer%Jm9,+-F<1'qYOT'^SR!tm*54CH3_Z27@(IUD>YR_
%#A*WuK\s]A).-?nN1Zp0fQRSB:_mYS+k2B<=(&o)%"pP%G-;DF.FEJ/YSD-KTag/rL<OXkrQhbN=rD^k&=p9C"e5sF;`Bb5Ud^DU
%W@.kpl4t[*$j8cDL[u=rAm,V^=mG;U7b\2D<g&=\RV,Q0.9I5@T1l>t8)b<XB*5SF;<<0RBRahX'YRY=W/ua62h[0j(Y08@Vf?.g
%?>DQb!kI\;N'[=i4d[*6aC(1OaA<IlND-LFeIDg@c%FQ/"<E$,eR/T;^P1!BDt3K*^:"*`$'a:A#PuiF):GCuBu:?@h%4Si5\MmW
%irQtu\labM+MuAEKRdSL/2@3ZI9)/H\3lg9E+@At-Qs-/W2%>o`K^1OQjpI;%oXPlhr85=$rN#S9j]]$2KV"Fp7MttCGV]V5X(7"
%l#RQWLF9_\!`N6%IYBC=<.q`2!`4VRC4]?M.epK+TgTfFlXibJ6XX0YQE]hK5H@Cf5:M]EfY#3$4KI<-"Y_*SF]#2<R;ulp-&*I#
%6_A4Q&Z*FH-KI6*bGHT:&Xq;P=E(4eq@"-.^E/2t9s]%>e5(sl3Mc"o^9c<`[0-stD5O,#Xf/1/p6P:\F1f*;8LQ7rf.Ma7B;8n_
%=>?FNkTN439^!i^E6nMES3Q^(ecV\[ZR,"&C`&/'C$n[@ZH\E7U%Tb5W^jqH5XXL?BW7Odmq'K/hP"Sq,X[G,!0B'3<8cL+[K.JI
%@^SJR6r\:sKb"NKGhG:=\)OgBiCd[3W`:#5UE&HS"&Ok11rLosZS4nD_hCi"-K,:A9hTG'bQSW6pe><c-gk-c(?f^&G_3.)*c:*k
%LKT9+3g)Ut54R_X*0W/%dI_RuAh'XVglV0OVJAIG>PNV/ed2M;=9&n$U/tD"41a?%2/J],8l]FD6:4l>>t:c,Gpa]FY]r7r@Hd>a
%/8>J;!"03R;&jR-&Pe([_76;l]ms^Q^GqbM(-nS?&CtSgX`E-g@%*co*l%3P"UoA(p\5L=`VPjlfO,CrEE1KRf4ghOJiZHMFX.H"
%#fL"QOYJX*M_5'*/.Z)R[D9UEAWED5aP(W9'Zg)L*5#3oE.]Fm5>L#HfNeN@nR1jS2)NQ%h%"d@,1IR+p;@?TX3*UooZjEan+_kq
%O'uYJ=FGP_%%@^L#'O[;>CBZY"NMlm[E2TC0ndK@M!DWf$rPK?E8+hoKL(5%,os(fB6"]q6G#,(V(AZ;"<iI.RC*V*"/0##_ZY'_
%NWb6UMh]Tre:E;K?Q2>%h2l4DKB->%qOh<":PUTND%QuV"ocH]ffKeKP2SQb_g7hMIH)YSK=V<%Cn1_J_h_d_OaXr"3u^8I.2iN+
%E<2["q-(pV(j3ZCMbFciPmsjFB:?=d:#'9JE5+Z8M9\6B/Lm4lf)u\s^GOKZY\$"+[2dU7Ksl4p)cJk&1M-OtHU'9F3m7\\Oj/\Y
%ZW5N[^9S6&63`8i$*$[:!#Z\UM9";iUf%rE[+4hl6hqd56ki)n$A*;IN_'jmG-QQ,EO]1bhjnCTJM:O_((/#`EhsDthBN6"T8`(F
%,S`jKD#/'jjpC##pqR5,2E[Kon`A2>7ssJYE;/]kbMRb^pl6amQ_WB;R?*pfZBg-C<c7$Hd?aPN)6a!lX+siO1SY&&/k^G;bL_c5
%gkIia/Q,`H=9KWQpG:iYApdNi7SoT%RuRocU46mK1mW>bBiCX`UB+@-W#/F'75)!1Z[8Tj"s5IO`Pi0>\e-`iDu$CO6N-$3!S(PK
%)S1!ch6kV=W.g>#o!d3;PnpB-o_Hp=#j)W'J7LC>rX.^?e;qt,JQA[h.?PXYB]&K.CK=k")u^TFdSHoj^8?X:O5nN020;neG;]#X
%e.=rhDrYSSB\N:AC8dm(=F.md,iDgO,RY4o_-IkT`efCD,Ja2\fH/0p1I6hYpood9dlh&:6`uL-Iu@(T>n,W?co7tZ9"nls>cAm-
%hP2a,L@R$8S,u\3\\Mi,QWDU,LH8]9?Qb.SC:"/7I@0uCM5_<D9h7T6XmZ"j)FB1+\8HMgm&l*2C?V]1<s(#C9kl)qYMk^7'Ei[F
%Od)+D!'+=d+$UZ=9]MeD9g.rQm@(=/-4]P#:*>DZ>J?tgo(^YsmTShWL$i..CP@LN:qT@-e_"eO5<hsPJQ=%qBs*es._!4I1%iJM
%?7eqWH9UrB]^uZTXI5UFhaOa^4g"/IRM(K1oJ`$3hj)Po$/Lln#FRpSQCE#nK/t,3^9A+$f8.\oF;IS#-qJQENYgse4,DVt*b;3S
%4e\&=o#HFRW;RXS,895CV4Y/#\h1+937a03Lj9dpb1brAR#m$.kVnLbNef+HAZ@A4f2.r%L<NJ;&d'9?"EU$K+7q<Ke=D])=2Ot9
%Vlqcs*8pC^NXs'(dBa%i\cOc$&n)("C^^e]#_<25;Ho+())C7kfu/W%?'V%p8,r?X&qJ?B0;N4pPQb;!h`A1Q<b1i1<0.H]/#./<
%`u+tW.j2afIi_^8,;_;;Cti9t..Hk@<YX0diqCKHg("Aip1>/HPAp%(b7FTI?p@!om&*X9V9E>7kpg6cgB9\7!;8*S)>ceiH?q)g
%=*>7%?l%f2jB)Ldbt36\JE=7TE.L@s=f2s!Q%?3aKrluQKubQ;/mTK-V%^g)Yi0*+naYH%KaV\R4dp"\"n[F=;9hjL8,YJg[MjWs
%KQ,'TENY9qoN?HYp5*\(+-[#61$sIJcgPE"\3'heE-R_q2b.dDd!tsoTn:jG=7MsRJEpAEa'eaS12FZDgOrA;2QC[Rgi$@(TEk._
%fcWSUg!i-F\hLIGk+F1[H>'HG%OK3dUb&g?9<Ru!`it6aeN]jL2q+6iPI`?&!jK#k_Emoq/j%I6[3e*'-@N0pQ+4RGUZaB^QUal:
%p@%Qc_p*5t_coJHYP0T$KKhX/#4YK...#!6S\&^Kfo7\=V#6^'YmJg0ZqVE8HjMM`VtIDB2A!#Mj(jYSr=:I<rd/d2"SDXR!b^(<
%M]ejid40"U]51+$lF7uq*)Ije.M&#oRtddCJgI-a+p-B+!G@u:0:&<Yd.8?S7*[7r>I(5g5hmf%UIDe7ereb,TGAGl2HXLBrm71b
%Thmg?eYJVWX;/s\eZQ$I3=$@jr5>9OVN9Is1*c*@+mj*d6$l_bVZ@P_#j!geDS?bF>4K/KQm<p!d6$<CO:@s65\r&N$3M^2o60?c
%CdpSC^'e5YZ>*l:@l2P0%M=O`,=UXXYn5PPCFH_i9H)APQs*om%'osfW1N1nkG$6:,4pM@3hP/_boOh9'm/aQ1FtUogVHc!q7WRI
%*Q,hd,COH+n+;]N.KLNAL.]MWe&M1f6tepQ(LD"G"uiu[L)E/;\g&-7J/1;>YKk^TSlfgm:dO+cYU'i(n>YFW@cD-:Uh"7G(qt7,
%14\a<1pdkZ70$M!KM[Z(:A-=#Pf*o<QEo_6""AR9>+#\eJmR,@QimjSaU,!6Wu6hqA%nXIL9HQeT0cB[.4L%9@(pk<TFa[<&^gW8
%P1S%_b&"a<Vuu&sU-N8L=Lm<Hb!VU1[/keG,1-9MM_DFi)RsDT!65["5QNRI(#W56bngq]l%M8b+6PSTH.oYZ[u8%H.l"d@2rsE^
%FFXq$p>"<&.t<M*+H[_:h9_%4[j`GLk7<D5!,Rn@jU(jg@,6#9%#I$pJE)29kCt<[r=G5H^tuk:Z/.H8Y$:'k9@f1,WIUD@HrIIJ
%72cV-dbJKq5BSE@H#NBb%mUNp>k`('a6:A!CHlu9U#([YUcIF5BK1QX4J`4a(&!>3c4j@<GC`=hUD.)U8RFB;L@BF:+S+d.<(O?X
%4^ES'D.m6u[d7`d^kg"-^g^1s"]Sl>2HtC];:I;:;8\X2@5h1_-'pUK-<C!epFXaFYZDX5qpFG\*qa-#<);XR6>quRP:r8JL]D@Z
%Fe/c@1Diq:X[o*M^s$?l5(P1`8S8&1,V[cAb$+(6;%^$5'G3c&,!/0-.+`=t&XfAFX,/u9f\=YGUrX=d8CQ@?rW-1>D!qpH"PC;W
%V>g^X8QcDsl<?Jt0QEZuSOB_bK3\L;#-@k*:"H7!-4irhbGGN9*Q.rZ[P>I%%H#O'FOjPpluAuB;n$hQC5gM\b>hZtXISH1e=]1U
%MkD#qg6+ka`agO6ph&ukFsGLtS`N6)RXTEh7L'&AK*7GB<!&+CI-ntXbQ_*^SiHsnQ-UA3'!n.K*hY6=4e0=uV[142HpG"Af0lu+
%5HDt,W1lfjm-`1\Rln6n#RSeE^tFq\%AdZHSVC+nM;ulk6u>=i[m_;eOh7jIJ=XVo@GMKY)%Y])UK9\Em0N3$rmhT$bXUm>@Y]Fe
%^2f/K3&E')403KX2*"2:>i,OR`*oe\8!Lj($&f8ABpE'FNB\pNRYfRNb#b8eRuQ,UbP\_DCY+[N5Z0(IR%(And(i9dZo7S4"poei
%Fpdmpo)p`,Wr90fKj1[jgXX>noOo"p-1htU)l5Gdq'\lE<MVIsJ?ZqjDfEROm'YF,jLZK34G?,NdNj!gXEtue'og:X0W1uaVC9\F
%h3DlD;e\OqE:/#VHAg%tb?EH3f5]4N`)5g.llogeBUJF0p0Rj&ki-ABH8pK4ahnkV:7/qUL1H#J/!-M,=oj7#=49gi2>K\WBe^4W
%Zd7V&4d]1+M.tCg%6*sa,Hh9*WRto`?1",,-29tYB5@n6T]Pu*GVQESF.[&Y1VB0:ljlm6ijsJC=]K5Gr:`GenFWh)4.-',VAK.T
%mWJ&]@Ic,93l\EYK%0Yd@1[&AA!ms\-;<3TKFg$CF?s"7N5B_s-l!Uh_`^j6Y+o')-4a4$Y]r7'2l?!$EThOu%&<Wp+CEN@,O,ia
%duEEBL.1"1bQ1)sC#l#sOW"<YeP7JX1OFER5pf?F)@b4R+`\/k3VHZ%FBKl08)2VG0]Jh&[$%?s7=]n1&l])A.V&P?'.2%NKf):D
%.T`<Do2&oJ4C4FTShq=jq<#L2nj$VBV/4&>%.2ZEl+]3hOg)`%2BSXtK39d>5*[d<>8^Ok?'\M7hNfjGCN-`->r1gP\44<C=6=LQ
%h[u37#@raMLsfjuqX.sY!K;W`!K7jtK'8%K;imCe_K\-3h0B&&:n:[2TXC9T>GKXjn+:cgK8T<E5rm$b#2$H1G(Htn`t,\"UjV7V
%:AqRtG5rA?hp;@)Cd:GYn$QH["Tt?ZhLV1urif4[0S6.uG8mFLGK`tW#e9tO$Tl$5HC:?`VPg10eNUEm7auh@;WR!C[grsr-dHIl
%'(1_YTRiK3<`IW+:t)YJ>aYVO#)d)L\lrF6q\r;O:<6^&2gVp?#^1ilbWni-)*ntl1ea$VH!"n;0B"1#@"$@/!dVVR-1sha!Pk,U
%#V+no,nrpR43"fE7%!#dC^C]2Z!*)tW!#0s4X$qI(/WViUa`+<=Ep^j+1&M:FFG/)EOGX>[p@5U,@WQ[e.#Qm_B\L^1'N?mfZ>hm
%-WDag3tk0rWuD(q7uJ`D_SY4Qog5nk_06Y/:35:O9:.&)$Y)<C_FT2-Am-g2)pA`MGDO6GWA6+D3d]?\/W(g4\'/,siA"k)_G\@(
%2+4uPH,(eK1/5k-dc=%[W7%\Y#k+)C2-iL1Q!Q.pi=(GTiAj5?5tQ??)R!=`!>uOnfFYhef6V8*3o.G"`=8J+k\[gS]j#H>A7T'`
%+l4%nC9g,#fH@G13sQ)n9+WRq*:o,=X;28EFKb27A5JMtNh&aG.^JEP'I0hVJGDSpWTjTe2XOaDQ,m!h2C*pZ@Y:g0i!BoW/26sM
%k?XM\`N\?j'R\L"7^PJa280]`+OA6,Qk$^mUE80`#/.R-KF"C]l*@5g11FE5`\NOtBP:%+lD)!>$mh.kGY$4Y_<L-s47CkSHK9Pf
%Q:r-Z8phse>%)Zj%!Sj/"3+jX;kHe?pTS3]C"h#]4j.0ET$5`LYLgd'&M9=&E_S/%mqR]_pVM4%SG(KZs/e3E@QUdfrB`e$eAs4i
%ZVX?Ig2!hP(@#k41fqimXFni6HE#+)9)j8oX:C?26*iV4QH.S9GZu/>bL:KOXKE&jeW+":L4o]>V.g\pl(ki?)K)5U(CG5W=?kYi
%3@-k\-,%Tc/Fk2J&h]*dbT_PC:@p(m6Kc#/._W4367m4Xl_N)UqmFM-X`A-6SD,ML[nbm6Edc,ii&Z"*atYM(OmA7n3OcQ?JDNh^
%/omtMbj.;Y]?'**1VW2)n1'4+a>>P+dc\RA,.kP0V_->7kKM^BJTjl]Xg<T%[,EIK\B%">dZqRD!sX=C'NjBPr%\ho1*)U[9""^T
%hB6Unp&ot(lO%@8SDmchXZXS?(/_D\G\n%J>=@dXTrqBhC_8X2#M;e&\9"ll("<'<5l+J)nCb[ff,;J;??)Nd]M;FtZ^K!!i%e_c
%,HZ495FrORMfe):n+iY[Sl>4F=aoulbI,EF/X'e)m+NooG>;JHEa4MrfSu-K,.G#%^o^LW+.OCeb.'Q<9(k;'ZV9;Io/qqQcoGgI
%9Xq/:1H2Tuk;:LF+10*-/^m?7]%KjcQY2LgB4fHRRrt04OUkW+NE-@PAS,PB^KKWC(AXUlenC=TqV^>F.P,k:dUN=#U.T!&cEaBq
%=]EGCb@o2_2N+#o<B87.mU]69ZRVaGd(Om66Lem/lV`X06,pKV@o;6j-j3[Q;(TmB(*sj!b)JiHa12[j;(hFU@sO?MJ)7!A'`Xm=
%?sPL+Xt3\>+0=cB('P/*ZA2H)^nS3o>^`iV;Y\&D]YS&S`Z#:a'MKkW*%bYnnW+_3U&VfkV`TMOh0<d7,Hn%e!qnIn4F2QGMS\P/
%[HoABV@+.BCH:0J(c^Zk[#+U#^?^]jI4,3c^:o5c@TD0Sp/T!JaX%Q_3`;`kaekGe<O;FWl1,;;Z1s(9V_jP?(OHasm*kO60/kJ?
%(Gi_\3P>YNol'Ve+>+I*OEWG()60KCTU4:pn3c%o6W`Rfm5lAj64DmT;Mi?12P/j=1>CaWA)E6U=/Zq5_mNr*Ajd:q%h@YAhG;Mu
%`2`^qOFL2qWQ,caGQQA%#5g:Np/$]iJhgZSQL4LVY7/SCUW.?N^h$/BP/_bNK1S"n0A+q(pNj"[0AiFa1qoYeX/uV\'[tt_?]Gr2
%PJ_6E>INITb--H%h-@BI4p:Cbh_[^<5qR/8MA!SO4+c&^O:QX*$nXOL`sXgQ29+<)$00(gl,g8o$U&-!^&<QBI-rS&?@76[#^@TJ
%`lXRV^j$L%4@ulkJrp<r_,c0F'pXgR#Tbnc!D;((k[rduo7nFM%_k5sYMe>ujC(Rq#4n_uf7GEN\od]jN7Df19Q\Z977r6kSc.Um
%Jq'Po3G<NUmtU7uR0\l[`'<).X)$+W;G,\.,\H'M^:XeLVA6c$]eU^*>s<WTE-8b<q[ifS[s\2R:^)n74oEZN0f3\,,m*U<::hrA
%r60_?dI!k'BfX:>/(Sn^m4H\7Tk)LM$'BNNI:AMb8rh08;rW8rS<o(TNA[uDat?aO(a;anQ<>X&b-Xd*BY:l'2&]Wt/gASj227jK
%%l<7o?I'IhgW4FLq8B1eo8c_bHl;mE7-/MS+S$d5_)j)i"2D[01dDMk`ihq*KBs6W?hJdXGuW>dlYAeJ)%Osma%._92ZY%G\U%be
%\usQ/r*<i[eUCU+X@o:N_ajqJPfFpNn<9>A0,f*)g&(Rla^XPuojmh'f*cN%4E%=]o7C=cMtQdHCpV)m>jg=bp0K.u[C02:Q%ed3
%CT4X$>:@0(g@;76(WuHah&`[/FDNUm`=5<r7C'ojVG=,[kD<$uM9pVSn_U:")Bf88ab3hU7/rm?dL>Cf"7ST\+.;&)8F6mg;R"HA
%*,C?[7foD>kdE1/GgtC)B^:JB9p:0WklI0.$pkC8r(T/B!=Ud?6utScK:QDS$%>uCX>I67&9jVVNEC%S[.ak-6<(7!6]dk@mY%rB
%$eg-krp&9<f!Tio_(m\*pb#ssF]^MfG:*'fL1#HJP\2-5ep[l9@)gp`:jL#<PO9.tKN;oqK0G\I[TLi=-M8X[_g#1@c"2bW=N))_
%D@>dhs'doF=;+it=X&\$*9tYq9(&H8YH9;s)'BN"N?dIB]QRs!?QT3uYHa3hpAbR-oqV'o:cScg!t3Pn'";;pS2P"[N/Ob:l`Yg2
%=1mNWi\=rq4ZC/qa-#V-j>:F`Zl=<Hi$J!=QXm`Rr[=dL-/AW0nTr?[mJ(F=bk><N-`*)J?EfHr=u4FM1IR';9o'GU***j=XD'L-
%&;*=p7qc[$)&-Xb*.JDpVBJ:X\i"_#OId\q%;B4M'%BOVnel+4mLhB,<JWsXcQDB@M!m$O:D,QBf^CEs.m;NRGE3T8h"6EY]>/8,
%Hf=\DA8b1Rs(.kTA=N1!">Va)54+,?L^M$PQN96Da&I7s$qqj\@-O)t)7`gFJWYK-Z+qa2PrQYgA(>D;Z#T8Z,I)nVYGE(u\t\og
%Lel>gTO(CMO_bJi=Lf0[[&mps_.&k61E6+`>.goHIG$$[a(o[+j$qsZ"t^^,>p0:*S-Bdu9@qH2@Y@WqqqGO\7.5?GIFQ1p%GZ?O
%-bCV03nq,oCld9#b6NYpRZJV4@*F@?X[lKkW'T5%WIK\:%('-64,N>_dA+pY*(/LQT-SPQPO1!Cl7D>lOR#L7CstTg/S*BP1G+0:
%Or6?Lc.]!%FbP>]]BGD*X3JX7H/&`brPqY(UkLRG2YS0-HqAKd5UeT[\WU#-\U%"8WhFa/qopu=1_SMk)fOO+(R)\in"4QF^$V2J
%1uN<`AsDBH<JsK!#q"+R0Gp_`I%Kq$RRVPeJ2Vh=2"E3gjQoX1;FMUR&piao&E,E'DO@ccZ4B$rbq`3j];n)rkB;*iA_uf[*`r6f
%k2Na9((9B6iZ8i5\6>Hsaer]t>3i(0S?n?Y+5;api](=jkRAbq$e+'f3h1u(0c0B+NYa=3<\eFX*MVI]E9`=][W';?#SF*<.E]n'
%LZN+-G$Kh]DR(N@(PBcSDtaori=LQnkjg>aZS(Gj!L5X5`!dFB+i7k8YDE!-L$Z6U\aOfMgI;%^-3sEVO'L@Oe``I):*rD#4NcAp
%]#:_a8M(;#OH&=bLZQoC>nMn)Hp:F#bk%LQ$1l&uV30\=Aqf,&!+c`9@=lR*rn%s:Seq0\IN:A"]k+"GQG@n09fMpo6dVTq'D_H7
%75%$X:rI;0?'0Df1m5\\c.J1M<5t22<p:-A&Qom/"I$/c9#`p\f0/"&2!UcOj63#1/&@+j)[8gG1e]P8[\'I*cKT>[T&anqRH*&P
%_k&G]O$G?):Rh/4]HP_fH2$#+:4tY'bL^#FgCRVm['=r,X"`qM%I8DVVPA&KJ$@h]_^(f8p^7qT+O944Yg(sO2Y04Q:#gC@`5#i[
%/$N0mkKEo&h?k=qeV)a8[PG6"]^8s7"]shng,p4i<],!XX?FN-Bbm<B3\M?<-Sp/oV/6I\V:B:jnCUqa1CL8HC`BL9W.hXeZH5k]
%gLen0_[CLRBFI_u*u5OaW/8-T-+^nD;3r[+[\r?53JOjMp8juTkLe0;`jCUlSHDpY^t'\2[YU-L")<b8gGqI,%cj`9Icn6!3e4_t
%1bRdMf?8Q5)a>OnIZLQ0D]Moo#NY:R\M"SWqrr[7H][P7jLPT,mQn"&OR!tK\d,e66*>QrlQ5-`19mU$guoe<qVO;NZnA@1q],a`
%4te#2S4b(@ofehf.5)Atl]pS.S$*16R9du@s#Qod!Gh8c?Z3+C`P:hSnD$)Gk&t<Cr8'Gb\L?WbF(&Ia`12"bNg74:6MXuY,,cEE
%%dmT"7'*/&j^J[5.oRp)$rH)gRW0a:N=b.@VI2%qE8-JKZf#6&,&U?if&mU4dP-Tq/eo;Uc=.Wb_Sc:\0apq(qh*H8F3^;9MoC4>
%#V5['('DVoCY`,%]G=^qB/)pb%=Of@('FJSQZkr]?!>q@HoZeahui[C&A"`P5TGe,Wnhi@"9I>8\r&uhJj;C0c_1!9^N=r0!U63(
%_]]/Ard$SXoI7`cBR`*t5ReNRLQHqS.ia5#.6Vc4rUu-q%?QEkD+Fc!bjUKl4'l2Jj'$=B<hE-?ko1*=JgM"0IdS$\T\NiK\SS5o
%#JCUE53R,[BU9h53j8qS9HEadFDeZfl^(03^'GCs;Q3q*+4WU&YGGp19%O[;!+_%fV<>a*,.Q=rXWmCAh]KC-Wi4JAV-1E=59(R=
%-L(@h":PK7aPK^J#3,TiO97=64%pGOVmpFo/d[1o\?K0;k(G&KW6751cd0ul"1F'AXo57-)"DcOSSWU6Y$mj:@DCH3h;oRK)oEFt
%M:B#$*HVm1qs8@jcB8@^9&=Jl1[Jk@Oh*J-$15",70=\WNX>kZ$&hl$M?WDH^)XLU^]a@H220\k]Cpbab"&SsFDtTda!&]TaPQNg
%n`6=%,Bo$B<^rJB(d"D>G)B&A$osg]&L]U&&EZ@40Iq[aM^4#mY0WaH0;fd"X2r(phB-IL9O\t?na)0=3-B^A%ae)ra1s,jo)<an
%@PIBCE":H]\i[dnn^c_t+40>C%jh=FJ*C*A!qQEWW=N&2Hsi(QiThBGpPFgdOq5'Y/j\^7PY$TfmEq;:].Mj:*\Pn.;8b+M^<jtY
%qYXh/5@u/"0Pn>1V5e_JVi?BB'ZUJZ?;4H!%_;Qn\"k)Y$-5+['7jS\M`D7nMu7[a42;Q(p1,(ug2iXk6RT4J)]#Ub-;>/V"V.X,
%&M<GJE^LOE/?tZ#JLN@?3$UK/3Of*#;JL%An3/_l'ZuBuJ3TptrkM&MHMUbt:>jT6#lDR*K\I!h.>UTm=-3K<3mO@^U"&n_kXcRG
%=W2d&7m%T(m.$;CJ&K_S:IIfl6f`g&TR2A:?lY,Ao?F)h4\G4;W!)T.&S?<_ZNWW^$F8s6.Uon2*QA2Ul3T@S@0:h],j>%k+((Fo
%0kt2Dh`_i@GuZ1V%*=o)HSl`*T/At?$(GmeH$10:n0::E)L]"o6<Q@#jKO&5FI.p_^:"N,HQ6=?laPoq*.#OM$8'fS2P8,.O4dpd
%L-(*$H.C.2TROaGC*[t1@s'dL(?aGdqV&jEFK`/6rt;k('5W@aGNYO/o-S[Zs$^sP-=g*55i)gNfR7`XF"!4"9oo'X[Rh.oM#i:8
%Q7149k>KiU"8jsC3AB_=gUj.\92J+;I+suFO_74^qR\)cCSJEfqHB?OD/+mg1gaJs21U)XBot+KPTFR)+JWg_<iS^"o^@O<i?]K_
%7s5N/p//gC@=4]5[s^s]%:rW4l\=2#&)Hp*>n;@B*f:46]T(4L`%S<OONhc5W(M_@D/q*<Alc^a/'C>W'+h#k;_$]=8a04F%LPra
%me`G*b2=ndHY7P.FOrrg9,F;&l#"#1qQJhJ-(kl+Im<99&&`/HU@_`I7!rO63QO@9qj!@*D#kBQ:\no_kD]'P:WpAaVMSIslK`T&
%[(@ZrCSJEfqB5587?;B86jZDI?X+7UPi=VjFBklDM5o*o+ZRaCU*g-&]*5K;5Vi"270_OV6<tb.`GJs_7B#Io_aV2<U:VndX.le/
%'\/H*VM]csigT(i@2_KUFD5GVf,-p5GJ76^8=X(:9h;-P*(KE"MSlAO_0%MaNCjr6MKDg3/(<WXa!MI7Qqa9r`Ub4b@SP6(Y`cKf
%p$&V4.l1-apu^EC6]9BLeC?ZackV*nAG*p[b!oAf6.lJJegKLMHpn7%.9"eq(:,%/TkKia1bU9;graSR+]<k;e'dG-74'dgNX?B.
%.e\sWk!u^6`WTn?rdZJl8mVoO!E'b9HK6AnQt'6$c@hW2caGaoS7,0&=Ife6PL2<Te9d]1%C_d%AODhkV4`APn%jmb+[Xk&bn&uU
%I4^(WEd82.lAo(oW!eEU#XVm=[dZUOpjh-6lu"7`k'il8*M%!&JsmQ_f:oiBEdo.6Vu+3:pe&]CPW.d,4kc=;Sa$pigX"Rp[81/*
%2!(61:<'.\XIb@h.8$j]JgHKcVW_`>hcF04pc7FWUV3,sG8&o$QaJGB;d\5tn_c\V@KL!Z_?Jjh_9O?u:T-$-V;k_P1QI0J<e)P<
%+2,T1[r$-^l1(p[KgjcV=QA`2lZYd>=%%7$oMq++!S-^I=pk?eUa`#moEd#BT;>bdfLo(0h*b=ph\sUP"KRYR@KYg>M\U_2Pl<iu
%n,&OtnhCjY\g_i)7!D(A=%$CSCQ35)YE11?W8puR2u5n3QS+05nYTe\I.:7]c3^0D+s>HuAh`1@RSj"BANoci2LW=.CUtq&SDI'L
%IFgo3?$+[e?TW&ZHN!EF+uD-=c\n6fM]@+hO@(l:R1EK!Ml@+n]-cNH!TV-J:"eNg*e5A/bM0b.MM@E)pS-ZZ._;[T?XVSK@g@L'
%<RehCCoqf0qkPQJYA?.)XE\M`!#_k`D18oUJG3rI)M?K/Bm%bRe5-\#jjtI3mV:sgL@/g?CT"7DcF<_]09rmCIkNX5YsmT/Z$2lL
%2VhB*M3A&@=<J(r]bg_e6HF\N[jIV?hXtESdFSU81QqW=%cBb_P2bi:mcu;*VulS(BJUA`F<N[KRu+K8k::lV$2Fe2d[Hrg8Y78&
%M-45u)NrHFg-&muZ?NPmRWQ:<dnuP6BU^&^;0DMB_&&#!F*-T&6?PmAV6dcH_,L3+'R+\FJ+\9/lkt^IS-WQ.e]&Zl*_L(7GUji"
%jhUb/5Z8t%ZOi+e+bVFnk>MZMHoLcj#`Q$$8L#?-,R*`@7)@fY!7+mrne2.QfZ3hpQ6MEr\OFmc5:H]h%HhKMA+=%qO`0\$NFe.q
%NaNup,M;R2#)EH`lPa9J#bN@N?E\2^K7l6rM<khI@*VVgg%I&.Tt'B3YPf`?Y7nI8T*LKo0'riDI*K@tZl?-fjVU0U!5Jf[C$m%/
%,1H&62@UT2P;g=/qdh,u@%/Lk6AdRRRuVFti0)rj94,g-;@_2qF*pYJYfKGt6TDMp2->bl%%jerL1b!Ubs7GF+P15P(VZm-*^Bu_
%qRi#$G$P?uEk,Ea8MLWgHNMQ*]Hc4&]uf=1A"P[7d8504=;N$BZY6D?8:WXt<C`=M)Of,1Z#YBTJpNS6TFusq$>aeae+Ceo^G.P_
%@4-l"R-2L\!7Hmc)d$$@gO5GdJ9ZX`&Ximb2@d[ds+]FI<8jd.6J@E-`/"u$`9;Ii)3;qs!%M/-!/C$Ij1U%0-WkZqo&]5WB8c-8
%Qt'+f&E$u\Hkp$W,JX'BG@B-\KWCVe"6r_+HBHB\n_HA(FEp#W(3MtZZ>Y7A&pJ'e=?O$S%sp5`OCY)6cE[98qUn]"@5l3EIa>+H
%Qnr`R`XPQs`,=N#NLRt2U/2Lr;sStQ6D`2T+5B]U22gb"oD7Upk_N%N@DIinAF,7-ZsSHM.H=OHLR'RZR6$R$d5Z6T+WF<;iH.r5
%jcUa`;%;tC8OAIe8T=*i<U&%fbumm7eT#:i;7tkHAtY&L'EuucTX^Le5Y)Pc/jV^`/AL5b][sZV&tXTbK1VhZh4>+bK!?_S<A`Z]
%JFJ,$;+!<l1;K_!@Jhi<!>o0GeV"&;[SFfhm@[Yh:GrE">a'<t33[bad,N)P)A<jk&7ON1%J?un]=At0jEg',WJ#QF"$otWO&W,s
%/d<NY;BdM(XbtTqHe.Vc-.j!U%?MlG/7K2b-VPV[e]b"0D(!<n_88anmk.s`\,WJ9EkO,-]6CO'(YW8r1KMZ;;!WmC@u9%ZfP6+K
%,#rhsDin:76`i!X/ffr*BeZ-dJuYKn4n.]88Th">]U#,oDK4QZ'Vq<[GB&!RX4N(P(^QDe,/M4<gBrQ:!6H5ZNA=Y?I!W>9NFFKp
%Xf*(Y6<o/?X3DMgfQ]0[!WZX7!X.GL4;JX7c()FOLW4C0ML2bmf%Ukd_G9+X%[7GL_;`H$;&"^*Ft]Y,#pV=br:/?GY9udeC`>_V
%m=^Ia8><m8'?&8:B\^sFlQ1'1Cj&%D54H]_2cDXJk8DiLTj8V9/-qT_i'i,tfMFET:A,I*nO[&k>on]E<d#!V]]8%qTN2$4J,@Pf
%^\`f$J,#'8s).c-%tFUT55isFIi,?<DuRSbIi9,^Il'YFQubFi`BX:_ci<jf^\Qi\J,e-Z&,tb\s7Lm@b9)c4f&g`gM;qZnUu=#M
%SUg;ng[/,n`ohNLh)^_p@;!42+;V3:e=(R'jPhh*>N8oPFcn&0ZOJ+C_</iJZ(5`^U'ug`%5Djs95\BH"Xrp*C]jT43hC0kGjC-k
%XeCLEFLD4S:$:\go5m5p?YpkN;^_4^b<CV.*&eD2jfs-a491X^-V[V"c>B"bel99@%LO7)FnL(bs)4@'.*t?8;eBK/6`o,P.KHNS
%7dOMZ(#8=e:^nqI9HOLl.Ke_rBM`9IqYGh1Kjs5N1T:)%0gQs(go'*S[1`3T)D+4NCCfi3PCgO>T,JPANrB\AC#dTj)BtplZMf`k
%):j9DiOGM"D9n"9$nJ(=pG8s(=IA4.l4`LFkiuMCHWP]\*aJZ%FE@*U7nn*OMlY`Dg[%@P`up?(SZe++:pp,\l3KqcHkfDDU5Q(e
%PO@EVHg16X!9kehdl%UHIGs^B\Ae\<WcK-22ATHJ.q<h<226KA9t3+D_gEg+D<3J;)%KM'7Kq_?#8hQ<VuVd)h\i?&X>t7qZ%_ML
%1<4fXh)TK;FEC"cW67dD_hH]gg\(`23(6]P3H5Uj/UZ>\-qjp6kf#hk`?'$PYSC1"A\Y?//0oe*g\s-E+Ej3i(I`n$o$,+8'q*Ds
%iNEtl*nO`Q-?q>3X7*D56r]t/K->CM*aELp86lmrnm7F[jgTo<42<X<qL@[QPUat2]mCA=-ct5+WNE%m^Z/PfLP$fWeFVsUnN^TS
%kghkQ?o`Ggp?,FC,E&a,#?q;p5hI0/6S]A-55YDCb7fli_@MHi$l`X8e?WYrP?tc2YVMEtY8bpG*DS!Ve,/ViT7/j)^\NZ_:]K\*
%IsChgs7cJ!5(+?$^\]\!s3p`BpKrCLcTcgWQXBdX:Oi?A^O?.Oq`k)uBq+SkTCG\fJ,7@_J,RuKq9/LCJ,Q#>o"Q<`7G@uqpNQZ%
%+90Yos6BUhnZtdt~>
%AI9_PrivateDataEnd
